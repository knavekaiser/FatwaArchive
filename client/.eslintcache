[{"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\index.js":"1","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\App.js":"2","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\Context.js":"3","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\LandingPage.js":"4","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Fatwa.js":"5","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Nav.js":"6","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Footer.js":"7","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\About.js":"8","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\SearchResult.js":"9","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\FourOFour.js":"10","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\UserSubmitions.js":"11","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\JamiaProfile.js":"12","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Forms.js":"13","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\AdminPanel.js":"14","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Searchbar.js":"15","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Modals.js":"16","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\FormElements.js":"17","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\TableElements.js":"18"},{"size":597,"mtime":1601755664553,"results":"19","hashOfConfig":"20"},{"size":4341,"mtime":1608561657029,"results":"21","hashOfConfig":"20"},{"size":946,"mtime":1608648530393,"results":"22","hashOfConfig":"20"},{"size":1199,"mtime":1608657089308,"results":"23","hashOfConfig":"20"},{"size":6349,"mtime":1608828527390,"results":"24","hashOfConfig":"20"},{"size":4136,"mtime":1608367052211,"results":"25","hashOfConfig":"20"},{"size":1379,"mtime":1608279942836,"results":"26","hashOfConfig":"20"},{"size":405,"mtime":1601012712794,"results":"27","hashOfConfig":"20"},{"size":6345,"mtime":1608976105078,"results":"28","hashOfConfig":"20"},{"size":255,"mtime":1600541675706,"results":"29","hashOfConfig":"20"},{"size":5326,"mtime":1608720907863,"results":"30","hashOfConfig":"20"},{"size":45163,"mtime":1608871752783,"results":"31","hashOfConfig":"20"},{"size":63877,"mtime":1608826346037,"results":"32","hashOfConfig":"20"},{"size":67232,"mtime":1608871774037,"results":"33","hashOfConfig":"20"},{"size":7966,"mtime":1608976132028,"results":"34","hashOfConfig":"20"},{"size":647,"mtime":1608310457675,"results":"35","hashOfConfig":"20"},{"size":29469,"mtime":1608807852752,"results":"36","hashOfConfig":"20"},{"size":14351,"mtime":1608753861804,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1jm15ld",{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\index.js",[],["84","85"],"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\App.js",["86","87","88"],"import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { Route, Switch, useHistory, Redirect } from \"react-router-dom\";\nimport { IntlProvider } from \"react-intl\";\nimport LandingPage from \"./components/LandingPage\";\nimport Nav from \"./components/Nav\";\nimport Footer from \"./components/Footer\";\nimport FourOFour from \"./components/FourOFour\";\nimport SearchResult from \"./components/SearchResult\";\nimport Fatwa from \"./components/Fatwa\";\nimport About from \"./components/About\";\nimport {\n  JamiaLogin,\n  JamiaRegister,\n  AdminLogin,\n  PassRecovery,\n} from \"./components/Forms\";\nimport AdminPanel from \"./components/AdminPanel\";\nimport JamiaProfile from \"./components/JamiaProfile\";\nimport UserQuestion from \"./components/UserSubmitions\";\nimport { SiteContext } from \"./Context\";\nimport Enlish from \"./language/en-US.json\";\nimport Bangali from \"./language/bn-BD.json\";\nimport \"./App.min.css\";\n\nfunction ProtectedRoute({\n  component: Component,\n  redirect,\n  role,\n  children,\n  ...rest\n}) {\n  const { user } = useContext(SiteContext);\n  return user && user.role === role ? (\n    <Route {...rest}>{children ? children : <Component />}</Route>\n  ) : (\n    <Redirect to={redirect} />\n  );\n}\n\nfunction App() {\n  const { setUser, setIsAuthenticated, setSources } = useContext(SiteContext);\n  const { locale, setLocale } = useContext(SiteContext);\n  const history = useHistory();\n  const link = useRef(window.location.href.replace(window.location.origin, \"\"));\n  const setLan = () => {\n    if (history.location.pathname.startsWith(\"/fatwa/\")) {\n      let path = history.location.pathname.replace(\"/fatwa/\", \"\");\n      let engChar = (path.match(/[a-z0-9]/gi) || []).length;\n      if (engChar > path.length / 2) {\n        setLocale(\"en-US\");\n      }\n    }\n  };\n  const seeIfLoggedIn = () => {\n    fetch(\"/api/auth\")\n      .then((res) => res.json())\n      .then((data) => {\n        if (data.code === \"ok\") {\n          setIsAuthenticated(data.isAuthenticated);\n          setUser(data.user);\n          history.push(link.current);\n        }\n      })\n      .catch((err) => 69);\n  };\n  // const getSiteData = () => {\n  //   fetch(\"/api/siteData\")\n  //     .then((res) => res.json())\n  //     .then((data) => {\n  //       setSources(data.sources);\n  //     })\n  //     .catch((err) => {\n  //       console.log(\n  //         err,\n  //         \"here put a toast saying site data could not be loaded. some features may not work properly.\"\n  //       );\n  //     });\n  // };\n  // useEffect(getSiteData, []);\n  useEffect(setLan, []);\n  useEffect(seeIfLoggedIn, []);\n  const [messages, setMessages] = useState(null);\n  useEffect(() => setMessages(locale === \"bn-BD\" ? Bangali : Enlish), [locale]);\n  return (\n    <IntlProvider locale={locale} messages={messages} onError={() => 1}>\n      <div className=\"App\">\n        <Route path=\"/\" component={Nav} />\n        <Switch>\n          <Route path=\"/\" exact component={LandingPage} />\n          <Route path=\"/moblieSearch\" component={LandingPage} />\n          <Route path=\"/search\">\n            {(props) => {\n              const url = window.location.href.replace(\n                window.location.origin,\n                \"\"\n              );\n              if (url.match(/^\\/search\\?q=.+&page=\\d+$/)) {\n                return <SearchResult />;\n              } else {\n                return <Redirect to=\"/\" />;\n              }\n            }}\n          </Route>\n          <Route path=\"/fatwa/:id\" component={Fatwa} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/login\" component={JamiaLogin} />\n          <Route path=\"/passwordRecovery\" component={PassRecovery} />\n          <Route path=\"/adminLogin\" component={AdminLogin} />\n          <Route path=\"/register\" component={JamiaRegister} />\n          <Route path=\"/askQuestion\" component={UserQuestion} />\n          <ProtectedRoute\n            path=\"/jamia\"\n            redirect=\"/login\"\n            component={JamiaProfile}\n            role=\"jamia\"\n          />\n          <ProtectedRoute\n            path=\"/admin\"\n            redirect=\"/adminLogin\"\n            component={AdminPanel}\n            role=\"admin\"\n          />\n          <Route path=\"/\" component={FourOFour} />\n        </Switch>\n        <Route path={/^\\/(?!admin)(?!jamia)/} component={Footer} />\n      </div>\n    </IntlProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\Context.js",[],"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\LandingPage.js",[],"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Fatwa.js",["89","90"],"import React, { useEffect, Fragment, useState, useContext } from \"react\";\nimport { Route, Link, useHistory } from \"react-router-dom\";\nimport { SiteContext } from \"../Context\";\nimport \"./CSS/Fatwa.min.css\";\nimport { FormattedNumber, FormattedMessage, FormattedDate } from \"react-intl\";\nimport { Modal } from \"./Modals\";\nimport { Helmet } from \"react-helmet\";\nimport { Report } from \"./Forms\";\n\nfunction Loading() {\n  return (\n    <>\n      <div className=\"h1\" />\n      <div className=\"ques\" />\n      <div className=\"ans\" />\n    </>\n  );\n}\n\nfunction Fatwa({ match }) {\n  const { locale } = useContext(SiteContext);\n  const history = useHistory();\n  const [loading, setLoading] = useState(true);\n  const [fatwa, setFatwa] = useState({});\n  const fixUrlOnLocaleChange = () =>\n    fatwa.link && history.push(`/fatwa/${fatwa.link[locale]}`);\n  useEffect(fixUrlOnLocaleChange, [locale]);\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n  const options = { headers: { \"Accept-Language\": locale }, signal: signal };\n  const closeModal = () => {\n    history.push(`/fatwa/${fatwa.link[locale]}`);\n  };\n  const fetchData = () => {\n    fetch(`/api/fatwa/${match.params.id}`, options)\n      .then((res) => {\n        setLoading(false);\n        return res.json();\n      })\n      .then((data) => {\n        console.log(data);\n        setFatwa(data);\n      })\n      .catch((err) => console.log(err));\n    return () => abortController.abort();\n  };\n  useEffect(fetchData, [match]);\n  return (\n    <div className={`main fatwa ${loading ? \"loading\" : \"\"}`}>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>{fatwa.title && fatwa.title[locale]}</title>\n        <meta\n          name=\"description\"\n          content={fatwa.ans && fatwa.ans[locale].substring(200)}\n        />\n      </Helmet>\n      {loading ? (\n        <Loading />\n      ) : fatwa.title ? (\n        <>\n          <h1>{fatwa.title[locale]}</h1>\n          <h4 className=\"jamia\">\n            {fatwa.source.name[locale]}\n            <span className=\"separator\" />\n            <FormattedDate value={fatwa.createdAt} />\n            <br />\n            <span>\n              <FormattedMessage id=\"primeMufti\" defaultMessage=\"Prime Mufti\" />:{\" \"}\n              {fatwa.source.primeMufti[locale]}\n            </span>\n          </h4>\n          <br />\n          <br />\n          <h3>\n            <span className=\"hr\" />\n            <span className=\"content\">\n              <FormattedMessage id=\"question\" defaultMessage=\"Question\" />\n            </span>\n            <span className=\"hr\" />\n          </h3>\n          <br />\n          {fatwa.ques[locale].split(\"\\n\").map((para, i) => {\n            return (\n              <Fragment key={i}>\n                <p className=\"ques\">{para}</p>\n                <br />\n              </Fragment>\n            );\n          })}\n          <br />\n          <h3>\n            <span className=\"hr\" />\n            <span className=\"content\">\n              <FormattedMessage id=\"answer\" defaultMessage=\"Answer\" />\n            </span>\n            <span className=\"hr\" />\n          </h3>\n          <br />\n          {fatwa.ans[locale].split(\"\\n\").map((para, i) => {\n            return (\n              <Fragment key={i}>\n                <p className=\"ans\">{para}</p>\n                <br />\n              </Fragment>\n            );\n          })}\n          <br />\n          {locale === \"en-US\" && (\n            <>\n              <p className=\"dis\">\n                * This Fatwa was translated by Google Translate.\n                <br /> To see the original{\" \"}\n                <Link\n                  target=\"_blank\"\n                  to={`/fatwa/${fatwa.link && fatwa.link[\"bn-BD\"]}`}\n                >\n                  click here\n                </Link>\n              </p>\n              <br />\n            </>\n          )}\n          <br />\n          <br />\n          <h3 className=\"sub\">\n            <FormattedMessage id=\"ref\" value=\"Ref.\" />\n          </h3>\n          <br />\n          <ul className=\"ref\">\n            {fatwa.ref.map((ref, i) =>\n              ref.book ? (\n                <li key={i}>\n                  <span>{ref.book}</span>,{\" \"}\n                  <FormattedMessage id=\"page\" defaultMessage=\"Page\" />{\" \"}\n                  <span>\n                    <FormattedNumber value={ref.part} />\n                  </span>\n                  , <FormattedMessage id=\"part\" defaultMessage=\"Part\" />{\" \"}\n                  <span>\n                    <FormattedNumber value={ref.page} />\n                  </span>\n                </li>\n              ) : (\n                <li key={i}>\n                  <span>{ref.sura}</span>,{\" \"}\n                  <FormattedMessage id=\"aayat\" defaultMessage=\"Aayat\" />{\" \"}\n                  <span>\n                    <FormattedNumber value={ref.aayat} />\n                  </span>\n                </li>\n              )\n            )}\n          </ul>\n          <br />\n          <br />\n          <br />\n          <h3 className=\"meta\">\n            <FormattedMessage\n              id=\"additionalInfo\"\n              value=\"Additional information\"\n            />\n          </h3>\n          <br />\n          <p>\n            <FormattedMessage id=\"write\" defaultMessage=\"Writer\" />\n            {\":  \"}\n            <b>{fatwa.meta.write}</b>\n          </p>\n          <p>\n            <FormattedMessage id=\"atts\" defaultMessage=\"Attestation\" />\n            {\":  \"}\n            <b>{fatwa.meta.atts}</b>\n          </p>\n          <p>\n            <FormattedMessage id=\"dOWriting\" defaultMessage=\"Original date\" />\n            {\":  \"}\n            <b>\n              <FormattedDate value={fatwa.meta.date} />\n            </b>\n          </p>\n          <br />\n          <br />\n          <br />\n          <button\n            className=\"cla\"\n            onClick={() => history.push(`${history.location.pathname}/report`)}\n          >\n            <FormattedMessage id=\"report\" defaultMessage=\"Report\" />\n          </button>\n          <br />\n          <br />\n          <br />\n        </>\n      ) : (\n        <>Fatwa did not found.</>\n      )}\n      <Route path={`/fatwa/${fatwa.link ? fatwa.link[locale] : \"link\"}/report`}>\n        {\n          <Modal open={true} setOpen={closeModal}>\n            <Report fatwa={fatwa} close={closeModal} />\n          </Modal>\n        }\n      </Route>\n    </div>\n  );\n}\n\nexport default Fatwa;\n","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Nav.js",["91"],"import React, { useEffect, useState, useContext } from \"react\";\nimport { Link, Route, useHistory } from \"react-router-dom\";\nimport { SiteContext } from \"../Context\";\nimport { OutsideClick } from \"./TableElements\";\nimport \"./CSS/Nav.min.css\";\nimport Searchbar from \"./Searchbar\";\nimport logo from \"../logo.svg\";\nimport { FormattedMessage } from \"react-intl\";\n\nfunction Avatar() {\n  const { locale, user, setUser, setIsAuthenticated } = useContext(SiteContext);\n  const [open, setOpen] = useState(false);\n  const history = useHistory();\n  function logout() {\n    fetch(\"/api/logout\")\n      .then((res) => res.json())\n      .then((data) => {\n        setUser(data.user);\n        setIsAuthenticated(data.isAuthenticated);\n        history.push(\"/\");\n      });\n  }\n  return (\n    <li className=\"avatar\" onClick={() => setOpen(true)}>\n      {user.role === \"jamia\" && user.name[locale].slice(0, 1)}\n      {user.role === \"admin\" && user.firstName.slice(0, 1)}\n      {open && (\n        <OutsideClick open={open} setOpen={setOpen}>\n          <ul\n            className=\"avatarOptions\"\n            onClick={(e) => {\n              e.stopPropagation();\n              setOpen(false);\n            }}\n          >\n            <li>\n              <Link to={`/${user.role}/fatwa`}>\n                <FormattedMessage id=\"dashboard\" defaultMessage=\"Dashboard\" />\n              </Link>\n            </li>\n            <li onClick={logout}>\n              <a>\n                <FormattedMessage id=\"logout\" defaultMessage=\"logout\" />\n              </a>\n            </li>\n          </ul>\n        </OutsideClick>\n      )}\n    </li>\n  );\n}\n\nfunction Nav({ location }) {\n  const history = useHistory();\n  const { sidebarSize, setSidebarSize } = useContext(SiteContext);\n  const [style, setStyle] = useState({ boxShadow: \"none\" });\n  const [showSearchbar, setShowSearchbar] = useState(true);\n  const { user } = useContext(SiteContext);\n  useEffect(() => {\n    if (\n      location.pathname.startsWith(\"/moblieSearch\") ||\n      location.pathname.startsWith(\"/about\") ||\n      location.pathname.startsWith(\"/jamia\") ||\n      location.pathname.startsWith(\"/admin\") ||\n      location.pathname.startsWith(\"/login\") ||\n      location.pathname.startsWith(\"/register\") ||\n      location.pathname.startsWith(\"/passwordRecovery\")\n    ) {\n      setShowSearchbar(false);\n    } else {\n      setShowSearchbar(true);\n    }\n    if (location.pathname === \"/\") {\n      setStyle({ boxShadow: \"none\" });\n    } else {\n      setStyle({ boxShadow: \"0 5px 5px rgba(0,0,0,0.05)\" });\n    }\n  }, [location, showSearchbar]);\n  function toggleSidebar() {\n    sidebarSize === \"full\" ? setSidebarSize(\"mini\") : setSidebarSize(\"full\");\n  }\n  return (\n    <div style={style} className={`navbar ${!showSearchbar ? \"mini\" : \"\"}`}>\n      <Route\n        path=\"/admin\"\n        render={() => (\n          <div className=\"sidebarToggleBtn\">\n            <ion-icon onClick={toggleSidebar} name=\"menu-outline\"></ion-icon>\n          </div>\n        )}\n      />\n      <Route\n        path=\"/jamia\"\n        render={() => (\n          <div className=\"sidebarToggleBtn\">\n            <ion-icon onClick={toggleSidebar} name=\"menu-outline\"></ion-icon>\n          </div>\n        )}\n      />\n      <Route path=\"/:other\">\n        <Link className=\"navLogo\" to=\"/\">\n          <img src={logo} alt=\"Fatwa Archive logo\" />\n        </Link>\n        {showSearchbar && <Searchbar key=\"navSearch\" />}\n      </Route>\n      <nav>\n        <ul>\n          {user ? (\n            <Avatar />\n          ) : (\n            <>\n              {!(history.location.pathname === \"/login\") && (\n                <li>\n                  <Link to=\"/login\">\n                    <FormattedMessage id=\"login\" defaultMessage=\"Login\" />\n                  </Link>\n                </li>\n              )}\n              {!(history.location.pathname === \"/register\") && (\n                <li>\n                  <Link to=\"/register\">\n                    <FormattedMessage id=\"register\" defaultMessage=\"Register\" />\n                  </Link>\n                </li>\n              )}\n            </>\n          )}\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Nav;\n","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Footer.js",["92","93"],"import React, { useContext } from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport \"./CSS/Footer.min.css\";\nimport { SiteContext } from \"../Context\";\nimport { Link } from \"react-router-dom\";\n\nfunction Footer() {\n  const { user, locale, setLocale } = useContext(SiteContext);\n  return (\n    <div className=\"footer\">\n      <ul className=\"links\">\n        <li>\n          <Link to=\"/about\">\n            <FormattedMessage id=\"about\" defaultMessage=\"About\" />\n          </Link>\n        </li>\n        <li>\n          <Link to=\"/askQuestion\">\n            <FormattedMessage id=\"askFatwa\" defaultMessage=\"Ask Fatwa\" />\n          </Link>\n        </li>\n        {user === null && (\n          <li>\n            <Link to=\"/admin\">\n              <FormattedMessage id=\"admin\" defaultMessage=\"Admin\" />\n            </Link>\n          </li>\n        )}\n        <li\n          onClick={() => {\n            locale === \"bn-BD\" ? setLocale(\"en-US\") : setLocale(\"bn-BD\");\n          }}\n        >\n          {locale === \"en-US\" ? <a>বাং</a> : <a>EN</a>}\n        </li>\n      </ul>\n      <ul>\n        <li className=\"copy\">&copy; Fatwa Archive</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default Footer;\n\n// <li>\n// <Link to=\"/desclaimer\">Desclaimer</Link>\n// </li>\n// <li>\n// <Link to=\"/contact\">Contact</Link>\n// </li>\n// <li>\n// <Link to=\"/table_of_content\">Table of content</Link>\n// </li>\n//\n","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\About.js",[],"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\SearchResult.js",["94","95","96","97","98"],"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\FourOFour.js",[],"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\UserSubmitions.js",[],"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\JamiaProfile.js",["99","100","101"],"import React, { useState, useContext, useEffect, useRef } from \"react\";\nimport { Route, Switch, Link, Redirect, useHistory } from \"react-router-dom\";\nimport { SiteContext } from \"../Context\";\nimport { Tabs, View, Sidebar, Actions, LoadingPost } from \"./TableElements\";\nimport {\n  ID,\n  Input,\n  Combobox,\n  Textarea,\n  topics,\n  SS,\n  Submit,\n} from \"./FormElements\";\nimport \"./CSS/JamiaProfile.min.css\";\nimport {\n  FormattedDate,\n  FormattedNumber,\n  FormattedTimeParts,\n  FormattedMessage,\n  injectIntl,\n} from \"react-intl\";\nimport {\n  AddFatwaForm,\n  DataEditForm,\n  PasswordEditForm,\n  UserQuestionAnswerForm,\n  UserQuestionReportForm,\n} from \"./Forms\";\nimport { Modal } from \"./Modals\";\n\nconst encodeURL = (obj) =>\n  Object.keys(obj)\n    .map((key) => `${key}=${obj[key]}`)\n    .join(\"&\");\n\nfunction Profile() {\n  const { user } = useContext(SiteContext);\n  const patchApi = `/api/source/edit`;\n  return (\n    <div className=\"view\">\n      <h1>\n        <FormattedMessage id=\"jamiaProfile\" defaultMessage=\"Jamia Profile\" />\n      </h1>\n      <ul id=\"profileInfo\">\n        <li className=\"label\">\n          <FormattedMessage id=\"joined\" defaultMessage=\"Joined\" />\n        </li>\n        <li className=\"data\">\n          <FormattedDate\n            value={user.joined}\n            day=\"numeric\"\n            month=\"numeric\"\n            year=\"2-digit\"\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"fatwa\" defaultMessage=\"Fatwa\" />\n        </li>\n        <li className=\"data\">\n          <FormattedNumber value={user.fatwa} />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"id\" defaultMessage=\"ID\" />\n        </li>\n        <li className=\"data\">{user.id}</li>\n        <li className=\"label\">\n          <FormattedMessage id=\"password\" defaultMessage=\"Password\" />\n        </li>\n        <li className=\"data\">\n          <PasswordEditForm api={patchApi} />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"nameBn\" defaultMessage=\"Name (Bangla)\" />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            api={patchApi}\n            defaultValue={user.name[\"bn-BD\"]}\n            Element={Input}\n            pattern={/^[ঀ-৾\\s(),]+$/}\n            fieldCode=\"name.bn-BD\"\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"nameEn\" defaultMessage=\"Name (English)\" />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            api={patchApi}\n            defaultValue={user.name[\"en-US\"]}\n            Element={Input}\n            pattern={/^[a-zA-Z\\s(),]+$/}\n            fieldCode=\"name.en-US\"\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage\n            id=\"primeMuftiBn\"\n            defaultMessage=\"Prime Mufti (Bangla)\"\n          />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            defaultValue={user.primeMufti[\"bn-BD\"]}\n            Element={Input}\n            max={200}\n            fieldCode=\"primeMufti.bn-BD\"\n            api={patchApi}\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage\n            id=\"primeMuftiEn\"\n            defaultMessage=\"Prime Mufti (English)\"\n          />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            defaultValue={user.primeMufti[\"en-US\"]}\n            Element={Input}\n            max={200}\n            fieldCode=\"primeMufti.en-US\"\n            api={patchApi}\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"founder\" defaultMessage=\"Founder\" />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            defaultValue={user.founder}\n            Element={Textarea}\n            max={200}\n            fieldCode=\"founder\"\n            api={patchApi}\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"add\" defaultMessage=\"Address\" />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            defaultValue={user.address}\n            Element={Textarea}\n            fieldCode=\"add\"\n            api={patchApi}\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"contact\" defaultMessage=\"Contact\" />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            defaultValue={user.contact}\n            Element={Input}\n            pattern={/^\\+8801\\d{0,9}$/}\n            tel={true}\n            fieldCode=\"contact\"\n            api={patchApi}\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"about\" defaultMessage=\"About\" />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            defaultValue={user.about}\n            Element={Textarea}\n            pattern={/^[ঀ-ৣৰ-৾a-zA-Z\\s(),-]+$/}\n            fieldCode=\"about\"\n            api={patchApi}\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"applName\" defaultMessage=\"Applicant's Name\" />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            defaultValue={user.appl.name}\n            Element={Input}\n            pattern={/^[ঀ-ৣৰ-৾a-zA-Z\\s(),-]+$/}\n            fieldCode=\"appl.name\"\n            api={patchApi}\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage\n            id=\"applDes\"\n            defaultMessage=\"Applicant's Designation\"\n          />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            defaultValue={user.appl.des}\n            Element={Input}\n            pattern={/^[ঀ-ৣৰ-৾a-zA-Z\\s(),-]+$/}\n            fieldCode=\"appl.des\"\n            api={patchApi}\n          />\n        </li>\n        <li className=\"label\">\n          <FormattedMessage id=\"applMob\" defaultMessage=\"Applicant's Moblie\" />\n        </li>\n        <li className=\"data\">\n          <DataEditForm\n            defaultValue={user.appl.mob}\n            Element={Input}\n            pattern={/^\\+8801\\d{0,9}$/}\n            tel={true}\n            fieldCode=\"appl.mob\"\n            api={patchApi}\n          />\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nconst JamiaAllFatwa = injectIntl(({ intl }) => {\n  const { locale } = useContext(SiteContext);\n  return (\n    <div className=\"view\">\n      <h1 className=\"viewTitle\">\n        <FormattedMessage id=\"fatwa\" defaultMessage=\"Fatwa\" />\n      </h1>\n      <Tabs\n        page=\"/jamia/fatwa/\"\n        tabs={[\n          {\n            label: <FormattedMessage id=\"live\" defaultMessage=\"Live\" />,\n            link: \"live\",\n          },\n          {\n            label: <FormattedMessage id=\"pending\" defaultMessage=\"pending\" />,\n            link: \"pending\",\n          },\n        ]}\n      />\n      <Switch>\n        <Route path=\"/jamia/fatwa\" exact>\n          <View\n            key=\"jamiaAllFatwa\"\n            Element={SingleFatwa}\n            id=\"allFatwa\"\n            api=\"api/source/allFatwa/filter?\"\n            categories={[\n              {\n                default: true,\n                fieldName: \"title\",\n                name: intl.formatMessage({\n                  id: \"title\",\n                  defaultMessage: \"Title\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"titleChip\",\n                  defaultMessage: \"Title contains:\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"titleChip\"\n                      defaultMessage=\"Title contains:\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"topic\",\n                name: intl.formatMessage({\n                  id: \"topic\",\n                  defaultMessage: \"Topic\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"topicChip\",\n                  defaultMessage: \"Topic is\",\n                }),\n                input: (\n                  <Combobox\n                    id={ID(8)}\n                    maxHeight={300}\n                    label=<FormattedMessage\n                      id=\"topicChip\"\n                      defaultMessage=\"topic is\"\n                    />\n                    options={topics.map((option) => {\n                      return {\n                        label: option[locale],\n                        value: option,\n                      };\n                    })}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ques\",\n                name: intl.formatMessage({\n                  id: \"question\",\n                  defaultMessage: \"Question\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"quesChip\",\n                  defaultMessage: \"Question contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"quesChip\"\n                      defaultMessage=\"Question contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ans\",\n                name: intl.formatMessage({\n                  id: \"answer\",\n                  defaultMessage: \"Answer\",\n                }),\n                display: intl.formatMessage({\n                  id: \"ansChip\",\n                  defaultMessage: \"Answer contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"ansChip\"\n                      defaultMessage=\"Answer contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"translation\",\n                name: intl.formatMessage({\n                  id: \"translation\",\n                  defaultMessage: \"Translation\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"translationChip\",\n                  defaultMessage: \"Translation:\",\n                }),\n                input: (\n                  <Combobox\n                    maxHeight={500}\n                    label=<FormattedMessage\n                      id=\"translation\"\n                      defaultMessage=\"Translation:\"\n                    />\n                    options={[\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationAuto\",\n                          defaultMessage: \"Auto\",\n                        }),\n                        value: \"generated\",\n                      },\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationManual\",\n                          defaultMessage: \"Manual\",\n                        }),\n                        value: \"manual\",\n                      },\n                    ]}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              {\n                column: <FormattedMessage id=\"topic\" defaultMessage=\"Topic\" />,\n                sort: true,\n                colCode: \"topic\",\n              },\n              {\n                column: <FormattedMessage id=\"date\" defaultMessage=\"Date\" />,\n                sort: true,\n                colCode: \"createdAt\",\n              },\n              {\n                column: <FormattedMessage id=\"title\" defaultMessage=\"Title\" />,\n                sort: false,\n                colCode: \"title\",\n              },\n              {\n                column: (\n                  <FormattedMessage\n                    id=\"translation\"\n                    defaultMessage=\"Translation\"\n                  />\n                ),\n                sort: true,\n                colCode: \"translation\",\n              },\n            ]}\n            defaultSort={{ column: \"createdAt\", order: \"des\" }}\n          />\n        </Route>\n        <Route path=\"/jamia/fatwa/live\">\n          <View\n            key=\"jamiaAllFatwa\"\n            Element={SingleFatwa}\n            id=\"allFatwa\"\n            api=\"api/source/allFatwa/filter?\"\n            categories={[\n              {\n                default: true,\n                fieldName: \"title\",\n                name: intl.formatMessage({\n                  id: \"title\",\n                  defaultMessage: \"Title\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"titleChip\",\n                  defaultMessage: \"Title contains:\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"titleChip\"\n                      defaultMessage=\"Title contains:\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"topic\",\n                name: intl.formatMessage({\n                  id: \"topic\",\n                  defaultMessage: \"Topic\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"topicChip\",\n                  defaultMessage: \"Topic is\",\n                }),\n                input: (\n                  <Combobox\n                    id={ID(8)}\n                    maxHeight={300}\n                    label=<FormattedMessage\n                      id=\"topicChip\"\n                      defaultMessage=\"topic is\"\n                    />\n                    options={topics.map((option) => {\n                      return {\n                        label: option[locale],\n                        value: option,\n                      };\n                    })}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ques\",\n                name: intl.formatMessage({\n                  id: \"question\",\n                  defaultMessage: \"Question\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"quesChip\",\n                  defaultMessage: \"Question contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"quesChip\"\n                      defaultMessage=\"Question contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ans\",\n                name: intl.formatMessage({\n                  id: \"answer\",\n                  defaultMessage: \"Answer\",\n                }),\n                display: intl.formatMessage({\n                  id: \"ansChip\",\n                  defaultMessage: \"Answer contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"ansChip\"\n                      defaultMessage=\"Answer contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"translation\",\n                name: intl.formatMessage({\n                  id: \"translation\",\n                  defaultMessage: \"Translation\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"translationChip\",\n                  defaultMessage: \"Translation:\",\n                }),\n                input: (\n                  <Combobox\n                    maxHeight={500}\n                    label=<FormattedMessage\n                      id=\"translation\"\n                      defaultMessage=\"Translation:\"\n                    />\n                    options={[\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationAuto\",\n                          defaultMessage: \"Auto\",\n                        }),\n                        value: \"generated\",\n                      },\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationManual\",\n                          defaultMessage: \"Manual\",\n                        }),\n                        value: \"manual\",\n                      },\n                    ]}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              {\n                column: <FormattedMessage id=\"topic\" defaultMessage=\"Topic\" />,\n                sort: true,\n                colCode: \"topic\",\n              },\n              {\n                column: <FormattedMessage id=\"date\" defaultMessage=\"Date\" />,\n                sort: true,\n                colCode: \"createdAt\",\n              },\n              {\n                column: <FormattedMessage id=\"title\" defaultMessage=\"Title\" />,\n                sort: false,\n                colCode: \"title\",\n              },\n              {\n                column: (\n                  <FormattedMessage\n                    id=\"translation\"\n                    defaultMessage=\"Translation\"\n                  />\n                ),\n                sort: true,\n                colCode: \"translation\",\n              },\n            ]}\n            defaultSort={{ column: \"createdAt\", order: \"des\" }}\n          />\n        </Route>\n        <Route path=\"/jamia/fatwa/pending\">\n          <View\n            key=\"jamiaAllFatwaSubmission\"\n            Element={JamiaSingleFatwaSubmission}\n            id=\"fatwaSubmissions\"\n            api=\"api/source/fatwaSubmissions/filter?\"\n            categories={[\n              {\n                default: true,\n                fieldName: \"title\",\n                name: intl.formatMessage({\n                  id: \"title\",\n                  defaultMessage: \"Title\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"titleChip\",\n                  defaultMessage: \"Title contains:\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"titleChip\"\n                      defaultMessage=\"Title contains:\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"topic\",\n                name: intl.formatMessage({\n                  id: \"topic\",\n                  defaultMessage: \"Topic\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"topicChip\",\n                  defaultMessage: \"Topic is\",\n                }),\n                input: (\n                  <Combobox\n                    id={ID(8)}\n                    maxHeight={300}\n                    label=<FormattedMessage\n                      id=\"topicChip\"\n                      defaultMessage=\"topic is\"\n                    />\n                    options={topics.map((option) => {\n                      return {\n                        label: option[locale],\n                        value: option,\n                      };\n                    })}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ques\",\n                name: intl.formatMessage({\n                  id: \"question\",\n                  defaultMessage: \"Question\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"quesChip\",\n                  defaultMessage: \"Question contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"quesChip\"\n                      defaultMessage=\"Question contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ans\",\n                name: intl.formatMessage({\n                  id: \"answer\",\n                  defaultMessage: \"Answer\",\n                }),\n                display: intl.formatMessage({\n                  id: \"ansChip\",\n                  defaultMessage: \"Answer contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"ansChip\"\n                      defaultMessage=\"Answer contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              {\n                column: <FormattedMessage id=\"date\" defaultMessage=\"Date\" />,\n                sort: true,\n                colCode: \"createdAt\",\n              },\n              {\n                column: <FormattedMessage id=\"topic\" defaultMessage=\"Topic\" />,\n                sort: true,\n                colCode: \"topic\",\n              },\n              {\n                column: <FormattedMessage id=\"title\" defaultMessage=\"title\" />,\n                sort: false,\n              },\n            ]}\n            defaultSort={{ column: \"createdAt\", order: \"des\" }}\n          />\n        </Route>\n      </Switch>\n    </div>\n  );\n});\nfunction JamiaSingleFatwaSubmission({ data, setData }) {\n  const { locale, setFatwaToEdit } = useContext(SiteContext);\n  const [open, setOpen] = useState(false);\n  const fatwa = data;\n  const history = useHistory();\n  function edit() {\n    setFatwaToEdit(fatwa);\n    history.push(\"/jamia/editFatwa/\" + fatwa._id);\n  }\n  function removeSubmission() {\n    fetch(`/api/fatwaSubmissions/${fatwa._id}`, {\n      method: \"DELETE\",\n    })\n      .then((res) => {\n        if (res.status === 200) {\n          setData((prev) => {\n            return prev.filter((item) => item._id !== fatwa._id);\n          });\n        } else {\n          alert(\"something went wrong\");\n        }\n      })\n      .catch((err) => {\n        alert(\"something went wrong\");\n        console.log(err);\n      });\n  }\n  return open ? (\n    <tr data-id={fatwa._id} className=\"full\">\n      <td className=\"label\">Submitted</td>\n      <td className=\"data\">\n        <FormattedDate\n          value={fatwa.submitted}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td className=\"label\">topic</td>\n      <td className=\"data\">{fatwa.topic[locale]}</td>\n      <td className=\"label\">title (Bangla)</td>\n      <td className=\"data\">{fatwa.title[\"bn-BD\"]}</td>\n      {fatwa.title[\"en-US\"] && (\n        <>\n          <td className=\"label\">title (English)</td>\n          <td className=\"data\">{fatwa.title[\"en-US\"]}</td>\n        </>\n      )}\n      <td className=\"label\">question (Bangla)</td>\n      <td className=\"data\">{fatwa.ques[\"bn-BD\"]}</td>\n      {fatwa.ques[\"en-US\"] && (\n        <>\n          <td className=\"label\">question (English)</td>\n          <td className=\"data\">{fatwa.ques[\"en-US\"]}</td>\n        </>\n      )}\n      <td className=\"label\">answer (Bangla)</td>\n      <td className=\"data\">{fatwa.ans[\"bn-BD\"]}</td>\n      {fatwa.ans[\"en-US\"] && (\n        <>\n          <td className=\"label\">answer (English)</td>\n          <td className=\"data\">{fatwa.ans[\"en-US\"]}</td>\n        </>\n      )}\n      <td className=\"label\">Ref.</td>\n      <td className=\"data\">\n        <ul>\n          {fatwa.ref.map((item, i) =>\n            item.book ? (\n              <li key={item.book + item.part + item.page}>\n                <FormattedMessage id=\"book\" />: {item.book},{\" \"}\n                <FormattedMessage id=\"part\" />: {item.part},{\" \"}\n                <FormattedMessage id=\"page\" />: {item.page}\n              </li>\n            ) : (\n              <li key={item.sura + item.aayat}>\n                <FormattedMessage id=\"sura\" />: {item.sura},{\" \"}\n                <FormattedMessage id=\"aayat\" />: {item.aayat}\n              </li>\n            )\n          )}\n        </ul>\n      </td>\n      <td className=\"data btns\">\n        <button onClick={() => setOpen(false)}>\n          <ion-icon name=\"chevron-up-outline\"></ion-icon> Hide Detail\n        </button>\n        <button onClick={edit}>\n          <ion-icon name=\"pencil-outline\"></ion-icon> Edit\n        </button>\n        <button onClick={removeSubmission}>\n          <ion-icon name=\"trash-outline\"></ion-icon> Remove\n        </button>\n      </td>\n    </tr>\n  ) : (\n    <tr data-id={fatwa._id} onClick={() => setOpen(true)}>\n      <td>\n        <FormattedDate\n          value={fatwa.submitted}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td>{fatwa.topic[locale]}</td>\n      <td>{fatwa.title[locale]}</td>\n    </tr>\n  );\n}\nfunction SingleFatwa({ data, setData }) {\n  const { locale, setFatwaToEdit } = useContext(SiteContext);\n  const [loading, setLoading] = useState(false);\n  const fatwa = data;\n  const history = useHistory();\n  const [open, setOpen] = useState(false);\n  function edit() {\n    setFatwaToEdit(fatwa);\n    history.push(\"/jamia/editFatwa/\" + fatwa._id);\n  }\n  function deleteFatwa() {\n    if (window.confirm(\"Do you want to delete this fatwa?\")) {\n      setLoading(true);\n      fetch(`/api/source/fatwa/`, {\n        method: \"DELETE\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ fatwa: fatwa._id, source: fatwa.source }),\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setLoading(false);\n          if (data.code === \"ok\") {\n            setData((prev) => {\n              return prev.filter((item) => item._id !== fatwa._id);\n            });\n          } else {\n            alert(\"something went wrong.\");\n          }\n        })\n        .catch((err) => {\n          alert(\"something went wrong.\");\n          console.log(err);\n        });\n    }\n  }\n  return open ? (\n    <tr className=\"full\">\n      <td className=\"label\">Added</td>\n      <td className=\"data\">\n        <FormattedDate\n          value={fatwa.added}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td className=\"label\">title</td>\n      <td className=\"data\">\n        <Link target=\"_blank\" to={`/fatwa/${fatwa.link[locale]}`}>\n          {fatwa.title[locale]}\n          <ion-icon name=\"open-outline\"></ion-icon>\n        </Link>\n      </td>\n      <td className=\"label\">translate</td>\n      <td className=\"data\">{fatwa.translation ? \"Yes\" : \"No\"}</td>\n      <td className=\"data btns\">\n        <button onClick={() => setOpen(false)}>\n          <ion-icon name=\"chevron-up-outline\"></ion-icon> Hide Detail\n        </button>\n        <button onClick={edit}>\n          <ion-icon name=\"pencil-outline\"></ion-icon> Edit\n        </button>\n        <Submit\n          label={\n            <>\n              <ion-icon name=\"trash-outline\"></ion-icon> Delete Fatwa\n            </>\n          }\n          loading={loading}\n          setLoading={setLoading}\n          onClick={deleteFatwa}\n        />\n      </td>\n    </tr>\n  ) : (\n    <tr data-id={fatwa._id} onClick={() => setOpen(true)}>\n      <td>{fatwa.topic[locale]}</td>\n      <td>\n        <FormattedDate\n          value={fatwa.createdAt}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td>{fatwa.title[locale]}</td>\n      <td>{fatwa.translation ? \"Yes\" : \"No\"}</td>\n    </tr>\n  );\n}\n\nfunction UserSubmissions() {\n  return (\n    <div className=\"view\">\n      <h1 className=\"viewTitle\">\n        <FormattedMessage id=\"review\" defaultMessage=\"Review\" />\n      </h1>\n      <Tabs\n        page=\"/jamia/userSubmissions/\"\n        tabs={[\n          { label: \"Reviews\", link: \"reviews\" },\n          { label: \"Reports\", link: \"reports\" },\n        ]}\n      />\n      <Switch></Switch>\n    </div>\n  );\n}\n\nfunction QuestionFeed() {\n  return (\n    <div className=\"view questionFeed\">\n      <h1 className=\"viewTitle\">\n        <FormattedMessage id=\"questionFeed\" defaultMessage=\"Question Feed\" />\n      </h1>\n      <Tabs\n        page=\"/jamia/questionFeed/\"\n        tabs={[\n          {\n            label: (\n              <FormattedMessage\n                id=\"newQuestions\"\n                defaultMessage=\"New Questions\"\n              />\n            ),\n            link: \"newQuestions\",\n          },\n        ]}\n      />\n      <Switch>\n        <Route path=\"/jamia/questionFeed\" exact>\n          <NewQuestions />\n        </Route>\n        <Route path=\"/jamia/questionFeed/newQuestions\">\n          <NewQuestions />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\nconst NewQuestions = injectIntl(({ intl }) => {\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n  const { locale } = useContext(SiteContext);\n  const [loading, setLoading] = useState(true);\n  const [sort, setSort] = useState({ column: \"createdAt\", order: \"asc\" });\n  const [data, setData] = useState([]);\n  function fetchData() {\n    setLoading(true);\n    const sortOrder = encodeURL(sort);\n    const options = { headers: { \"Accept-Language\": locale }, signal: signal };\n    const url = `/api/source/questionFeed/filter?&${sortOrder}`;\n    fetch(url, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        setData(data);\n      })\n      .catch((err) => {\n        console.log(err);\n        console.log(\"handle error!!\");\n      });\n    return () => abortController.abort();\n  }\n  useEffect(fetchData, [sort]);\n  return (\n    <>\n      <div className=\"filters\">\n        <Combobox\n          disabled={loading}\n          defaultValue={1}\n          onChange={(option) => setSort(option.value)}\n          maxHeight={200}\n          id=\"questionFeedSort\"\n          icon=\"layers\"\n          options={[\n            {\n              label: intl.formatMessage({ id: \"newFirts\" }),\n              value: { column: \"createdAt\", order: \"des\" },\n            },\n            {\n              label: intl.formatMessage({ id: \"oldFirst\" }),\n              value: { column: \"createdAt\", order: \"asc\" },\n            },\n          ]}\n        />\n      </div>\n      <ul className=\"feed\">\n        {!loading ? (\n          data.map((item) => <SingleQuestion key={item._id} data={item} />)\n        ) : (\n          <LoadingPost />\n        )}\n      </ul>\n    </>\n  );\n});\nfunction SingleQuestion({ data }) {\n  const { locale, user } = useContext(SiteContext);\n  const history = useHistory();\n  const container = useRef(null);\n  return (\n    <li\n      ref={container}\n      className={`question mini`}\n      onClick={(e) => {\n        if (e.target === container.current) {\n          history.push(\"/jamia/userQuestion/\" + data._id);\n        }\n      }}\n    >\n      <div className=\"user\">\n        <p className=\"name\">{data.user.name}</p>\n        <p className=\"date\">\n          {new Date(data.createdAt).getFullYear() !==\n          new Date().getFullYear() ? (\n            <FormattedDate\n              value={data.createdAt}\n              day=\"numeric\"\n              month=\"long\"\n              year=\"2-digit\"\n            />\n          ) : (\n            <FormattedDate value={data.createdAt} day=\"numeric\" month=\"long\" />\n          )}\n          <span className=\"separator\" />\n          <FormattedTimeParts value={data.createdAt}>\n            {(parts) => (\n              <>\n                {parts[0].value}\n                {parts[1].value}\n                {parts[2].value}\n                <small>{parts[4].value.toLowerCase()}</small>\n              </>\n            )}\n          </FormattedTimeParts>\n        </p>\n      </div>\n      <Actions\n        icon=\"reorder-two-outline\"\n        actions={[\n          {\n            label: \"Answer now\",\n            action: () => {\n              SS.set(\"userAns-ques\", data.ques.body);\n              SS.set(\"userAns-topic\", JSON.stringify(data.ques.topic));\n              history.push(`/jamia/userQuestion/${data._id}/add`);\n            },\n          },\n          {\n            label: \"Report\",\n            action: () => {\n              history.push(`/jamia/userQuestion/${data._id}/report`);\n            },\n          },\n        ]}\n      />\n      <p className=\"ques\">{data.ques.body}</p>\n      <ul className=\"tags\">\n        <li className=\"tag\">{data.ques.topic[locale]}</li>\n        <li className=\"tag\">\n          <FormattedMessage\n            values={{ number: <FormattedNumber value={data.ans.length} /> }}\n            id=\"ans.tag.ansCount\"\n            defaultMessage={`${data.ans.length} Answer(s)`}\n          />\n        </li>\n        {data.ans.filter((ans) => ans.source === user._id).length > 0 && (\n          <li className=\"tag\">\n            <FormattedMessage\n              id=\"ans.tag.iAnswered\"\n              defaultMessage=\"I answered\"\n            />\n          </li>\n        )}\n      </ul>\n    </li>\n  );\n}\n\nfunction UserQuestion({ history, match }) {\n  const { user } = useContext(SiteContext);\n  const [loading, setLoading] = useState(true);\n  const [userQues, setUserQues] = useState({});\n  const [answered, setAnswered] = useState(false);\n  useEffect(getData, []);\n  function getData() {\n    fetch(\"/api/source/userQues/\" + match.params._id)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setUserQues(data.content);\n          if (\n            data.content.ans.filter((item) => item.source._id === user._id)\n              .length > 0\n          ) {\n            setAnswered(true);\n          }\n        } else {\n          throw data;\n        }\n      })\n      .catch((err) => {\n        alert(\"something went wrong\");\n        console.log(err);\n      });\n  }\n  if (userQues.ques) {\n    return (\n      <div className=\"view userQues\">\n        <div className=\"container\">\n          <div className=\"ques\">\n            <div className=\"user\">\n              <p className=\"name\">\n                <b>{userQues.user.name}</b>\n                <span className=\"separator\" />\n                <i>\n                  <span className=\"add\">{userQues.user.add}</span>\n                </i>\n              </p>\n              <p className=\"date\">\n                <FormattedDate\n                  value={userQues.createdAt}\n                  day=\"numeric\"\n                  month=\"long\"\n                  year=\"2-digit\"\n                />\n                <span className=\"separator\" />\n                <FormattedTimeParts value={userQues.createdAt}>\n                  {(parts) => (\n                    <>\n                      {parts[0].value}\n                      {parts[1].value}\n                      {parts[2].value}\n                      <small>{parts[4].value.toLowerCase()}</small>\n                    </>\n                  )}\n                </FormattedTimeParts>\n              </p>\n            </div>\n            <p className=\"body\">{userQues.ques.body}</p>\n          </div>\n          {!answered ? (\n            <Link className=\"addAns\" to={`${match.url}/add`}>\n              Add Answer\n            </Link>\n          ) : (\n            <div className=\"HR\">\n              <span className=\"hr\" />\n              <span className=\"content\">নিবেদিত উত্তর সমূহ</span>\n              <span className=\"hr\" />\n            </div>\n          )}\n          {userQues.ans.map((item) => (\n            <Answer\n              key={item._id}\n              ques={userQues}\n              ans={item}\n              setQues={setUserQues}\n            />\n          ))}\n          <Route path={`${match.url}/add`}>\n            <Modal\n              open={true}\n              setOpen={() => history.push(match.url)}\n              className=\"answerForm\"\n            >\n              <UserQuestionAnswerForm\n                setQues={setUserQues}\n                ques={userQues.ques}\n                _id={userQues._id}\n              />\n            </Modal>\n          </Route>\n          <Route path={`${match.url}/report`}>\n            <Modal\n              open={true}\n              setOpen={() => history.push(match.url)}\n              className=\"answerForm\"\n            >\n              <UserQuestionReportForm _id={userQues._id} />\n            </Modal>\n          </Route>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"view\">\n      {loading ? <h1>loading</h1> : <p>Question did not found!</p>}\n    </div>\n  );\n}\nfunction Answer({ ques, ans, setQues }) {\n  const { locale, user } = useContext(SiteContext);\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [voted, setVoted] = useState(() => {\n    let vote =\n      ans.vote.voters.some(\n        (voter) => voter.source === user._id && voter.vote\n      ) || false;\n    return vote;\n  });\n  useEffect(() => {\n    setVoted(\n      ans.vote.voters.some(\n        (voter) => voter.source === user._id && voter.vote\n      ) || false\n    );\n  }, [ans, user._id]);\n  const history = useHistory();\n  function vote(e) {\n    setLoading(true);\n    const options = {\n      method: \"PUT\",\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify({\n        voter: user._id,\n        ans_id: ans._id,\n        vote: e.target.getAttribute(\"name\").includes(\"up\") ? \"up\" : \"down\",\n      }),\n    };\n    fetch(`/api/source/userQues/vote/${ques._id}`, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setQues(data.content);\n        } else {\n          throw data.code;\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        alert(\"something went wrong\");\n      });\n  }\n  function edit() {\n    SS.set(\"ansFatwa-ans\", ans.body);\n    SS.set(\"ansFatwa-title\", ans.title);\n    SS.set(\"ansFatwa-ref\", JSON.stringify(ans.ref));\n    SS.set(\"ansFatwa-date\", ans.meta.date);\n    SS.set(\"ansFatwa-write\", ans.meta.write);\n    SS.set(\"ansFatwa-atts\", ans.meta.atts);\n    history.push(history.location.pathname + \"/add\");\n  }\n  function report() {\n    console.log(\"report here\");\n  }\n  function remove() {\n    const options = {\n      method: \"DELETE\",\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify({ source: ans.source._id, _id: ans._id }),\n    };\n    setLoading(true);\n    fetch(`/api/source/userQues/answer/${ques._id}`, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setQues(data.content);\n        } else {\n          throw data.code;\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        alert(\"something went wrong\");\n      });\n  }\n  return (\n    <div\n      className={`ans ${ans.source._id === user._id ? \"mine\" : \"\"} ${\n        !open ? \"mini\" : \"\"\n      }`}\n    >\n      <div className=\"vote\" disabled={loading}>\n        <div className={`content ${voted}`}>\n          <ion-icon onClick={vote} name=\"chevron-up-outline\"></ion-icon>\n          <p className=\"voteCount\">\n            <FormattedNumber value={ans.vote.count} />\n          </p>\n          <ion-icon onClick={vote} name=\"chevron-down-outline\"></ion-icon>\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"source\">\n          <p className=\"name\">\n            <b>{ans.source.name[locale]}</b>\n          </p>\n          <p className=\"date\">\n            <FormattedDate\n              value={ans.createdAt}\n              day=\"numeric\"\n              month=\"long\"\n              year=\"2-digit\"\n            />\n            <span className=\"separator\" />\n            <FormattedTimeParts value={ans.createdAt}>\n              {(parts) => (\n                <>\n                  {parts[0].value}\n                  {parts[1].value}\n                  {parts[2].value}\n                  <small>{parts[4].value.toLowerCase()}</small>\n                </>\n              )}\n            </FormattedTimeParts>\n          </p>\n        </div>\n        <div className=\"body\">\n          <p className=\"title\">\n            {ans.topic[locale]}: {ans.title}\n          </p>\n          <p className=\"answer\">{ans.body}</p>\n        </div>\n        {open && ans.ref.length > 0 && (\n          <div className=\"ref\">\n            <p>\n              <FormattedMessage id=\"ref\" value=\"Ref.\" />\n            </p>\n            <ul className=\"ref\">\n              {ans.ref.map((ref, i) =>\n                ref.book ? (\n                  <li key={i}>\n                    <span>{ref.book}</span>,{\" \"}\n                    <FormattedMessage id=\"page\" defaultMessage=\"Page\" />{\" \"}\n                    <span>\n                      <FormattedNumber value={ref.part} />\n                    </span>\n                    , <FormattedMessage id=\"part\" defaultMessage=\"Part\" />{\" \"}\n                    <span>\n                      <FormattedNumber value={ref.page} />\n                    </span>\n                  </li>\n                ) : (\n                  <li key={i}>\n                    <span>{ref.sura}</span>,{\" \"}\n                    <FormattedMessage id=\"aayat\" defaultMessage=\"Aayat\" />{\" \"}\n                    <span>\n                      <FormattedNumber value={ref.aayat} />\n                    </span>\n                  </li>\n                )\n              )}\n            </ul>\n          </div>\n        )}\n        {!open && (\n          <div className=\"tags\">\n            <p className=\"tag\">\n              <FormattedMessage\n                values={{ number: <FormattedNumber value={ans.ref.length} /> }}\n                id=\"ans.tag.refCount\"\n                defaultMessage={`${ans.ref.length} Reference(s)`}\n              />\n            </p>\n            <p className=\"tag\">\n              <FormattedMessage\n                values={{\n                  number: <FormattedNumber value={ans.vote.voters.length} />,\n                }}\n                id=\"ans.tag.voteCount\"\n                defaultMessage={`${ans.vote.voters.length} Vote(s)`}\n              />\n            </p>\n          </div>\n        )}\n        <span onClick={() => setOpen(!open)} className=\"showFull\">\n          {open ? \"পুরো উত্তর গোপন করুন\" : \"পুরো উত্তর দেখুন\"}\n        </span>\n      </div>\n      {ans.source._id === user._id ? (\n        <Actions\n          icon=\"reorder-two-outline\"\n          actions={[\n            { label: \"Edit\", action: edit },\n            { label: \"Remove\", action: remove },\n          ]}\n        />\n      ) : (\n        <Actions\n          icon=\"reorder-two-outline\"\n          actions={[{ label: \"Report\", action: report }]}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction JamiaProfile() {\n  const { user, locale } = useContext(SiteContext);\n  return (\n    <div className=\"main jamiaProfile\">\n      <Sidebar\n        views={[\n          {\n            label: (\n              <FormattedMessage id=\"newFatwa\" defaultMessage=\"New Fatwa\" />\n            ),\n            path: \"/jamia/newFatwa\",\n            icon: \"add\",\n          },\n          {\n            label: <FormattedMessage id=\"fatwa\" defaultMessage=\"Fatwa\" />,\n            path: \"/jamia/fatwa\",\n            icon: \"reader\",\n          },\n          {\n            label: (\n              <FormattedMessage\n                id=\"questionFeed\"\n                defaultMessage=\"Question Feed\"\n              />\n            ),\n            path: \"/jamia/questionFeed\",\n            icon: \"mail\",\n          },\n          {\n            label: <FormattedMessage id=\"review\" defaultMessage=\"review\" />,\n            path: \"/jamia/userSubmissions\",\n            icon: \"people\",\n          },\n        ]}\n      >\n        <div className=\"profile\">\n          <Link to=\"/jamia/profile\">\n            <h2>{user.name[locale][0]}</h2>\n          </Link>\n          <p>{user.name[locale]}</p>\n          <p className=\"add\">{user.add}</p>\n        </div>\n      </Sidebar>\n      <Switch>\n        <Route\n          path=\"/jamia/newFatwa\"\n          component={(props) => (\n            <div className=\"view\">\n              <h1>\n                <FormattedMessage\n                  id=\"addNewFatwa\"\n                  defaultMessage=\"Add new Fatwa\"\n                />\n              </h1>\n              <AddFatwaForm {...props} />\n            </div>\n          )}\n        />\n        <Route\n          path=\"/jamia/editFatwa/:id\"\n          component={(props) => (\n            <div className=\"view\">\n              <h1>\n                <FormattedMessage id=\"editFatwa\" defaultMessage=\"Edit Fatwa\" />\n              </h1>\n              <AddFatwaForm {...props} />\n            </div>\n          )}\n        />\n        <Route path=\"/jamia/questionFeed\" component={QuestionFeed} />\n        <Route path=\"/jamia/userQuestion/:_id\" component={UserQuestion} />\n        <Route path=\"/jamia\" exact component={JamiaAllFatwa} />\n        <Route path=\"/jamia/fatwa\" component={JamiaAllFatwa} />\n        <Route path=\"/jamia/profile\" component={Profile} />\n        <Route path=\"/jamia/userSubmissions\" component={UserSubmissions} />\n        <Route path=\"/\">\n          <div className=\"view\">\n            <h3>404</h3>\n            <p>broken link</p>\n          </div>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default JamiaProfile;\n","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Forms.js",["102","103","104","105","106","107","108","109","110"],"import React, { useState, useContext, useEffect, useRef } from \"react\";\nimport { Link, useHistory, Redirect } from \"react-router-dom\";\nimport { SiteContext } from \"../Context\";\nimport \"./CSS/JamiaForms.min.css\";\nimport {\n  Input,\n  DateInput,\n  Textarea,\n  Checkbox,\n  GetGroupData,\n  Combobox,\n  MultipleInput,\n  topics,\n  PasswordInput,\n  Mobile,\n  Submit,\n  $,\n  SS,\n  emptyFieldWarning,\n} from \"./FormElements\";\nimport { FormattedMessage, FormattedNumber } from \"react-intl\";\n\nconst refInputBook = [\n  [\n    {\n      id: \"book\",\n      type: \"text\",\n      label: <FormattedMessage id=\"book\" defaultMessage=\"Book\" />,\n      clone: true,\n    },\n    {\n      id: \"part\",\n      type: \"number\",\n      label: <FormattedMessage id=\"part\" defaultMessage=\"Part\" />,\n    },\n    {\n      id: \"page\",\n      type: \"number\",\n      label: <FormattedMessage id=\"page\" defaultMessage=\"Page\" />,\n    },\n  ],\n];\nconst refInputSura = [\n  [\n    {\n      id: \"sura\",\n      type: \"text\",\n      label: <FormattedMessage id=\"sura\" defaultMessage=\"Sura\" />,\n      clone: true,\n    },\n    {\n      id: \"aayat\",\n      type: \"number\",\n      label: <FormattedMessage id=\"aayat\" defaultMessage=\"Aayat\" />,\n    },\n  ],\n];\n\nfunction JamiaDetail() {\n  return (\n    <>\n      <Input\n        defaultValue={SS.get(\"reg-name\")}\n        onChange={(target) => SS.set(\"reg-name\", target.value)}\n        dataId=\"name\"\n        strict={/^[ঀ-৾a-zA-Z\\s(),]+$/}\n        pattern=\".{10,}\"\n        validationMessage=<FormattedMessage\n          id=\"form.jamiaReg.nameValidation\"\n          defaultMessage=\"Enter a name\"\n        />\n        required={true}\n        label=<FormattedMessage\n          id=\"form.jamiaReg.name\"\n          defaultMessage=\"Jamia's Name (Bangla)\"\n        />\n      />\n      <Textarea\n        defaultValue={SS.get(\"reg-add\")}\n        onChange={(target) => SS.set(\"reg-add\", target.value)}\n        dataId=\"add\"\n        strict={/^[ঀ-৾a-zA-Z\\s(),]+$/}\n        min={10}\n        warning=\"বাংলা বা ইংরেজি অক্ষর প্রবেশ করুন\"\n        validationMessage=<FormattedMessage\n          id=\"form.jamiaReg.addValidation\"\n          defaultMessage=\"Enter an address\"\n        />\n        required={true}\n        label=<FormattedMessage id=\"add\" defaultMessage=\"Address\" />\n        max={200}\n      />\n      <Mobile\n        defaultValue={SS.get(\"reg-contact\")}\n        onChange={(target) => SS.set(\"reg-contact\", target.value)}\n        required={true}\n        dataId=\"contact\"\n        validationMessage=<FormattedMessage\n          id=\"form.jamiaReg.contactValidation\"\n          defaultMessage=\"Enter contact detail\"\n        />\n        label=<FormattedMessage id=\"mobile\" defaultMessage=\"Mobile\" />\n      />\n      <Input\n        defaultValue={SS.get(\"reg-primeMufti\")}\n        onChange={(target) => SS.set(\"reg-primeMufti\", target.value)}\n        pattern=\".{5,}\"\n        strict={/^[ঀ-৾a-zA-Z\\s(),]+$/}\n        validationMessage=<FormattedMessage\n          id=\"form.jamiaReg.primeMuftiValidation\"\n          defaultMessage=\"Enter Prime mufti's name\"\n        />\n        dataId=\"primeMufti\"\n        required={true}\n        label=<FormattedMessage id=\"primeMufti\" defaultMessage=\"Prime Mufti\" />\n      />\n    </>\n  );\n}\nfunction LoginDetail({\n  idIsValid,\n  setValidatingId,\n  validatingId,\n  setIdIsValid,\n}) {\n  const [pattern, setPattern] = useState(\"[a-zA-Z0-9]{8,20}\");\n  const [idValidationMessage, setIdValidationMessage] = useState(\n    <FormattedMessage id=\"idValidation\" defaultMessage=\"Enter an ID\" />\n  );\n  const [pass, setPass] = useState(\"\");\n  const [confirmPass, setConfirmPass] = useState(\"\");\n  const [passMatch, setPassMatch] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const validateId = () => {\n    if (SS.get(\"reg-id\").length >= 8 && idIsValid === null) {\n      setValidatingId(true);\n      fetch(`/api/validateId/${SS.get(\"reg-id\")}`)\n        .then((res) => {\n          setValidatingId(false);\n          if (res.status === 200) {\n            setIdIsValid(true);\n          } else {\n            setIdIsValid(false);\n            setPattern(`[^${SS.get(\"reg-id\")}$]`);\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  };\n  function checkId() {\n    validateId();\n    $(\".reg #id input\").addEventListener(\"blur\", validateId);\n    return () => setIdIsValid(null);\n  }\n  useEffect(checkId, []);\n  useEffect(() => {\n    if (pattern === \"[a-zA-Z0-9]{8,20}\") {\n      if (value.length < 8) {\n        setIdValidationMessage(\n          <FormattedMessage\n            id=\"idCountValidation\"\n            defaultMessage=\"Enter must be between 8 & 20 charecters\"\n          />\n        );\n      } else {\n        setIdValidationMessage(\n          <FormattedMessage id=\"idValidation\" defaultMessage=\"Enter an ID\" />\n        );\n      }\n    } else {\n      setIdValidationMessage(\n        <FormattedMessage\n          id=\"form.jamiaReg.idTakenValidation\"\n          defaultMessage=\"Enter is taken\"\n        />\n      );\n    }\n  }, [pattern, value]);\n  useEffect(() => {\n    if (confirmPass) {\n      pass === confirmPass ? setPassMatch(true) : setPassMatch(false);\n    } else {\n      setPassMatch(null);\n    }\n  }, [pass, confirmPass]);\n  return (\n    <>\n      <Input\n        defaultValue={SS.get(\"reg-id\")}\n        onChange={(target) => {\n          SS.set(\"reg-id\", target.value);\n          setIdIsValid(null);\n          setValue(target.value);\n          setPattern(\"[a-zA-Z0-9]{8,20}\");\n        }}\n        required={true}\n        dataId=\"id\"\n        min={8}\n        max={20}\n        label=<FormattedMessage\n          id=\"form.login.id\"\n          defaultMessage=\"Jamia's ID\"\n        />\n        strict={/^[a-zA-Z0-9]+$/}\n        pattern={pattern}\n        warning=\"a-z, A-Z, 0-9\"\n        validationMessage={idValidationMessage}\n      >\n        {idIsValid === false && (\n          <ion-icon name=\"close-circle-outline\"></ion-icon>\n        )}\n        {validatingId && idIsValid === null && (\n          <ion-icon\n            title=\"id is already taken\"\n            name=\"reload-outline\"\n          ></ion-icon>\n        )}\n        {idIsValid === true && (\n          <ion-icon\n            title=\"id is valid\"\n            name=\"checkmark-circle-outline\"\n          ></ion-icon>\n        )}\n      </Input>\n      <PasswordInput\n        passwordStrength={true}\n        dataId=\"pass\"\n        label=<FormattedMessage id=\"password\" defaultMessage=\"Password\" />\n        onChange={(target) => {\n          setPass(target.value);\n          SS.set(\"reg-pass\", target.value);\n        }}\n        validationMessage={\n          pass ? (\n            <FormattedMessage\n              id=\"passCountValidaion\"\n              defaultMessage=\"Password must be between 8 & 32 characters\"\n            />\n          ) : (\n            <FormattedMessage\n              id=\"passValidation\"\n              defaultMessage=\"Enter password\"\n            />\n          )\n        }\n      />\n      <PasswordInput\n        dataId=\"confirmPass\"\n        pattern={`^${pass}$`}\n        onChange={(target) => {\n          setConfirmPass(target.value);\n        }}\n        label=<FormattedMessage\n          id=\"form.login.passwordRepeat\"\n          defaultMessage=\"Confirm Password\"\n        />\n        validationMessage={\n          passMatch === null ? (\n            <FormattedMessage\n              id=\"passConfirmValidation\"\n              defaultMessage=\"Confirm password\"\n            />\n          ) : (\n            <FormattedMessage\n              id=\"passUnmatchValidation\"\n              defaultMessage=\"Password did not match\"\n            />\n          )\n        }\n      >\n        {passMatch === true && (\n          <span\n            style={{ background: \"rgb(12, 232, 100)\" }}\n            className=\"passwordConfirm\"\n          />\n        )}\n        {passMatch === false && (\n          <span\n            style={{ background: \"rgb(245, 7, 0)\" }}\n            className=\"passwordConfirm\"\n          />\n        )}\n      </PasswordInput>\n    </>\n  );\n}\nfunction ApplicantDetail() {\n  return (\n    <>\n      <Input\n        required={true}\n        defaultValue={SS.get(\"reg-applicant\")}\n        onChange={(target) => SS.set(\"reg-applicant\", target.value)}\n        dataId=\"applicant\"\n        strict={/^[ঀ-ৣৰ-৾a-zA-Z\\s(),-]+$/}\n        pattern=\".{5,}\"\n        validationMessage=<FormattedMessage\n          id=\"applNameValidation\"\n          defaultMessage=\"Enter applicant's name\"\n        />\n        label=<FormattedMessage\n          id=\"form.jamiaReg.applicant\"\n          defaultMessage=\"Applicant's Name\"\n        />\n      />\n      <Input\n        required={true}\n        defaultValue={SS.get(\"reg-applicantDesignation\")}\n        pattern=\".{5,}\"\n        onChange={(target) => SS.set(\"reg-applicantDesignation\", target.value)}\n        validationMessage=<FormattedMessage\n          id=\"applDesValidation\"\n          defaultMessage=\"Enter applicant's designation\"\n        />\n        dataId=\"applicantDesignation\"\n        label=<FormattedMessage\n          id=\"form.jamiaReg.applicantDesignation\"\n          defaultMessage=\"Applicant's designation in Jamia\"\n        />\n      />\n      <Mobile\n        required={true}\n        validationMessage=<FormattedMessage\n          id=\"applMobValidation\"\n          defaultMessage=\"Enter applicant's mobile\"\n        />\n        defaultValue={SS.get(\"reg-applicantMobile\")}\n        onChange={(target) => SS.set(\"reg-applicantMobile\", target.value)}\n        dataId=\"applicantMobile\"\n        label=<FormattedMessage\n          id=\"form.jamiaReg.applicantContact\"\n          defaultMessage=\"Applicant's Mobile\"\n        />\n      />\n      <Checkbox\n        required={true}\n        checked={true}\n        validationMessage=\"এই বক্সে টিক দিন\"\n      >\n        <FormattedMessage\n          id=\"form.jamiaReg.tcAgreement\"\n          defaultMessage=\"I accept all terms & conditions.\"\n          values={{\n            link: (\n              <a href=\"/terms&conditions\">\n                <FormattedMessage\n                  id=\"form.jamiaReg.tnc\"\n                  defaultMessage=\"terms & conditions\"\n                />\n              </a>\n            ),\n          }}\n        />\n      </Checkbox>\n    </>\n  );\n}\nfunction StepProgress({ step }) {\n  return (\n    <section className=\"pageNumber\">\n      <div className=\"dots\">\n        <span className={`current`}></span>\n      </div>\n      <div className=\"line\">\n        <span className={`${step > 1 ? \"current\" : \"\"}`}></span>\n      </div>\n      <div className=\"dots\">\n        <span className={`${step > 1 ? \"current\" : \"\"}`}></span>\n      </div>\n      <div className=\"line\">\n        <span className={`${step > 2 ? \"current\" : \"\"}`}></span>\n      </div>\n      <div className=\"dots\">\n        <span className={`${step > 2 ? \"current\" : \"\"}`}></span>\n      </div>\n    </section>\n  );\n}\n\nfunction SuccessPage({ className, message, children }) {\n  return (\n    <div className={`${className || \"\"} success`}>\n      <div className=\"successPromt\">\n        <ion-icon name=\"checkmark-circle-outline\"></ion-icon>\n        <p>{message}</p>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nexport const JamiaRegister = () => {\n  const { locale, user } = useContext(SiteContext);\n  const [step, setStep] = useState(1);\n  const [success, setSuccess] = useState(false);\n  const history = useHistory();\n  function redirect() {\n    user && history.push(\"/\");\n    return () => setSuccess(false);\n  }\n  useEffect(redirect, [setSuccess]);\n  const [loading, setLoading] = useState(false);\n  const [idIsValid, setIdIsValid] = useState(null);\n  const [validatingId, setValidatingId] = useState(false);\n  function leftButton() {\n    if (step === 2) {\n      setStep(1);\n    } else if (step === 3) {\n      setStep(2);\n    }\n  }\n  function submit(e) {\n    e.preventDefault();\n    if (validatingId) return;\n    if (step === 1) {\n      setStep(2);\n      return;\n    }\n    if (step === 2) {\n      setStep(3);\n      return;\n    }\n    if (step === 3) {\n      const data = {\n        name: SS.get(\"reg-name\"),\n        add: SS.get(\"reg-add\"),\n        contact: SS.get(\"reg-contact\"),\n        primeMufti: SS.get(\"reg-primeMufti\"),\n        id: SS.get(\"reg-id\"),\n        pass: SS.get(\"reg-pass\"),\n        appl: {\n          name: SS.get(\"reg-applicant\"),\n          des: SS.get(\"reg-applicantDesignation\"),\n          mob: SS.get(\"reg-applicantMobile\"),\n        },\n      };\n      const options = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      };\n      setLoading(true);\n      fetch(\"/api/source/new\", options)\n        .then((res) => {\n          setLoading(false);\n          if (res.status === 200) {\n            SS.remove(\"reg-name\");\n            SS.remove(\"reg-add\");\n            SS.remove(\"reg-contact\");\n            SS.remove(\"reg-primeMufti\");\n            SS.remove(\"reg-id\");\n            SS.remove(\"reg-pass\");\n            SS.remove(\"reg-applicantDesignation\");\n            SS.remove(\"reg-applicant\");\n            SS.remove(\"reg-applicantMobile\");\n            setSuccess(true);\n          } else {\n            alert(\"something went wrong\");\n          }\n        })\n        .catch((err) => {\n          alert(\"something went wrong\");\n          console.log(err);\n        });\n    }\n  }\n  if (success) {\n    return (\n      <SuccessPage\n        className=\"main\"\n        message=<FormattedMessage id=\"regSuccess\" />\n      >\n        <Link to=\"/\">\n          <FormattedMessage id=\"backToHome\" defaultMessage=\"Back to Home\" />\n        </Link>\n      </SuccessPage>\n    );\n  }\n  return (\n    <div className={`main jamiaForms ${locale === \"bn-BD\" ? \"bn-BD\" : \"\"}`}>\n      {user && <Redirect to=\"/\" />}\n      <form className=\"reg\" onSubmit={submit} autofill=\"false\">\n        <h2>\n          <FormattedMessage\n            id=\"form.jamiaReg.head\"\n            defaultMessage=\"REGISTRATION\"\n          />\n        </h2>\n        <StepProgress step={step} />\n        {step === 1 && <JamiaDetail />}\n        {step === 2 && (\n          <LoginDetail\n            idIsValid={idIsValid}\n            validatingId={validatingId}\n            setIdIsValid={setIdIsValid}\n            setValidatingId={setValidatingId}\n          />\n        )}\n        {step === 3 && <ApplicantDetail />}\n        {(step === 2 || step === 3) && (\n          <button type=\"button\" className=\"left\" onClick={leftButton}>\n            <FormattedMessage id=\"form.jamiaReg.back\" defaultMessage=\"Back\" />\n          </button>\n        )}\n        <Submit\n          className={(step === 1 || step === 2) && \"right\"}\n          label={\n            step === 1 || step === 2 ? (\n              <FormattedMessage id=\"next\" defaultMessage=\"Next\" />\n            ) : (\n              <FormattedMessage id=\"register\" defaultMessage=\"Register\" />\n            )\n          }\n          loading={loading}\n          setLoading={setLoading}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport const JamiaLogin = () => {\n  const [invalidCred, setInvalidCred] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const { user } = useContext(SiteContext);\n  const { setUser, setIsAuthenticated, locale } = useContext(SiteContext);\n  const [userId, setUserId] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n  function submit(e) {\n    e.preventDefault();\n    setLoading(true);\n    fetch(`/api/loginSource`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username: userId, password: pass, role: \"jamia\" }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setIsAuthenticated(data.isAuthenticated);\n          setUser(data.user);\n          history.push(\"/jamia/fatwa\");\n        } else {\n          setInvalidCred(true);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        alert(\"something went wrong\");\n      });\n  }\n  return (\n    <div className={`main jamiaForms ${locale === \"bn-BD\" ? \"bn-BD\" : \"\"}`}>\n      {user && <Redirect to=\"/\" />}\n      <form\n        className={`login ${invalidCred ? \"invalidCred\" : \"\"}`}\n        onSubmit={submit}\n      >\n        <h2 data-bn=\"আমার থেকে একটি বাক্য হলেও পৌঁছে দাও ।\">\n          - بلغوا عني ولو آية\n        </h2>\n        <Input\n          required={true}\n          type=\"text\"\n          label=<FormattedMessage\n            id=\"form.login.id\"\n            defaultMessage=\"Jamia-ID\"\n          />\n          strict={/^[a-zA-Z0-9]+$/}\n          min={8}\n          max={20}\n          onChange={(target) => {\n            setUserId(target.value);\n            setInvalidCred(false);\n          }}\n          validationMessage=\"আইডি প্রবেশ করুন\"\n          warning=\"a-z, A-Z, 0-9\"\n          id=\"jamiaLoginId\"\n        />\n        <PasswordInput\n          id=\"jamiaLoginPass\"\n          dataId=\"pass\"\n          onChange={(target) => {\n            setPass(target.value);\n            setInvalidCred(false);\n          }}\n          label=<FormattedMessage id=\"password\" defaultMessage=\"Password\" />\n        >\n          <Link className=\"forgotPass\" to=\"/passwordRecovery\">\n            <FormattedMessage\n              id=\"form.login.forgotPass\"\n              defaultMessage=\"Forgot password\"\n            />\n            ?\n          </Link>\n        </PasswordInput>\n        <Submit\n          disabled={invalidCred}\n          loading={loading}\n          label={<FormattedMessage id=\"login\" defaultMessage=\"Login\" />}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport const PassRecovery = () => {\n  const { locale, user } = useContext(SiteContext);\n  const [loading, setLoading] = useState(false);\n  const [invalidId, setInvalidId] = useState(false);\n  const [wrongCode, setWrongCode] = useState(false);\n  const [id, setId] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n  const [step, setStep] = useState(1);\n  const [resend, setResend] = useState(false);\n  const [sendingCode, setSendingCode] = useState(false);\n  const [timer, setTimer] = useState(60);\n  const [attempts, setAttempts] = useState(0);\n  useEffect(() => {\n    let interval;\n    if (step === 2 || step === 3) {\n      interval = setInterval(() => setTimer((prev) => prev - 1), 1000);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [step]);\n  function resetTimer() {\n    if (step === 2 && timer <= 0 && !resend) {\n      setResend(true);\n    }\n  }\n  useEffect(resetTimer, [timer]);\n  function resendCode() {\n    setSendingCode(true);\n    fetch(`/api/passRecovery`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ id: id }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        setSendingCode(false);\n        setAttempts(0);\n        setWrongCode(false);\n        if (data.code === \"ok\") {\n          setTimer(60);\n        } else {\n          alert(\"something went wrong\");\n        }\n      })\n      .catch((err) => {\n        alert(\"something went wrong\");\n        console.log(err);\n      });\n  }\n  function submit(e) {\n    e.preventDefault();\n    setLoading(true);\n    if (step === 1) {\n      fetch(`/api/passRecovery`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ id: id }),\n      })\n        .then((res) => {\n          setLoading(false);\n          if (res.status === 404) {\n            setInvalidId(true);\n          } else if (res.status === 200) {\n            setStep(2);\n            setTimer(60);\n          } else if (res.status === 500) {\n            alert(\"something went wrong\");\n          }\n        })\n        .catch((err) => {\n          alert(\"something went wrong\");\n          console.log(err);\n        });\n    } else if (step === 2) {\n      fetch(`/api/varifyPassCode`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ id: id, code: code }),\n      })\n        .then((res) => {\n          setLoading(false);\n          setAttempts((prev) => prev + 1);\n          if (res.status === 401) {\n            setWrongCode(true);\n          } else if (res.status === 200) {\n            setTimer(60);\n            setStep(3);\n          } else if (res.status === 400) {\n            if (attempts === 2) {\n              setTimer(0);\n            }\n          }\n        })\n        .catch((err) => {\n          alert(\"something went wrong\");\n          console.log(err);\n        });\n    } else if (step === 3) {\n      fetch(\"/api/jamiaNewPass\", {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"Application/json\" },\n        body: JSON.stringify({\n          newPass: $(\"#pass input\").value,\n          jamia: id,\n          code: code,\n        }),\n      })\n        .then((res) => {\n          setLoading(false);\n          if (res.status === 200) {\n            setStep(\"success\");\n          }\n        })\n        .catch((err) => {\n          alert(\"something went wrong\");\n          console.log(err);\n        });\n    }\n  }\n  return (\n    <div className={`main jamiaForms ${locale === \"bn-BD\" ? \"bn-BD\" : \"\"}`}>\n      {user && <Redirect to=\"/\" />}\n      <form className={`passRecovery`} onSubmit={submit}>\n        <h3>\n          <FormattedMessage\n            id=\"form.passRecovery.head\"\n            defaultMessage=\"Password Recovery\"\n          />\n        </h3>\n        {step === 1 && (\n          <>\n            <p>\n              <FormattedMessage\n                id=\"form.passRecovery.id.dsrc\"\n                defaultMessage=\"Enter Jamia's login Id below.\"\n              />\n            </p>\n            <Input\n              required={true}\n              id=\"passRecoveryId\"\n              dataId=\"id\"\n              type=\"text\"\n              strict={/^[a-zA-Z0-9]+$/}\n              pattern=\".{8,20}\"\n              warning=\"a-z, A-Z, 0-9\"\n              onChange={(target) => {\n                setId(target.value);\n                setInvalidId(false);\n              }}\n              className={invalidId ? \"err\" : \"\"}\n              label=<FormattedMessage id=\"form.login.id\" defaultMessage=\"Id\" />\n              validationMessage={\n                id ? (\n                  <FormattedMessage\n                    id=\"idInvalid\"\n                    defaultMessage=\"Invalid ID\"\n                  />\n                ) : (\n                  <FormattedMessage\n                    id=\"idValidation\"\n                    defaultMessage=\"Enter login ID\"\n                  />\n                )\n              }\n            >\n              {invalidId && (\n                <span className=\"errMessage\">\n                  <FormattedMessage\n                    id=\"passRecovery.invalidId\"\n                    defaultMessage=\"ID could not be found\"\n                  />\n                </span>\n              )}\n            </Input>\n          </>\n        )}\n        {step === 2 && (\n          <>\n            <p>\n              <FormattedMessage\n                id=\"form.passRecovery.code.dsrc\"\n                defaultMessage=\"A varification code has been sent to Jamia's applicant's mobile. Enter the code below.\"\n              />\n              <br />\n              <br />\n              <span className=\"resend\">\n                <FormattedMessage\n                  id=\"form.passRecovery.code.ps\"\n                  defaultMessage=\"didn't get the code\"\n                />\n                ?{\" \"}\n                {timer <= 0 ? (\n                  sendingCode ? (\n                    <span>\n                      <FormattedMessage\n                        id=\"form.passRecovery.code.sending\"\n                        defaultMessage=\"Sending\"\n                      />\n                    </span>\n                  ) : (\n                    <span onClick={resendCode} className=\"sendAgain\">\n                      <FormattedMessage\n                        id=\"form.passRecovery.code.resend\"\n                        defaultMessage=\"Resend\"\n                      />\n                    </span>\n                  )\n                ) : (\n                  <span>\n                    <FormattedMessage\n                      id=\"form.passRecovery.code.wait\"\n                      defaultMessage=\"wait {sec}s.\"\n                      values={{ sec: <FormattedNumber value={timer} /> }}\n                    />\n                  </span>\n                )}\n              </span>\n            </p>\n            <Input\n              required={true}\n              id=\"passRecoveryVarificationCode\"\n              dataId=\"code\"\n              strict={/^[0-9]+$/}\n              warning=\"0-9\"\n              min={4}\n              max={4}\n              onChange={(target) => {\n                setCode(target.value);\n                setWrongCode(false);\n              }}\n              className={wrongCode ? \"err\" : \"\"}\n              label=<FormattedMessage\n                id=\"form.passRecovery.code.input\"\n                defaultMessage=\"4 digit code\"\n              />\n            >\n              {wrongCode &&\n                (attempts > 2 ? (\n                  <span className=\"errMessage\">\n                    <FormattedMessage\n                      id=\"form.passRecovery.code.manyWrongAttempts\"\n                      defaultMessage=\"Many wrong attempts.\"\n                    />{\" \"}\n                    <span className=\"sendAgain\" onClick={resendCode}>\n                      <FormattedMessage\n                        id=\"form.passRecovery.code.resendCode\"\n                        defaultMessage=\"Resend Code\"\n                      />\n                    </span>\n                  </span>\n                ) : (\n                  <span className=\"errMessage\">\n                    <FormattedMessage\n                      id=\"form.passRecovery.code.wrongInput\"\n                      defaultMessage=\"Code is wrong. {attempts} attempts left\"\n                      values={{\n                        attempts: <FormattedNumber value={3 - attempts} />,\n                      }}\n                    />\n                  </span>\n                ))}\n            </Input>\n          </>\n        )}\n        {step === 3 && (\n          <>\n            {timer > 0 ? (\n              <>\n                <p>\n                  <FormattedMessage\n                    id=\"form.passRecovery.pass.dscr\"\n                    defaultMessage=\"Enter your new password below within {sec}s.\"\n                    values={{ sec: <FormattedNumber value={timer} /> }}\n                  />\n                </p>\n                <PasswordInput\n                  match=\".passRecovery #confirmPass input\"\n                  passwordStrength={true}\n                  dataId=\"pass\"\n                  label=<FormattedMessage\n                    id=\"form.passRecovery.pass.input1\"\n                    defaultValue=\"New password\"\n                  />\n                />\n                <PasswordInput\n                  match=\".passRecovery #pass input\"\n                  dataId=\"confirmPass\"\n                  label=<FormattedMessage\n                    id=\"form.passRecovery.pass.input2\"\n                    defaultValue=\"Confirm password\"\n                  />\n                />\n              </>\n            ) : (\n              <p>\n                <FormattedMessage\n                  id=\"form.passRecovery.timeout\"\n                  defaultValue=\"Timeout.\"\n                />{\" \"}\n                <Link\n                  to=\"/passwordRecovery\"\n                  onClick={() => {\n                    setStep(1);\n                    setTimer(60);\n                  }}\n                >\n                  <FormattedMessage\n                    id=\"form.passRecovery.startOver\"\n                    defaultValue=\"Start over\"\n                  />\n                </Link>\n              </p>\n            )}\n          </>\n        )}\n        {step === \"success\" && (\n          <p>\n            <FormattedMessage\n              id=\"form.passRecovery.success\"\n              values={{\n                link: (\n                  <a href=\"/login\">\n                    <FormattedMessage id=\"here\" defaultMessage=\"here\" />\n                  </a>\n                ),\n              }}\n              defaultMessage=\"Password has been successfully changed.\"\n            />\n          </p>\n        )}\n        {step !== \"success\" && (\n          <Submit\n            disabled={\n              wrongCode ||\n              loading ||\n              (step === 2 && timer <= 0) ||\n              (step === 2 && attempts > 2) ||\n              (step === 3 && timer <= 0)\n            }\n            label={\n              step === 1 ? (\n                <FormattedMessage id=\"next\" defaultMessage=\"Next\" />\n              ) : (\n                <FormattedMessage id=\"submit\" defaultMessage=\"Submit\" />\n              )\n            }\n            loading={loading}\n            setLoading={setLoading}\n          />\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport const AdminLogin = () => {\n  const [invalidCred, setInvalidCred] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const { setUser, setIsAuthenticated, locale, user } = useContext(SiteContext);\n  const [userId, setUserId] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n  useEffect(() => {\n    setInvalidCred(false);\n  }, [userId, pass]);\n  function submit(e) {\n    e.preventDefault();\n    setLoading(true);\n    fetch(`/api/loginAdmin`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ username: userId, password: pass, role: \"admin\" }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setIsAuthenticated(data.isAuthenticated);\n          setUser(data.user);\n          history.push(\"/admin/sources\");\n        } else {\n          setInvalidCred(true);\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        alert(\"something went wrong\");\n        console.log(err);\n      });\n  }\n  return (\n    <div className={`main jamiaForms ${locale === \"bn-BD\" ? \"bn-BD\" : \"\"}`}>\n      {user && <Redirect to=\"/\" />}\n      <form\n        className={`adminLogin ${invalidCred ? \"invalidCred\" : \"\"}`}\n        onSubmit={submit}\n      >\n        <h2 data-bn=\"This part is only for Admins.\">Admin</h2>\n        <Input\n          required={true}\n          type=\"text\"\n          label=<FormattedMessage id=\"username\" defaultMessage=\"Username\" />\n          strict={/^[a-zA-Z0-9]+$/}\n          min={8}\n          max={20}\n          validationMessage=<FormattedMessage\n            id=\"usernameValidation\"\n            defaultMessage=\"Enter username\"\n          />\n          onChange={(target) => setUserId(target.value)}\n          warning=\"a-z, A-Z, 0-9\"\n        />\n        <PasswordInput\n          dataId=\"pass\"\n          onChange={(target) => setPass(target.value)}\n          label=<FormattedMessage id=\"password\" defaultMessage=\"Password\" />\n          validationMessage={\n            pass ? (\n              <FormattedMessage\n                id=\"passCountValidaion\"\n                defaultMessage=\"Password must be between 8 & 32 charecters\"\n              />\n            ) : (\n              <FormattedMessage\n                id=\"passValidation\"\n                defaultMessage=\"Enter Password\"\n              />\n            )\n          }\n        />\n        <Submit\n          disabled={invalidCred}\n          loading={loading}\n          label={<FormattedMessage id=\"login\" defaultMessage=\"Login\" />}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport const AddFatwaForm = ({ match }) => {\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const { fatwaToEdit, setFatwaToEdit, locale } = useContext(SiteContext);\n  const [preFill, setPreFill] = useState(() => {\n    if (fatwaToEdit === null) {\n      return {\n        translate: false,\n        topic: \"\",\n        title: {\n          \"bn-BD\": \"\",\n          \"en-US\": \"\",\n        },\n        ques: {\n          \"bn-BD\": \"\",\n          \"en-US\": \"\",\n        },\n        ans: {\n          \"bn-BD\": \"\",\n          \"en-US\": \"\",\n        },\n        meta: {\n          date: \"\",\n          atts: \"\",\n          write: \"\",\n        },\n        img: [],\n      };\n    } else {\n      let inputBooks = [];\n      let inputSura = [];\n      SS.set(\"editFatwa-topic\", JSON.stringify(fatwaToEdit.topic));\n      SS.set(\"editFatwa-title\", fatwaToEdit.title[\"bn-BD\"]);\n      SS.set(\"editFatwa-titleEn\", fatwaToEdit.title[\"en-US\"]);\n      SS.set(\"editFatwa-ques\", fatwaToEdit.ques[\"bn-BD\"]);\n      SS.set(\"editFatwa-quesEn\", fatwaToEdit.ques[\"en-US\"]);\n      SS.set(\"editFatwa-ans\", fatwaToEdit.ans[\"bn-BD\"]);\n      SS.set(\"editFatwa-ansEn\", fatwaToEdit.ans[\"en-US\"]);\n      SS.set(\"editFatwa-date\", fatwaToEdit.meta.date);\n      SS.set(\"editFatwa-write\", fatwaToEdit.meta.write);\n      SS.set(\"editFatwa-atts\", fatwaToEdit.meta.atts);\n      if (fatwaToEdit.ref.length > 0) {\n        fatwaToEdit.ref.forEach((item) => {\n          if (item.book) {\n            inputBooks.push([\n              {\n                ...refInputBook[0][0],\n                value: item.book,\n              },\n              {\n                ...refInputBook[0][1],\n                value: item.part,\n              },\n              {\n                ...refInputBook[0][2],\n                value: item.page,\n              },\n            ]);\n          } else {\n            inputSura.push([\n              {\n                ...refInputSura[0][0],\n                value: item.sura,\n              },\n              {\n                ...refInputSura[0][1],\n                value: item.aayat,\n              },\n            ]);\n          }\n        });\n        inputBooks.push(...refInputBook);\n        inputSura.push(...refInputSura);\n      }\n      return {\n        ...(fatwaToEdit.ref.length > 0 && {\n          inputBooks: [...inputBooks],\n          inputSura: [...inputSura],\n        }),\n        ...fatwaToEdit,\n      };\n    }\n  });\n  const [sameExists, setSameExists] = useState(\"\");\n  const [success, setSuccess] = useState(true);\n  function setCleanup() {\n    return () => {\n      if (fatwaToEdit) {\n        setFatwaToEdit(null);\n        SS.remove(\"editFatwa-topic\");\n        SS.remove(\"editFatwa-title\");\n        SS.remove(\"editFatwa-titleEn\");\n        SS.remove(\"editFatwa-ques\");\n        SS.remove(\"editFatwa-quesEn\");\n        SS.remove(\"editFatwa-ans\");\n        SS.remove(\"editFatwa-ansEn\");\n        SS.remove(\"editFatwa-atts\");\n        SS.remove(\"editFatwa-write\");\n        SS.remove(\"editFatwa-date\");\n      }\n    };\n  }\n  useEffect(setCleanup, []);\n  function submit(e) {\n    e.preventDefault();\n    let data, url, options;\n    if (fatwaToEdit) {\n      data = {\n        ...(fatwaToEdit.topic[locale] !==\n          JSON.parse(SS.get(\"editFatwa-topic\"))[locale] && {\n          topic: JSON.parse(SS.get(\"editFatwa-topic\")),\n        }),\n        ...(fatwaToEdit.title[\"bn-BD\"] !== SS.get(\"editFatwa-title\") && {\n          \"title.bn-BD\": SS.get(\"editFatwa-title\"),\n        }),\n        ...(fatwaToEdit.title[\"en-US\"] !== SS.get(\"editFatwa-titleEn\") && {\n          \"title.en-US\": SS.get(\"editFatwa-titleEn\"),\n        }),\n        ...(fatwaToEdit.ques[\"bn-BD\"] !== SS.get(\"editFatwa-ques\") && {\n          \"ques.bn-BD\": SS.get(\"editFatwa-ques\"),\n        }),\n        ...(fatwaToEdit.ques[\"en-US\"] !== SS.get(\"editFatwa-quesEn\") && {\n          \"ques.en-US\": SS.get(\"editFatwa-quesEn\"),\n        }),\n        ...(fatwaToEdit.ans[\"bn-BD\"] !== SS.get(\"editFatwa-ans\") && {\n          \"ans.bn-BD\": SS.get(\"editFatwa-ans\"),\n        }),\n        ...(fatwaToEdit.ans[\"en-US\"] !== SS.get(\"editFatwa-ansEn\") && {\n          \"ans.en-US\": SS.get(\"editFatwa-ansEn\"),\n        }),\n        ...(fatwaToEdit.meta.write !== SS.get(\"editFatwa-write\") && {\n          \"meta.write\": SS.get(\"editFatwa-write\"),\n        }),\n        ...(fatwaToEdit.meta.atts !== SS.get(\"editFatwa-atts\") && {\n          \"meta.atts\": SS.get(\"editFatwa-atts\"),\n        }),\n        ...(fatwaToEdit.meta.date !== SS.get(\"editFatwa-date\") && {\n          \"meta.date\": SS.get(\"editFatwa-date\"),\n        }),\n        ...(JSON.stringify([\n          ...GetGroupData($(\".addFatwa #books.multipleInput\")),\n          ...GetGroupData($(\".addFatwa #sura.multipleInput\")),\n        ]) !== JSON.stringify(fatwaToEdit.ref) && {\n          ref: [\n            ...GetGroupData($(\".addFatwa #books.multipleInput\")),\n            ...GetGroupData($(\".addFatwa #sura.multipleInput\")),\n          ],\n        }),\n      };\n      url =\n        fatwaToEdit.status === \"pending\"\n          ? `/api/source/editSubmission/${match.params.id}`\n          : `/api/source/editFatwa/${match.params.id}`;\n      options = {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      };\n    } else {\n      data = {\n        topic: JSON.parse(SS.get(\"newFatwa-topic\")),\n        title: {\n          \"bn-BD\": SS.get(\"newFatwa-title\"),\n          \"en-US\": SS.get(\"newFatwa-titleEn\"),\n        },\n        ques: {\n          \"bn-BD\": SS.get(\"newFatwa-ques\"),\n          \"en-US\": SS.get(\"newFatwa-quesEn\"),\n        },\n        ans: {\n          \"bn-BD\": SS.get(\"newFatwa-ans\"),\n          \"en-US\": SS.get(\"newFatwa-ansEn\"),\n        },\n        meta: {\n          write: SS.get(\"newFatwa-write\"),\n          atts: SS.get(\"newFatwa-atts\"),\n          date: SS.get(\"newFatwa-date\"),\n        },\n        ref: [\n          ...GetGroupData($(\".addFatwa #books.multipleInput\")),\n          ...GetGroupData($(\".addFatwa #sura.multipleInput\")),\n        ],\n        img: preFill.img,\n      };\n      url = `/api/source/newFatwa`;\n      options = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      };\n    }\n    setLoading(true);\n    fetch(url, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          SS.remove(\"newFatwa-ansEn\");\n          SS.remove(\"newFatwa-topic\");\n          SS.remove(\"newFatwa-ques\");\n          SS.remove(\"newFatwa-quesEn\");\n          SS.remove(\"newFatwa-title\");\n          SS.remove(\"newFatwa-titleEn\");\n          SS.remove(\"newFatwa-ans\");\n          SS.remove(\"newFatwa-date\");\n          SS.remove(\"newFatwa-write\");\n          SS.remove(\"newFatwa-atts\");\n        } else if (data.code === 11000) {\n          setSameExists(data.field);\n        } else {\n          throw data.code;\n        }\n      })\n      .catch((err) => {\n        alert(\"something went wrong\");\n        console.log(err);\n      });\n  }\n  if (success) {\n    return (\n      <SuccessPage\n        className=\"addFatwa\"\n        message=<FormattedMessage id=\"fatwaSubmissionSuccess\" />\n      >\n        <div className=\"act\">\n          <button onClick={() => setSuccess(false)}>\n            <FormattedMessage id=\"addMoreFatwa\" />\n          </button>\n          <Link to=\"/jamia/fatwa/pending\">\n            <FormattedMessage id=\"showPending\" />\n          </Link>\n        </div>\n      </SuccessPage>\n    );\n  }\n  return (\n    <form\n      className={`addFatwa ${preFill.translate ? \"translate\" : \"\"}`}\n      onSubmit={submit}\n    >\n      {match.params.id && !fatwaToEdit && (\n        <Redirect to=\"/jamia/fatwa/submissions\" />\n      )}\n      <Combobox\n        required={true}\n        dataId=\"topic\"\n        defaultValue={\n          preFill.topic ||\n          (SS.get(\"newFatwa-topic\") && JSON.parse(SS.get(\"newFatwa-topic\")))\n        }\n        onChange={(target) => {\n          SS.set(\"newFatwa-topic\", JSON.stringify(target.value));\n          fatwaToEdit &&\n            SS.set(\"editFatwa-topic\", JSON.stringify(target.value));\n        }}\n        maxHeight=\"15rem\"\n        label=<FormattedMessage id=\"topic\" defaultMessage=\"Topic\" />\n        validationMessage=\"বিষয়বস্তু নির্বাচন করুন\"\n        options={topics.map((topic) => {\n          return {\n            label: topic[locale],\n            value: topic,\n          };\n        })}\n      />\n      <Checkbox\n        label=<ion-icon name=\"language-outline\"></ion-icon>\n        defaultValue={preFill.translate}\n        onChange={(target) =>\n          setPreFill((prev) => {\n            const newPrefill = { ...prev };\n            newPrefill.translate = target.checked;\n            return newPrefill;\n          })\n        }\n      />\n      <Input\n        required={true}\n        defaultValue={preFill.title[\"bn-BD\"] || SS.get(\"newFatwa-title\")}\n        dataId=\"title\"\n        min={10}\n        validationMessage=\"ফতোয়ার শিরোণাম প্রবেশ করুন\"\n        label=<FormattedMessage id=\"title\" defaultMessage=\"Title\" />\n        max={200}\n        className={sameExists === \"title.bn-BD\" ? \"err\" : \"\"}\n        onChange={(target) => {\n          SS.set(\"newFatwa-title\", target.value);\n          setSameExists(\"\");\n          fatwaToEdit && SS.set(\"editFatwa-title\", target.value);\n        }}\n      >\n        {sameExists === \"title.bn-BD\" && (\n          <span className=\"errMessage\">\n            <FormattedMessage id=\"sameTitleErr\" />\n          </span>\n        )}\n      </Input>\n      {preFill.translate && (\n        <Input\n          min={10}\n          required={true}\n          validationMessage=\"ফতোয়ার শিরোণাম প্রবেশ করুন\"\n          defaultValue={preFill.title[\"en-US\"] || SS.get(\"newFatwa-titleEn\")}\n          dataId=\"titleEn\"\n          label=\"Title in English\"\n          className={sameExists === \"title.en-US\" ? \"err\" : \"\"}\n          max={200}\n          onChange={(target) => {\n            SS.set(\"newFatwa-titleEn\", target.value);\n            fatwaToEdit && SS.set(\"editFatwa-titleEn\", target.value);\n          }}\n        >\n          {sameExists === \"title.en-US\" && (\n            <span className=\"errMessage\">\n              <FormattedMessage id=\"sameTitleErr\" />\n            </span>\n          )}\n        </Input>\n      )}\n      <Textarea\n        min=\"20\"\n        required={true}\n        validationMessage=\"প্রশ্ন প্রবেশ করুন\"\n        defaultValue={preFill.ques[\"bn-BD\"] || SS.get(\"newFatwa-ques\")}\n        onChange={(target) => {\n          SS.set(\"newFatwa-ques\", target.value);\n          fatwaToEdit && SS.set(\"editFatwa-ques\", target.value);\n        }}\n        dataId=\"ques\"\n        label=<FormattedMessage id=\"question\" defaultMessage=\"Question\" />\n      />\n      {preFill.translate && (\n        <Textarea\n          min=\"20\"\n          required={true}\n          validationMessage=\"প্রশ্ন প্রবেশ করুন\"\n          defaultValue={preFill.ques[\"en-US\"] || SS.get(\"newFatwa-quesEn\")}\n          onChange={(target) => {\n            SS.set(\"newFatwa-quesEn\", target.value);\n            fatwaToEdit && SS.set(\"editFatwa-quesEn\", target.value);\n          }}\n          dataId=\"quesEn\"\n          label=\"Question in English\"\n        />\n      )}\n      <Textarea\n        min=\"20\"\n        required={true}\n        validationMessage=\"উত্তর প্রবেশ করুন\"\n        defaultValue={preFill.ans[\"bn-BD\"] || SS.get(\"newFatwa-ans\")}\n        onChange={(target) => {\n          SS.set(\"newFatwa-ans\", target.value);\n          fatwaToEdit && SS.set(\"editFatwa-ans\", target.value);\n          setSameExists(false);\n        }}\n        dataId=\"ans\"\n        className={sameExists === \"ans.bn-BD\" ? \"err\" : \"\"}\n        label=<FormattedMessage id=\"answer\" defaultMessage=\"Answer\" />\n      >\n        {sameExists === \"ans.bn-BD\" && (\n          <span className=\"errMessage\">\n            <FormattedMessage id=\"sameAnsErr\" />\n          </span>\n        )}\n      </Textarea>\n      {preFill.translate && (\n        <Textarea\n          min=\"20\"\n          required={true}\n          validationMessage=\"উত্তর প্রবেশ করুন\"\n          defaultValue={preFill.ans[\"en-US\"] || SS.get(\"newFatwa-ansEn\")}\n          className={sameExists === \"ans.en-US\" ? \"err\" : \"\"}\n          onChange={(target) => {\n            SS.set(\"newFatwa-ansEn\", target.value);\n            fatwaToEdit && SS.set(\"editFatwa-ansEn\", target.value);\n          }}\n          dataId=\"ansEn\"\n          label=\"Answer in Enlish\"\n        >\n          {sameExists === \"ans.en-US\" && (\n            <span className=\"errMessage\">\n              <FormattedMessage id=\"sameAnsErr\" />\n            </span>\n          )}\n        </Textarea>\n      )}\n      <div className=\"ref\">\n        <MultipleInput\n          id=\"books\"\n          inputs={preFill.inputBooks || refInputBook}\n          refInput={refInputBook}\n        />\n        <MultipleInput\n          id=\"sura\"\n          inputs={preFill.inputSura || refInputSura}\n          refInput={refInputSura}\n        />\n      </div>\n      <div className=\"meta\">\n        <DateInput\n          required={true}\n          dataId=\"date\"\n          label=<FormattedMessage\n            id=\"dOWriting\"\n            defaultMessage=\"Fatwa was written in\"\n          />\n          max={new Date()}\n          onChange={(target) => {\n            SS.set(\"newFatwa-date\", target.value);\n            fatwaToEdit && SS.set(\"editFatwa-date\", target.value);\n          }}\n          defaultValue={preFill.meta.date || SS.get(\"newFatwa-date\")}\n          validationMessage=<FormattedMessage\n            id=\"dOWritingValidation\"\n            defaultMessage=\"When was the fatwa written originally?\"\n          />\n        />\n        <Input\n          min={5}\n          required={true}\n          defaultValue={preFill.meta.write || SS.get(\"newFatwa-write\")}\n          dataId=\"write\"\n          onChange={(target) => {\n            SS.set(\"newFatwa-write\", target.value);\n            fatwaToEdit && SS.set(\"editFatwa-write\", target.value);\n            setSameExists(false);\n          }}\n          label=<FormattedMessage id=\"write\" defaultMessage=\"Write\" />\n          validationMessage=<FormattedMessage\n            id=\"writeValidation\"\n            defaultMessage=\"who wrote the fatwa\"\n          />\n        />\n        <Input\n          min={5}\n          required={true}\n          validationMessage=\"test\"\n          defaultValue={preFill.meta.atts || SS.get(\"newFatwa-atts\")}\n          dataId=\"write\"\n          onChange={(target) => {\n            SS.set(\"newFatwa-atts\", target.value);\n            fatwaToEdit && SS.set(\"editFatwa-atts\", target.value);\n            setSameExists(false);\n          }}\n          label=<FormattedMessage id=\"atts\" defaultMessage=\"Attestation\" />\n          validationMessage=<FormattedMessage\n            id=\"attsValidation\"\n            defaultMessage=\"who attestated the fatwa\"\n          />\n        />\n      </div>\n      <Submit\n        label=<FormattedMessage id=\"submit\" defaultMessage=\"Submit\" />\n        loading={loading}\n        setLoading={setLoading}\n      />\n    </form>\n  );\n};\nexport const UserQuestionAnswerForm = ({ ques, setQues, _id }) => {\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const { locale } = useContext(SiteContext);\n  const [sameExists, setSameExists] = useState(\"\");\n  const [preFill] = useState(() => {\n    if (SS.get(\"ansFatwa-ref\")) {\n      let inputBooks = [];\n      let inputSura = [];\n      JSON.parse(SS.get(\"ansFatwa-ref\")).forEach((item) => {\n        if (item.book) {\n          inputBooks.push([\n            {\n              ...refInputBook[0][0],\n              value: item.book,\n            },\n            {\n              ...refInputBook[0][1],\n              value: item.part,\n            },\n            {\n              ...refInputBook[0][2],\n              value: item.page,\n            },\n          ]);\n        } else {\n          inputSura.push([\n            {\n              ...refInputSura[0][0],\n              value: item.sura,\n            },\n            {\n              ...refInputSura[0][1],\n              value: item.aayat,\n            },\n          ]);\n        }\n      });\n      inputBooks.push(...refInputBook);\n      inputSura.push(...refInputSura);\n      return { inputBooks: [...inputBooks], inputSura: [...inputSura] };\n    }\n  });\n  function submit(e) {\n    e.preventDefault();\n    const data = {\n      topic: SS.get(\"ansFatwa-topic\")\n        ? JSON.parse(SS.get(\"ansFatwa-topic\"))\n        : ques.topic,\n      title: SS.get(\"ansFatwa-title\"),\n      body: SS.get(\"ansFatwa-ans\"),\n      meta: {\n        date: SS.get(\"ansFatwa-date\"),\n        write: SS.get(\"ansFatwa-write\"),\n        atts: SS.get(\"ansFatwa-atts\"),\n      },\n      ref: [\n        ...GetGroupData($(\".addFatwa #books.multipleInput\")),\n        ...GetGroupData($(\".addFatwa #sura.multipleInput\")),\n      ],\n    };\n    const url = `/api/source/userQues/answer/${_id}`;\n    const options = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n    };\n    setLoading(true);\n    fetch(url, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          SS.remove(\"ansFatwa-title\");\n          SS.remove(\"ansFatwa-ans\");\n          SS.remove(\"ansFatwa-ref\");\n          setQues(data.content);\n          history.goBack();\n        } else if (data.code === 11000) {\n          setSameExists(data.field);\n        } else {\n          alert(\"something went wrong\");\n        }\n      })\n      .catch((err) => {\n        alert(\"something went wrong\");\n      });\n  }\n  return (\n    <form className={`addFatwa`} onSubmit={submit}>\n      <Combobox\n        dataId=\"topic\"\n        defaultValue={ques.topic}\n        onChange={(target) => {\n          SS.set(\"ansFatwa-topic\", JSON.stringify(target.value));\n        }}\n        maxHeight=\"15rem\"\n        label=<FormattedMessage id=\"topic\" defaultMessage=\"Topic\" />\n        options={topics.map((topic) => {\n          return { label: topic[locale], value: topic };\n        })}\n      />\n      <Input\n        autoFocus={true}\n        defaultValue={SS.get(\"ansFatwa-title\")}\n        dataId=\"title\"\n        label=<FormattedMessage id=\"title\" defaultMessage=\"Title\" />\n        max={200}\n        className={sameExists === \"title.bn-BD\" ? \"err\" : \"\"}\n        onChange={(target) => {\n          SS.set(\"ansFatwa-title\", target.value);\n          setSameExists(\"\");\n        }}\n        required={true}\n        validationMessage=\"শিরোণাম প্রবেশ করুন\"\n      >\n        {sameExists === \"title.bn-BD\" && (\n          <span className=\"errMessage\">\n            <FormattedMessage id=\"sameTitleErr\" />\n          </span>\n        )}\n      </Input>\n      <Textarea\n        disabled={true}\n        defaultValue={ques.body}\n        onChange={(target) => SS.set(\"ansFatwa-ques\", target.value)}\n        dataId=\"ques\"\n        label=<FormattedMessage id=\"question\" defaultMessage=\"Question\" />\n      />\n      <Textarea\n        defaultValue={SS.get(\"ansFatwa-ans\")}\n        onChange={(target) => {\n          SS.set(\"ansFatwa-ans\", target.value);\n          setSameExists(false);\n        }}\n        dataId=\"ans\"\n        className={sameExists === \"ans.bn-BD\" ? \"err\" : \"\"}\n        label=<FormattedMessage id=\"answer\" defaultMessage=\"Answer\" />\n        required={true}\n        min={10}\n        validationMessage=\"উত্তর প্রবেশ করুন\"\n      >\n        {sameExists === \"ans.bn-BD\" && (\n          <span className=\"errMessage\">\n            <FormattedMessage id=\"sameAnsErr\" />\n          </span>\n        )}\n      </Textarea>\n      <div className=\"ref\">\n        <MultipleInput\n          id=\"books\"\n          inputs={preFill.inputBooks || refInputBook}\n          refInput={refInputBook}\n        />\n        <MultipleInput\n          id=\"sura\"\n          inputs={preFill.inputSura || refInputSura}\n          refInput={refInputSura}\n        />\n      </div>\n      <div className=\"meta\">\n        <DateInput\n          required={true}\n          dataId=\"date\"\n          label=<FormattedMessage\n            id=\"dOWriting\"\n            defaultMessage=\"Fatwa was written in\"\n          />\n          max={new Date()}\n          onChange={(target) => {\n            SS.set(\"ansFatwa-date\", target.value);\n          }}\n          defaultValue={SS.get(\"ansFatwa-date\")}\n          validationMessage=<FormattedMessage\n            id=\"dOWritingValidation\"\n            defaultMessage=\"When was the fatwa written originally?\"\n          />\n        />\n        <Input\n          min={5}\n          required={true}\n          defaultValue={SS.get(\"ansFatwa-write\")}\n          dataId=\"write\"\n          onChange={(target) => {\n            SS.set(\"ansFatwa-write\", target.value);\n            setSameExists(false);\n          }}\n          label=<FormattedMessage id=\"write\" defaultMessage=\"Write\" />\n          validationMessage=<FormattedMessage\n            id=\"writeValidation\"\n            defaultMessage=\"who wrote the fatwa\"\n          />\n        />\n        <Input\n          min={5}\n          required={true}\n          validationMessage=\"test\"\n          defaultValue={SS.get(\"ansFatwa-atts\")}\n          dataId=\"write\"\n          onChange={(target) => {\n            SS.set(\"ansFatwa-atts\", target.value);\n            setSameExists(false);\n          }}\n          label=<FormattedMessage id=\"atts\" defaultMessage=\"Attestation\" />\n          validationMessage=<FormattedMessage\n            id=\"attsValidation\"\n            defaultMessage=\"who attestated the fatwa\"\n          />\n        />\n      </div>\n      <Submit\n        label=<FormattedMessage id=\"submit\" defaultMessage=\"Submit\" />\n        loading={loading}\n        setLoading={setLoading}\n      />\n      <section className=\"bottomPadding\" />\n    </form>\n  );\n};\nexport const UserQuestionReportForm = ({ _id }) => {\n  const [loading, setLoading] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [sub, setSub] = useState(\"\");\n  const [msg, setMsg] = useState(\"\");\n  const history = useHistory();\n  function submit(e) {\n    e.preventDefault();\n    setLoading(true);\n    const options = {\n      method: \"POST\",\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify({ subject: sub, message: msg }),\n    };\n    fetch(`/api/source/reportUserQues/${_id}`, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setSuccess(true);\n        } else {\n          alert(\"something went wrong\");\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n        alert(\"something went wrong\");\n      });\n  }\n  function redirect() {\n    success && history.goBack();\n  }\n  useEffect(redirect, [success]);\n  return (\n    <form className=\"reportUserQues\" onSubmit={submit}>\n      <h2>Report</h2>\n      <Input\n        label=\"Subject\"\n        min={5}\n        onChange={(target) => setSub(target.value)}\n        validationMessage=<FormattedMessage id=\"userQuesReportSubValidation\" />\n        required={true}\n      />\n      <Textarea\n        label=\"Message\"\n        onChange={(target) => setMsg(target.value)}\n        min={10}\n        max={300}\n        validationMessage=<FormattedMessage id=\"userQuesReportMsgValidation\" />\n        required={true}\n      />\n      <Submit\n        label=<FormattedMessage id=\"submit\" defaultMessage=\"Submit\" />\n        loading={loading}\n        setLoading={setLoading}\n      />\n    </form>\n  );\n};\n\nexport const DataEditForm = ({\n  Element,\n  defaultValue,\n  validation,\n  max,\n  tel,\n  api,\n  fieldCode,\n}) => {\n  const form = useRef();\n  const [edit, setEdit] = useState(false);\n  const [newValue, setNewValue] = useState(defaultValue);\n  function cancel() {\n    if (newValue !== defaultValue) {\n      if (window.confirm(\"Discard Changes?\")) {\n        setNewValue(defaultValue);\n        setEdit(false);\n      }\n    } else {\n      setEdit(false);\n    }\n  }\n  function save(e) {\n    e.preventDefault();\n    if (newValue === defaultValue) {\n      setEdit(false);\n      // form.current.querySelector(\"input\").blur();\n    } else {\n      fetch(api, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ [fieldCode]: newValue }),\n      })\n        .then((res) => {\n          if (res.status === 200) {\n            (\n              form.current.querySelector(\"input\") ||\n              form.current.querySelector(\"textarea\")\n            ).blur();\n            setEdit(false);\n          } else {\n            alert(\"Something went wrong!\");\n          }\n        })\n        .catch((err) => console.log(err));\n    }\n  }\n  return (\n    <form ref={form} className={edit ? \"edit\" : \"\"} onSubmit={save}>\n      {tel && !edit && (\n        <a href={`tel:${newValue}`}>{newValue.replace(\"+88\", \"\")}</a>\n      )}\n      {(!tel || (tel && edit)) && (\n        <Element\n          required={true}\n          type=\"text\"\n          defaultValue={newValue}\n          pattern={validation}\n          max={max}\n          onChange={(target) => setNewValue(target.value)}\n        />\n      )}\n      {!edit && (\n        <ion-icon\n          onClick={() => setEdit(true)}\n          name=\"create-outline\"\n        ></ion-icon>\n      )}\n      {edit && (\n        <>\n          <button type=\"submit\">\n            <ion-icon name=\"save-outline\"></ion-icon>\n          </button>\n          <button type=\"button\" onClick={cancel}>\n            <ion-icon name=\"close-outline\"></ion-icon>\n          </button>\n        </>\n      )}\n    </form>\n  );\n};\nexport const PasswordEditForm = ({ api }) => {\n  const form = useRef();\n  const [edit, setEdit] = useState(false);\n  const [pass, setPass] = useState({ oldPass: \"\", newPass: \"\", confirm: \"\" });\n  function setPassword(pass, value) {\n    setPass((prev) => {\n      const newSet = { ...prev };\n      newSet[pass] = value;\n      return newSet;\n    });\n  }\n  function save(e) {\n    e.preventDefault();\n    if (pass.newPass === pass.confirm) {\n      fetch(api, {\n        method: \"PATCH\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(pass),\n      })\n        .then((res) => {\n          if (res.status === 200) {\n            setEdit(false);\n            form.current.querySelector(\"input\").blur();\n          } else {\n            alert(\"Something went wrong!\");\n          }\n          return res.json();\n        })\n        .then((data) => console.log(data));\n    } else {\n      alert(\"password did not match\");\n    }\n  }\n  return (\n    <form\n      ref={form}\n      className={`password ${edit ? \"edit\" : \"\"}`}\n      onSubmit={save}\n    >\n      {!edit ? (\n        <Input type=\"text\" defaultValue=\"••••••••\" />\n      ) : (\n        <section>\n          <PasswordInput\n            placeholder=\"Old password\"\n            match=\".reg #confirmPass input\"\n            dataId=\"oldPass\"\n            onChange={(target) => setPassword(\"oldPass\", target.value)}\n          />\n          <PasswordInput\n            placeholder=\"New password\"\n            match=\".data #confirmPass input\"\n            passwordStrength={true}\n            dataId=\"pass\"\n            onChange={(target) => setPassword(\"newPass\", target.value)}\n          />\n          <PasswordInput\n            placeholder=\"Confirm password\"\n            match=\".data #pass input\"\n            dataId=\"confirmPass\"\n            onChange={(target) => setPassword(\"confirm\", target.value)}\n          />\n        </section>\n      )}\n      {!edit && (\n        <ion-icon\n          onClick={() => setEdit(true)}\n          name=\"create-outline\"\n        ></ion-icon>\n      )}\n      {edit && (\n        <>\n          <button type=\"submit\">\n            <ion-icon name=\"save-outline\"></ion-icon>\n          </button>\n          <button type=\"button\" onClick={() => setEdit(false)}>\n            <ion-icon name=\"close-outline\"></ion-icon>\n          </button>\n        </>\n      )}\n    </form>\n  );\n};\n\nexport const Report = ({ fatwa, close }) => {\n  const [loading, setLoading] = useState(false);\n  const [emailReq, setEmailReq] = useState(false);\n  function submit(e) {\n    e.preventDefault();\n    setLoading(true);\n    fetch(\"/api/reportFatwa\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        fatwa: fatwa._id,\n        source: fatwa.source._id,\n        user: {\n          name: SS.get(\"reportFatwa-name\"),\n          email: SS.get(\"reportFatwa-email\"),\n          mob: SS.get(\"reportFatwa-mobile\"),\n        },\n        message: {\n          subject: SS.get(\"reportFatwa-subject\"),\n          body: SS.get(\"reportFatwa-message\"),\n        },\n      }),\n    }).then((res) => {\n      setLoading(false);\n      if (res.status === 200) {\n        close(false);\n        SS.remove(\"reportFatwa-name\");\n        SS.remove(\"reportFatwa-email\");\n        SS.remove(\"reportFatwa-mobile\");\n        SS.remove(\"reportFatwa-subject\");\n        SS.remove(\"reportFatwa-message\");\n      } else {\n        alert(\"something went wrong\");\n      }\n    });\n  }\n  return (\n    <div className=\"userReportContainer\">\n      <ion-icon\n        onClick={() => close(false)}\n        class=\"close\"\n        name=\"close-outline\"\n      ></ion-icon>\n      <form onSubmit={submit} className=\"userReport\">\n        <section className=\"head\">\n          <h2>\n            <FormattedMessage id=\"report\" defaultMessage=\"Report\" />\n          </h2>\n          <p className=\"ps\">\n            <FormattedMessage id=\"reportPs\" />\n          </p>\n        </section>\n        <Input\n          required={true}\n          label=<FormattedMessage id=\"fullName\" defaultMessage=\"Full name\" />\n          dataId=\"name\"\n          strict={/^[ঀ-৾a-zA-Z\\s(),]+$/}\n          defaultValue={SS.get(\"reportFatwa-name\")}\n          onChange={(target) => {\n            SS.set(\"reportFatwa-name\", target.value);\n          }}\n          validationMessage=<FormattedMessage\n            id=\"fullNameValidation\"\n            defaultMessage=\"Enter your full name\"\n          />\n        />\n        <Input\n          required={emailReq}\n          label={\n            <>\n              <FormattedMessage id=\"email\" defaultMessage=\"Email\" />{\" \"}\n              <small>\n                (<FormattedMessage id=\"optional\" />)\n              </small>\n            </>\n          }\n          dataId=\"email\"\n          type=\"text\"\n          pattern=\"^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$\"\n          defaultValue={SS.get(\"reportFatwa-email\")}\n          validationMessage=<FormattedMessage\n            id=\"optionalEmailValidation\"\n            defaultMessage=\"Enter currect email\"\n          />\n          onChange={(target) => {\n            SS.set(\"reportFatwa-email\", target.value);\n            if (target.value === \"\") {\n              setEmailReq(false);\n            } else {\n              setEmailReq(true);\n            }\n          }}\n        />\n        <Mobile\n          required={true}\n          label=<FormattedMessage id=\"mobile\" defaultMessage=\"Mobile\" />\n          dataId=\"mobile\"\n          defaultValue={SS.get(\"reportFatwa-mobile\")}\n          onChange={(target) => {\n            SS.set(\"reportFatwa-mobile\", target.value);\n          }}\n          validationMessage=<FormattedMessage id=\"contactValidation\" />\n        />\n        <Input\n          required={true}\n          label=<FormattedMessage id=\"subject\" defaultMessage=\"Subject\" />\n          validationMessage=<FormattedMessage\n            id=\"subjectValidation\"\n            defaultMessage=\"Enter Subject\"\n          />\n          pattern=\".{8,}\"\n          dataId=\"subject\"\n          defaultValue={SS.get(\"reportFatwa-subject\")}\n          onChange={(target) => {\n            SS.set(\"reportFatwa-subject\", target.value);\n          }}\n        />\n        <Textarea\n          required={true}\n          label=<FormattedMessage id=\"message\" defaultMessage=\"Message\" />\n          dataId=\"message\"\n          validationMessage=<FormattedMessage\n            id=\"messageValidation\"\n            defaultMessage=\"Enter messages\"\n          />\n          pattern=\".{15,}\"\n          defaultValue={SS.get(\"reportFatwa-message\")}\n          onChange={(target) => {\n            SS.set(\"reportFatwa-message\", target.value);\n          }}\n        />\n        <Submit\n          loading={loading}\n          label=<FormattedMessage id=\"report\" defaultMessage=\"Report\" />\n        />\n        <section className=\"bottomPadding\" />\n      </form>\n    </div>\n  );\n};\n","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\AdminPanel.js",["111","112","113"],"import React, { useState, useContext, useRef, useEffect } from \"react\";\nimport { Link, Route, Switch, useHistory } from \"react-router-dom\";\nimport { SiteContext } from \"../Context.js\";\nimport \"./CSS/AdminPanel.min.css\";\nimport {\n  Input,\n  Textarea,\n  Combobox,\n  topics,\n  Submit,\n  ID,\n  SS,\n} from \"./FormElements\";\nimport { DataEditForm, PasswordEditForm } from \"./Forms\";\nimport { Tabs, Sidebar, View, Actions, LoadingPost } from \"./TableElements\";\nimport {\n  FormattedDate,\n  FormattedNumber,\n  FormattedMessage,\n  FormattedTimeParts,\n  injectIntl,\n} from \"react-intl\";\nimport FourOFour from \"./FourOFour\";\n\nconst encodeURL = (obj) =>\n  Object.keys(obj)\n    .map((key) => `${key}=${obj[key]}`)\n    .join(\"&\");\n\nfunction AllSources() {\n  return (\n    <div className=\"view\">\n      <h1 className=\"viewTitle\">\n        <FormattedMessage id=\"source\" defaultMessage=\"Source\" />\n      </h1>\n      <Tabs\n        page=\"/admin/sources/\"\n        tabs={[\n          {\n            label: <FormattedMessage id=\"active\" defaultMessage=\"Active\" />,\n            link: \"active\",\n          },\n          {\n            label: <FormattedMessage id=\"pending\" defaultMessage=\"Pending\" />,\n            link: \"Submissions\",\n          },\n        ]}\n      />\n      <Switch>\n        <Route path=\"/admin/sources\" exact>\n          <View\n            key=\"allJamia\"\n            Element={SingleJamia}\n            defaultSort={{ column: \"joined\", order: \"des\" }}\n            id=\"allJamia\"\n            api=\"api/admin/sources/active/filter?\"\n            categories={[\n              {\n                name: \"role\",\n                bridge: \"is\",\n                input: (\n                  <Combobox\n                    label=<FormattedMessage id=\"type\" defaultMessage=\"Type\" />\n                    options={[\n                      { label: \"Jamia\", value: \"jamia\" },\n                      { label: \"Mufti\", value: \"mufti\" },\n                    ]}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              {\n                column: <FormattedMessage id=\"id\" defaultMessage=\"Id\" />,\n                sort: false,\n                colCode: \"id\",\n              },\n              {\n                column: <FormattedMessage id=\"type\" defaultMessage=\"Type\" />,\n                sort: true,\n                colCode: \"role\",\n              },\n              {\n                column: <FormattedMessage id=\"name\" defaultMessage=\"Name\" />,\n                sort: false,\n                colCode: \"name\",\n              },\n              {\n                column: (\n                  <FormattedMessage\n                    id=\"primeMufti\"\n                    defaultMessage=\"Prime Mufti\"\n                  />\n                ),\n                sort: false,\n                colCode: \"primeMufti\",\n              },\n              {\n                column: (\n                  <FormattedMessage id=\"joined\" defaultMessage=\"Joined\" />\n                ),\n                sort: true,\n                colCode: \"joined\",\n              },\n              {\n                column: <FormattedMessage id=\"fatwa\" defaultMessage=\"Fatwa\" />,\n                sort: true,\n                colCode: \"fatwa\",\n              },\n              {\n                column: (\n                  <FormattedMessage id=\"contact\" defaultMessage=\"Contact\" />\n                ),\n                sort: false,\n                colCode: \"contact\",\n              },\n            ]}\n          />\n        </Route>\n        <Route path=\"/admin/sources/active\">\n          <View\n            key=\"allJamia\"\n            Element={SingleJamia}\n            defaultSort={{ column: \"joined\", order: \"des\" }}\n            id=\"allJamia\"\n            api=\"api/admin/sources/active/filter?\"\n            categories={[\n              {\n                name: \"role\",\n                bridge: \"is\",\n                input: (\n                  <Combobox\n                    label=<FormattedMessage id=\"type\" defaultMessage=\"Type\" />\n                    options={[\n                      { label: \"Jamia\", value: \"jamia\" },\n                      { label: \"Mufti\", value: \"mufti\" },\n                    ]}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              {\n                column: <FormattedMessage id=\"id\" defaultMessage=\"Id\" />,\n                sort: false,\n                colCode: \"id\",\n              },\n              {\n                column: <FormattedMessage id=\"type\" defaultMessage=\"Type\" />,\n                sort: true,\n                colCode: \"role\",\n              },\n              {\n                column: <FormattedMessage id=\"name\" defaultMessage=\"Name\" />,\n                sort: false,\n                colCode: \"name\",\n              },\n              {\n                column: (\n                  <FormattedMessage\n                    id=\"primeMufti\"\n                    defaultMessage=\"Prime Mufti\"\n                  />\n                ),\n                sort: false,\n                colCode: \"primeMufti\",\n              },\n              {\n                column: (\n                  <FormattedMessage id=\"joined\" defaultMessage=\"Joined\" />\n                ),\n                sort: true,\n                colCode: \"joined\",\n              },\n              {\n                column: <FormattedMessage id=\"fatwa\" defaultMessage=\"Fatwa\" />,\n                sort: true,\n                colCode: \"fatwa\",\n              },\n              {\n                column: (\n                  <FormattedMessage id=\"contact\" defaultMessage=\"Contact\" />\n                ),\n                sort: false,\n                colCode: \"contact\",\n              },\n            ]}\n          />\n        </Route>\n        <Route path=\"/admin/sources/submissions\">\n          <View\n            key=\"allSourceSubmissions\"\n            Element={SingleSourceSubmission}\n            defaultSort={{ column: \"joined\", order: \"des\" }}\n            id=\"jamiaSubmissions\"\n            api=\"api/admin/sources/submissions/filter?\"\n            categories={[\n              {\n                name: \"role\",\n                input: (\n                  <Combobox\n                    label=<FormattedMessage id=\"type\" defaultMessage=\"Type\" />\n                    options={[\n                      { label: \"jamia\", value: \"jamia\" },\n                      { label: \"mufti\", value: \"mufti\" },\n                    ]}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              {\n                column: <FormattedMessage id=\"date\" defaultMessage=\"Date\" />,\n                sort: true,\n                colCode: \"joined\",\n              },\n              {\n                column: <FormattedMessage id=\"name\" defaultMessage=\"Name\" />,\n                sort: false,\n                colCode: \"name\",\n              },\n              {\n                column: <FormattedMessage id=\"type\" defaultMessage=\"Type\" />,\n                sort: true,\n                colCode: \"role\",\n              },\n              {\n                column: (\n                  <FormattedMessage\n                    id=\"primeMufti\"\n                    defaultMessage=\"primeMufti\"\n                  />\n                ),\n                sort: false,\n                colCode: \"primeMufti\",\n              },\n              {\n                column: (\n                  <FormattedMessage id=\"contact\" defaultMessage=\"Contact\" />\n                ),\n                sort: false,\n                colCode: \"contact\",\n              },\n            ]}\n          />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\nfunction SingleSourceSubmission({ data, setData }) {\n  const jamia = data;\n  const { locale } = useContext(SiteContext);\n  const [showFull, setShowFull] = useState(false);\n  const [loading, setLoading] = useState(false);\n  function accept() {\n    setLoading(true);\n    fetch(`/api/admin/source/accept`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ _id: jamia._id }),\n    })\n      .then((res) => {\n        setLoading(false);\n        if (res.status === 200) {\n          setData((prev) => {\n            return prev.filter((submissions) => submissions._id !== jamia._id);\n          });\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n  function reject() {\n    setLoading(true);\n    fetch(`/api/admin/source/reject`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ _id: jamia._id }),\n    })\n      .then((res) => {\n        setLoading(false);\n        if (res.status === 200) {\n          setData((prev) => {\n            return prev.filter((submissions) => submissions._id !== jamia._id);\n          });\n        }\n      })\n      .catch((err) => console.log(err));\n  }\n  return !showFull ? (\n    <tr onClick={() => (showFull ? setShowFull(false) : setShowFull(true))}>\n      <td>\n        <FormattedDate\n          value={new Date(jamia.joined)}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td>\n        {jamia.name[locale]}\n        <span>{jamia.address}</span>\n      </td>\n      <td>{jamia.role}</td>\n      <td>{jamia.primeMufti[locale]}</td>\n      <td>\n        <a href={`tel:${jamia.contact}`}>{jamia.contact.replace(\"+88\", \"\")}</a>\n      </td>\n    </tr>\n  ) : (\n    <tr className=\"full\">\n      <td className=\"label\">Submitted</td>\n      <td className=\"data\">\n        <FormattedDate\n          value={new Date(jamia.joined)}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td className=\"label\">ID</td>\n      <td className=\"data\">{jamia.id}</td>\n      <td className=\"label\">Name</td>\n      <td className=\"data\">{jamia.name[locale]}</td>\n      <td className=\"label\">Prime Mufti</td>\n      <td className=\"data\">{jamia.primeMufti[locale]}</td>\n      <td className=\"label\">Address</td>\n      <td className=\"data\">{jamia.address}</td>\n      <td className=\"label\">Contact</td>\n      <td className=\"data\">\n        <a href={`tel:${jamia.contact}`}>{jamia.contact.replace(\"+88\", \"\")}</a>\n      </td>\n      <td className=\"label\">Applicant's Name</td>\n      <td className=\"data\">{jamia.appl.name}</td>\n      <td className=\"label\">Applicant's designation</td>\n      <td className=\"data\">{jamia.appl.designation}</td>\n      <td className=\"label\">Applicant's mobile</td>\n      <td className=\"data\">\n        <a href={`tel:${jamia.appl.mob}`}>\n          {jamia.appl.mob.replace(\"+88\", \"\")}\n        </a>\n      </td>\n      <td className=\"data btns\">\n        <Submit\n          loading={loading}\n          onClick={accept}\n          label={\n            <>\n              <ion-icon name=\"checkmark-outline\"></ion-icon> Accept\n            </>\n          }\n        />\n        <Submit\n          loading={loading}\n          onClick={reject}\n          label={\n            <>\n              <ion-icon name=\"close-outline\"></ion-icon> Reject\n            </>\n          }\n        />\n      </td>\n    </tr>\n  );\n}\nfunction SingleJamia({ data, setData }) {\n  const jamia = data;\n  const { locale } = useContext(SiteContext);\n  const [loading, setLoading] = useState(false);\n  const [showFull, setShowFull] = useState(false);\n  function ghost(_id) {\n    console.log(_id);\n  }\n  function remove() {\n    setLoading(true);\n    if (window.confirm(\"You want to delete this jamia\")) {\n      fetch(`/api/admin/source/`, {\n        method: \"DELETE\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ _id: jamia._id }),\n      })\n        .then((res) => {\n          setLoading(false);\n          if (res.status === 200) {\n            setData((prev) => {\n              return prev.filter((item) => item._id !== jamia._id);\n            });\n          } else {\n            alert(\"something went wrong\");\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n          alert(\"something went wrong\");\n        });\n    }\n  }\n  const patchApi = `/api/admin/jamia/edit/${jamia._id}`;\n  return !showFull ? (\n    <tr onClick={() => setShowFull(true)}>\n      <td className=\"jamiaId\">{jamia.id}</td>\n      <td className=\"jamiaType\">{jamia.role}</td>\n      <td className=\"jamiaName\">\n        {jamia.name[locale]}\n        <span>{jamia.address}</span>\n      </td>\n      <td className=\"jamiaPrimeMufti\">{jamia.primeMufti[locale]}</td>\n      <td className=\"jamiaJoined\">\n        <FormattedDate\n          value={new Date(jamia.joined)}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td className=\"jamiaFatwaCount\">\n        <FormattedNumber value={new Date(jamia.fatwa)} />\n      </td>\n      <td className=\"jamiaContact\">\n        <a title=\"Call Jamia\" href={`tel:${jamia.contact}`}>\n          {jamia.contact.replace(\"+88\", \"\")}\n        </a>\n      </td>\n    </tr>\n  ) : (\n    <tr className=\"full\">\n      <td className=\"label\">Joined</td>\n      <td className=\"data\">\n        <FormattedDate\n          value={new Date(jamia.joined)}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td className=\"label\">Fatwa</td>\n      <td className=\"data\">\n        <FormattedNumber value={jamia.fatwa} />\n      </td>\n      <td className=\"label\">ID</td>\n      <td className=\"data\">{jamia.id}</td>\n      <td className=\"label\">Password</td>\n      <td className=\"data\">\n        <PasswordEditForm api={patchApi} />\n      </td>\n      <td className=\"label\">Name (Bangla)</td>\n      <td className=\"data\">\n        <DataEditForm\n          api={patchApi}\n          defaultValue={jamia.name[\"bn-BD\"]}\n          Element={Input}\n          pattern={/^[ঀ-৾\\s(),]+$/}\n          fieldCode=\"name.bn-BD\"\n        />\n      </td>\n      <td className=\"label\">Name (Enlish)</td>\n      <td className=\"data\">\n        <DataEditForm\n          api={patchApi}\n          defaultValue={jamia.name[\"en-US\"]}\n          Element={Input}\n          pattern={/^[a-zA-Z\\s(),]+$/}\n          fieldCode=\"name.en-US\"\n        />\n      </td>\n      <td className=\"label\">Prime Mufti (Bangla)</td>\n      <td className=\"data\">\n        <DataEditForm\n          defaultValue={jamia.primeMufti[\"bn-BD\"]}\n          Element={Input}\n          max={200}\n          fieldCode=\"primeMufti.bn-BD\"\n          api={patchApi}\n        />\n      </td>\n      <td className=\"label\">Prime Mufti (English)</td>\n      <td className=\"data\">\n        <DataEditForm\n          defaultValue={jamia.primeMufti[\"en-US\"]}\n          Element={Input}\n          max={200}\n          fieldCode=\"primeMufti.en-US\"\n          api={patchApi}\n        />\n      </td>\n      <td className=\"label\">Founder</td>\n      <td className=\"data\">\n        <DataEditForm\n          defaultValue={jamia.founder}\n          Element={Textarea}\n          max={200}\n          fieldCode=\"founder\"\n          api={patchApi}\n        />\n      </td>\n      <td className=\"label\">Address</td>\n      <td className=\"data\">\n        <DataEditForm\n          defaultValue={jamia.address}\n          Element={Textarea}\n          max={200}\n          fieldCode=\"address\"\n          api={patchApi}\n        />\n      </td>\n      <td className=\"label\">Contact</td>\n      <td className=\"data\">\n        <DataEditForm\n          defaultValue={jamia.contact}\n          Element={Input}\n          pattern={/^\\+8801\\d{0,9}$/}\n          tel={true}\n          fieldCode=\"contact\"\n          api={patchApi}\n        />\n      </td>\n      <td className=\"label\">About</td>\n      <td className=\"data\">\n        <DataEditForm\n          defaultValue={jamia.about}\n          Element={Textarea}\n          pattern={/^[ঀ-ৣৰ-৾a-zA-Z\\s(),-]+$/}\n          fieldCode=\"about\"\n          api={patchApi}\n        />\n      </td>\n      <td className=\"label\">Applicant's Name</td>\n      <td className=\"data\">\n        <DataEditForm\n          defaultValue={jamia.appl.name}\n          Element={Input}\n          pattern={/^[ঀ-ৣৰ-৾a-zA-Z\\s(),-]+$/}\n          fieldCode=\"appl.name\"\n          api={patchApi}\n        />\n      </td>\n      <td className=\"label\">Applicant's designation</td>\n      <td className=\"data\">\n        <DataEditForm\n          defaultValue={jamia.appl.designation}\n          Element={Input}\n          pattern={/^[ঀ-ৣৰ-৾a-zA-Z\\s(),-]+$/}\n          fieldCode=\"appl.designation\"\n          api={patchApi}\n        />\n      </td>\n      <td className=\"label\">Applicant's mobile</td>\n      <td className=\"data\">\n        <DataEditForm\n          defaultValue={jamia.appl.mob}\n          Element={Input}\n          pattern={/^\\+8801\\d{0,9}$/}\n          tel={true}\n          fieldCode=\"appl.mob\"\n          api={patchApi}\n        />\n      </td>\n      <td className=\"data btns\">\n        <Submit\n          loading={loading}\n          onClick={ghost}\n          label={\n            <>\n              <ion-icon name=\"skull-outline\"></ion-icon> Ghost\n            </>\n          }\n        />\n        <button className=\"hideDetail\" onClick={() => setShowFull(false)}>\n          <ion-icon name=\"chevron-up-outline\"></ion-icon>Hide Detail\n        </button>\n        <Submit\n          loading={loading}\n          onClick={remove}\n          label={\n            <>\n              <ion-icon name=\"trash-outline\"></ion-icon> Remove\n            </>\n          }\n        />\n      </td>\n    </tr>\n  );\n}\n\nconst AllFatwa = injectIntl(({ history, location, match, intl }) => {\n  const { locale } = useContext(SiteContext);\n  return (\n    <div className=\"view\">\n      <h1 className=\"viewTitle\">\n        <FormattedMessage id=\"fatwa\" defaultMessage=\"Fatwa\" />\n      </h1>\n      <Tabs\n        page=\"/admin/fatwa/\"\n        tabs={[\n          {\n            label: <FormattedMessage id=\"live\" defaultMessage=\"Live\" />,\n            link: \"live\",\n          },\n          {\n            label: <FormattedMessage id=\"pending\" defaultMessage=\"pending\" />,\n            link: \"pending\",\n          },\n        ]}\n      />\n      <Switch>\n        <Route path=\"/admin/fatwa\" exact>\n          <View\n            key=\"allFatwa\"\n            Element={SingleFatwa}\n            id=\"allFatwa\"\n            api=\"api/admin/allfatwa/filter?\"\n            categories={[\n              {\n                default: true,\n                fieldName: \"title\",\n                name: intl.formatMessage({\n                  id: \"title\",\n                  defaultMessage: \"Title\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"titleChip\",\n                  defaultMessage: \"Title contains:\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"titleChip\"\n                      defaultMessage=\"Title contains:\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"topic\",\n                name: intl.formatMessage({\n                  id: \"topic\",\n                  defaultMessage: \"Topic\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"topicChip\",\n                  defaultMessage: \"Topic is\",\n                }),\n                input: (\n                  <Combobox\n                    id={ID(8)}\n                    maxHeight={300}\n                    label=<FormattedMessage\n                      id=\"topicChip\"\n                      defaultMessage=\"topic is\"\n                    />\n                    options={topics.map((option) => {\n                      return {\n                        label: option[locale],\n                        value: option,\n                      };\n                    })}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ques\",\n                name: intl.formatMessage({\n                  id: \"question\",\n                  defaultMessage: \"Question\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"quesChip\",\n                  defaultMessage: \"Question contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"quesChip\"\n                      defaultMessage=\"Question contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ans\",\n                name: intl.formatMessage({\n                  id: \"answer\",\n                  defaultMessage: \"Answer\",\n                }),\n                display: intl.formatMessage({\n                  id: \"ansChip\",\n                  defaultMessage: \"Answer contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"ansChip\"\n                      defaultMessage=\"Answer contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"translation\",\n                name: intl.formatMessage({\n                  id: \"translation\",\n                  defaultMessage: \"Translation\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"translationChip\",\n                  defaultMessage: \"Translation:\",\n                }),\n                input: (\n                  <Combobox\n                    maxHeight={500}\n                    label=<FormattedMessage\n                      id=\"translation\"\n                      defaultMessage=\"Translation:\"\n                    />\n                    options={[\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationAuto\",\n                          defaultMessage: \"Auto\",\n                        }),\n                        value: \"generated\",\n                      },\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationManual\",\n                          defaultMessage: \"Manual\",\n                        }),\n                        value: \"manual\",\n                      },\n                    ]}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              {\n                column: (\n                  <FormattedMessage id=\"source\" defaultMessage=\"Source\" />\n                ),\n                sort: true,\n                colCode: \"source\",\n              },\n              {\n                column: <FormattedMessage id=\"topic\" defaultMessage=\"Topic\" />,\n                sort: true,\n                colCode: \"topic\",\n              },\n              {\n                column: (\n                  <FormattedMessage\n                    id=\"translation\"\n                    defaultMessage=\"Translation\"\n                  />\n                ),\n                sort: true,\n                colCode: \"translation\",\n              },\n              {\n                column: <FormattedMessage id=\"date\" defaultMessage=\"Date\" />,\n                sort: true,\n                colCode: \"createdAt\",\n              },\n              {\n                column: <FormattedMessage id=\"title\" defaultMessage=\"Title\" />,\n                sort: false,\n                colCode: \"title\",\n              },\n            ]}\n            defaultSort={{ column: \"createdAt\", order: \"des\" }}\n          />\n        </Route>\n        <Route path=\"/admin/fatwa/live\">\n          <View\n            key=\"allFatwa\"\n            Element={SingleFatwa}\n            id=\"allFatwa\"\n            api=\"api/admin/allfatwa/filter?\"\n            categories={[\n              {\n                default: true,\n                fieldName: \"title\",\n                name: intl.formatMessage({\n                  id: \"title\",\n                  defaultMessage: \"Title\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"titleChip\",\n                  defaultMessage: \"Title contains:\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"titleChip\"\n                      defaultMessage=\"Title contains:\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"topic\",\n                name: intl.formatMessage({\n                  id: \"topic\",\n                  defaultMessage: \"Topic\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"topicChip\",\n                  defaultMessage: \"Topic is\",\n                }),\n                input: (\n                  <Combobox\n                    id={ID(8)}\n                    maxHeight={300}\n                    label=<FormattedMessage\n                      id=\"topicChip\"\n                      defaultMessage=\"topic is\"\n                    />\n                    options={topics.map((option) => {\n                      return {\n                        label: option[locale],\n                        value: option,\n                      };\n                    })}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ques\",\n                name: intl.formatMessage({\n                  id: \"question\",\n                  defaultMessage: \"Question\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"quesChip\",\n                  defaultMessage: \"Question contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"quesChip\"\n                      defaultMessage=\"Question contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ans\",\n                name: intl.formatMessage({\n                  id: \"answer\",\n                  defaultMessage: \"Answer\",\n                }),\n                display: intl.formatMessage({\n                  id: \"ansChip\",\n                  defaultMessage: \"Answer contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"ansChip\"\n                      defaultMessage=\"Answer contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"translation\",\n                name: intl.formatMessage({\n                  id: \"translation\",\n                  defaultMessage: \"Translation\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"translationChip\",\n                  defaultMessage: \"Translation:\",\n                }),\n                input: (\n                  <Combobox\n                    maxHeight={500}\n                    label=<FormattedMessage\n                      id=\"translation\"\n                      defaultMessage=\"Translation:\"\n                    />\n                    options={[\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationAuto\",\n                          defaultMessage: \"Auto\",\n                        }),\n                        value: \"generated\",\n                      },\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationManual\",\n                          defaultMessage: \"Manual\",\n                        }),\n                        value: \"manual\",\n                      },\n                    ]}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              {\n                column: (\n                  <FormattedMessage id=\"source\" defaultMessage=\"Source\" />\n                ),\n                sort: true,\n                colCode: \"source\",\n              },\n              {\n                column: <FormattedMessage id=\"topic\" defaultMessage=\"Topic\" />,\n                sort: true,\n                colCode: \"topic\",\n              },\n              {\n                column: (\n                  <FormattedMessage\n                    id=\"translation\"\n                    defaultMessage=\"Translation\"\n                  />\n                ),\n                sort: true,\n                colCode: \"translation\",\n              },\n              {\n                column: <FormattedMessage id=\"date\" defaultMessage=\"Date\" />,\n                sort: true,\n                colCode: \"createdAt\",\n              },\n              {\n                column: <FormattedMessage id=\"title\" defaultMessage=\"Title\" />,\n                sort: false,\n                colCode: \"title\",\n              },\n            ]}\n            defaultSort={{ column: \"createdAt\", order: \"des\" }}\n          />\n        </Route>\n        <Route path=\"/admin/fatwa/pending\">\n          <View\n            key=\"allFatwaSubmission\"\n            Element={SingleFatwaSubmission}\n            id=\"fatwaSubmissions\"\n            api=\"api/admin/fatwaSubmissions/filter?\"\n            categories={[\n              {\n                default: true,\n                fieldName: \"title\",\n                name: intl.formatMessage({\n                  id: \"title\",\n                  defaultMessage: \"Title\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"titleChip\",\n                  defaultMessage: \"Title contains:\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"titleChip\"\n                      defaultMessage=\"Title contains:\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"topic\",\n                name: intl.formatMessage({\n                  id: \"topic\",\n                  defaultMessage: \"Topic\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"topicChip\",\n                  defaultMessage: \"Topic is\",\n                }),\n                input: (\n                  <Combobox\n                    id={ID(8)}\n                    maxHeight={300}\n                    label=<FormattedMessage\n                      id=\"topicChip\"\n                      defaultMessage=\"topic is\"\n                    />\n                    options={topics.map((option) => {\n                      return {\n                        label: option[locale],\n                        value: option,\n                      };\n                    })}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ques\",\n                name: intl.formatMessage({\n                  id: \"question\",\n                  defaultMessage: \"Question\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"quesChip\",\n                  defaultMessage: \"Question contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"quesChip\"\n                      defaultMessage=\"Question contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"ans\",\n                name: intl.formatMessage({\n                  id: \"answer\",\n                  defaultMessage: \"Answer\",\n                }),\n                display: intl.formatMessage({\n                  id: \"ansChip\",\n                  defaultMessage: \"Answer contains\",\n                }),\n                input: (\n                  <Input\n                    autoFocus={true}\n                    label=<FormattedMessage\n                      id=\"ansChip\"\n                      defaultMessage=\"Answer contains\"\n                    />\n                    required={true}\n                  />\n                ),\n              },\n              {\n                fieldName: \"translation\",\n                name: intl.formatMessage({\n                  id: \"translation\",\n                  defaultMessage: \"Translation\",\n                }),\n                chip: intl.formatMessage({\n                  id: \"translationChip\",\n                  defaultMessage: \"Translation:\",\n                }),\n                input: (\n                  <Combobox\n                    maxHeight={500}\n                    label=<FormattedMessage\n                      id=\"translation\"\n                      defaultMessage=\"Translation:\"\n                    />\n                    options={[\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationAuto\",\n                          defaultMessage: \"Auto\",\n                        }),\n                        value: \"generated\",\n                      },\n                      {\n                        label: intl.formatMessage({\n                          id: \"translationManual\",\n                          defaultMessage: \"Manual\",\n                        }),\n                        value: \"manual\",\n                      },\n                    ]}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              {\n                column: <FormattedMessage id=\"date\" defaultMessage=\"Date\" />,\n                sort: true,\n                colCode: \"createdAt\",\n              },\n              {\n                column: <FormattedMessage id=\"topic\" defaultMessage=\"Topic\" />,\n                sort: true,\n                colCode: \"topic\",\n              },\n              {\n                column: (\n                  <FormattedMessage id=\"source\" defaultMessage=\"Source\" />\n                ),\n                sort: true,\n                colCode: \"jamia\",\n              },\n              {\n                column: <FormattedMessage id=\"title\" defaultMessage=\"Title\" />,\n                sort: false,\n              },\n            ]}\n            defaultSort={{ column: \"createdAt\", order: \"des\" }}\n          />\n        </Route>\n      </Switch>\n    </div>\n  );\n});\nfunction SingleFatwaSubmission({ data, setData }) {\n  const { locale, setFatwaToEdit } = useContext(SiteContext);\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const fatwa = data;\n  const history = useHistory();\n  function editFatwaSubmission(id) {\n    setFatwaToEdit(fatwa);\n    history.push(\"/admin/add\");\n  }\n  function acceptFatwa() {\n    setLoading(true);\n    fetch(`/api/admin/fatwaSubmissions/accept/${fatwa._id}`, { method: \"POST\" })\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setData((prev) => {\n            return prev.filter((item) => item._id !== fatwa._id);\n          });\n        } else {\n          alert(\"something went wrong\");\n        }\n      })\n      .catch((err) => {\n        alert(\"something went wrong!\");\n        console.log(err);\n      });\n  }\n  function removeSubmission() {\n    setLoading(true);\n    fetch(`/api/admin/fatwaSubmissions/remove/${fatwa._id}`, {\n      method: \"DELETE\",\n    })\n      .then((res) => {\n        setLoading(false);\n        if (res.status === 200) {\n          setData((prev) => {\n            return prev.filter((item) => item._id !== fatwa._id);\n          });\n        } else {\n          alert(\"something went wrong!\");\n        }\n      })\n      .catch((err) => {\n        alert(\"something went wrong!\");\n        console.log(err);\n      });\n  }\n  return open ? (\n    <tr data-id={fatwa._id} className={`full ${loading ? \"loading\" : \"\"}`}>\n      <td className=\"label\">Submitted</td>\n      <td className=\"data\">\n        <FormattedDate\n          value={new Date(fatwa.createdAt)}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"numeric\"\n        />\n      </td>\n      <td className=\"label\">topic</td>\n      <td className=\"data\">{fatwa.topic[locale]}</td>\n      <td className=\"label\">translation</td>\n      <td className=\"data\">{fatwa.translation ? \"Yes\" : \"No\"}</td>\n      <td className=\"label\">title (Bangla)</td>\n      <td className=\"data\">{fatwa.title[\"bn-BD\"]}</td>\n      {fatwa.title[\"en-US\"] && (\n        <>\n          <td className=\"label\">title (English)</td>\n          <td className=\"data\">{fatwa.title[\"en-US\"]}</td>\n        </>\n      )}\n      <td className=\"label\">question (Bangla)</td>\n      <td className=\"data\">{fatwa.ques[\"bn-BD\"]}</td>\n      {fatwa.ques[\"en-US\"] && (\n        <>\n          <td className=\"label\">question (English)</td>\n          <td className=\"data\">{fatwa.ques[\"en-US\"]}</td>\n        </>\n      )}\n      <td className=\"label\">answer (Bangla)</td>\n      <td className=\"data\">{fatwa.ans[\"bn-BD\"]}</td>\n      {fatwa.ans[\"en-US\"] && (\n        <>\n          <td className=\"label\">answer (English)</td>\n          <td className=\"data\">{fatwa.ans[\"en-US\"]}</td>\n        </>\n      )}\n      <td className=\"label\">Ref.</td>\n      <td className=\"data\">\n        <ul>\n          {fatwa.ref.map((item, i) =>\n            item.book ? (\n              <li key={item.book + item.part + item.page}>\n                book: {item.book}, part: {item.part}, page: {item.page}\n              </li>\n            ) : (\n              <li key={item.sura + item.aayat}>\n                sura: {item.sura}, aayat: {item.aayat}\n              </li>\n            )\n          )}\n        </ul>\n      </td>\n      <td className=\"btns data\">\n        <Submit\n          loading={loading}\n          onClick={acceptFatwa}\n          label={\n            <>\n              <ion-icon name=\"checkmark-outline\"></ion-icon> Accept\n            </>\n          }\n        />\n        <button disabled={loading} onClick={() => setOpen(false)}>\n          <ion-icon name=\"chevron-up-outline\"></ion-icon> Hide Detail\n        </button>\n        <button disabled={loading} onClick={editFatwaSubmission}>\n          <ion-icon name=\"pencil-outline\"></ion-icon> Edit\n        </button>\n        <Submit\n          loading={loading}\n          onClick={removeSubmission}\n          label={\n            <>\n              <ion-icon name=\"trash-outline\"></ion-icon> Delete\n            </>\n          }\n        />\n      </td>\n    </tr>\n  ) : (\n    <tr\n      className={loading ? \"loading\" : \"\"}\n      data-id={fatwa._id}\n      onClick={() => setOpen(true)}\n    >\n      <td>\n        <FormattedDate\n          value={new Date(fatwa.createdAt)}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"numeric\"\n        />\n      </td>\n      <td>{fatwa.topic[locale]}</td>\n      <td>{fatwa.source.name[locale]}</td>\n      <td>{fatwa.title[locale]}</td>\n    </tr>\n  );\n}\nfunction SingleFatwa({ data, setData }) {\n  const { locale } = useContext(SiteContext);\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const fatwa = data;\n  function deleteFatwa() {\n    setLoading(true);\n    fetch(`/api/admin/fatwa/`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ fatwa: fatwa._id, source: fatwa.source._id }),\n    })\n      .then((res) => {\n        setLoading(false);\n        if (res.status === 200) {\n          setData((prev) => {\n            return prev.filter((item) => item._id !== fatwa._id);\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n  return open ? (\n    <tr data-id={fatwa._id} className={`${open ? \"full\" : \"\"}`}>\n      <td className=\"label\">Added</td>\n      <td className=\"data\">\n        <FormattedDate\n          value={new Date(fatwa.createdAt)}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"numeric\"\n        />\n      </td>\n      <td className=\"label\">jamia</td>\n      <td className=\"data\">{fatwa.jamia}</td>\n      <td className=\"label\">topic</td>\n      <td className=\"data\">{fatwa.topic[locale]}</td>\n      <td className=\"label\">title (Bangla)</td>\n      <td className=\"data\">\n        <Link target=\"_blank\" to={`/fatwa/${fatwa.link[\"bn-BD\"]}`}>\n          {fatwa.title[\"bn-BD\"]}\n        </Link>\n      </td>\n      {fatwa.title[\"en-US\"] && (\n        <>\n          <td className=\"label\">title (English)</td>\n          <td className=\"data\">\n            <Link to={`/fatwa/${fatwa.link[\"en-US\"]}`}>\n              {fatwa.title[\"en-US\"]}\n            </Link>\n          </td>\n        </>\n      )}\n      <td className=\"label\">question (Bangla)</td>\n      <td className=\"data\">{fatwa.ques[\"bn-BD\"]}</td>\n      {fatwa.ques[\"en-US\"] && (\n        <>\n          <td className=\"label\">question (English)</td>\n          <td className=\"data\">{fatwa.ques[\"en-US\"]}</td>\n        </>\n      )}\n      <td className=\"label\">answer (Bangla)</td>\n      <td className=\"data\">{fatwa.ans[\"bn-BD\"]}</td>\n      {fatwa.ans[\"en-US\"] && (\n        <>\n          <td className=\"label\">answer (English)</td>\n          <td className=\"data\">{fatwa.ans[\"en-US\"]}</td>\n        </>\n      )}\n      <td className=\"label\">Ref.</td>\n      <td className=\"data\">\n        <ul>\n          {fatwa.ref &&\n            fatwa.ref.map((item, i) =>\n              item.book ? (\n                <li key={item.book + item.part + item.page}>\n                  <FormattedMessage id=\"book\" defaultMessage=\"Book\" />:{\" \"}\n                  {item.book},{\" \"}\n                  <FormattedMessage id=\"part\" defaultMessage=\"Part\" />:{\" \"}\n                  <FormattedNumber value={item.part} />,{\" \"}\n                  <FormattedMessage id=\"page\" defaultMessage=\"Page\" />:{\" \"}\n                  <FormattedNumber value={item.page} />\n                </li>\n              ) : (\n                <li key={item.sura + item.aayat}>\n                  sura: {item.sura}, aayat: {item.aayat}\n                </li>\n              )\n            )}\n        </ul>\n      </td>\n      <td className=\"btns data\">\n        <button onClick={() => setOpen(false)}>\n          <ion-icon name=\"chevron-up-outline\"></ion-icon> Hide Detail\n        </button>\n        <Submit\n          loading={loading}\n          onClick={deleteFatwa}\n          label={\n            <>\n              <ion-icon name=\"trash-outline\"></ion-icon> Delete\n            </>\n          }\n        />\n      </td>\n    </tr>\n  ) : (\n    <tr data-id={fatwa._id} onClick={() => setOpen(true)}>\n      <td>{fatwa.source.name[locale]}</td>\n      <td>{fatwa.topic[locale]}</td>\n      <td>{fatwa.translation ? \"Yes\" : \"No\"}</td>\n      <td>\n        <FormattedDate\n          value={new Date(fatwa.createdAt)}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"numeric\"\n        />\n      </td>\n      <td>{fatwa.title[locale]}</td>\n    </tr>\n  );\n}\n\nfunction SinglePatreon() {\n  return (\n    <tr>\n      <td>Make patreon rows</td>\n    </tr>\n  );\n}\nfunction Patreons() {\n  return (\n    <div className=\"view\">\n      <h1>Patreons</h1>\n      <Tabs page=\"/admin/patreons/\" tabs={[\"All\"]} />\n      <Switch>\n        <Route path=\"/admin/patreons\">\n          <View\n            Element={SinglePatreon}\n            defaultSort={{ column: \"date\", order: \"des\" }}\n            id=\"allPatreons\"\n            api=\"api/admin/patreons/filter?\"\n            categories={[]}\n            columns={[\n              { column: \"name\", sort: false, colCode: \"name\" },\n              { column: \"amount\", sort: true, colCode: \"amount\" },\n              { column: \"date\", sort: true, colCode: \"date\" },\n            ]}\n          />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction UserReview() {\n  const { locale } = useContext(SiteContext);\n  return (\n    <div className=\"view\">\n      <h1>\n        <FormattedMessage id=\"review\" defaultMessage=\"User Review\" />\n      </h1>\n      <Tabs\n        page=\"/admin/user/\"\n        tabs={[\n          { label: \"Questions\", link: \"questions\" },\n          { label: \"Answered Question\", link: \"answeredQuestion\" },\n          { label: \"Review\", link: \"review\" },\n          { label: \"Report\", link: \"report\" },\n        ]}\n      />\n      <Switch>\n        <Route path=\"/admin/user\" exact>\n          <View\n            Element={SingleUserQuestions}\n            defaultSort={{ column: \"submitted\", order: \"des\" }}\n            id=\"userSubmissions\"\n            api=\"api/admin/userQuestion/filter?\"\n            categories={[\n              {\n                name: \"topic\",\n                input: (\n                  <Combobox\n                    options={topics.map((option) => {\n                      return {\n                        label: option[locale],\n                        value: option,\n                      };\n                    })}\n                    required={true}\n                  ></Combobox>\n                ),\n              },\n              {\n                name: \"name\",\n                input: <Input label=\"Name\" type=\"text\" required={true} />,\n              },\n              {\n                name: \"answered\",\n                input: (\n                  <Combobox\n                    label=\"Answered\"\n                    options={[\n                      { label: \"Answered\", value: true },\n                      { label: \"Not answered\", value: false },\n                    ]}\n                    required={true}\n                  />\n                ),\n              },\n              {\n                name: \"taken\",\n                input: (\n                  <Combobox\n                    id={ID(8)}\n                    maxHeight={500}\n                    label=\"jamia\"\n                    data={[\"jamia 1\", \"jamia 2\", \"jamia 3\"]}\n                    required={true}\n                  />\n                ),\n              },\n            ]}\n            columns={[\n              { column: \"date\", sort: true, colCode: \"createdAt\" },\n              { column: \"name\", sort: false, colCode: \"name\" },\n              { column: \"question\", sort: false, colCode: \"ques\" },\n              { column: \"answers\", sort: true, colCode: \"ansCount\" },\n            ]}\n          />\n        </Route>\n        <Route path=\"/admin/user/questions\">\n          <View\n            Element={SingleUserQuestions}\n            defaultSort={{ column: \"submitted\", order: \"des\" }}\n            id=\"userSubmissions\"\n            api=\"api/admin/userQuestion/filter?\"\n            columns={[\n              { column: \"date\", sort: true, colCode: \"submitted\" },\n              { column: \"name\", sort: false, colCode: \"name\" },\n              { column: \"question\", sort: false, colCode: \"ques\" },\n            ]}\n          />\n        </Route>\n        <Route path=\"/admin/user/answeredQuestion\">\n          <View\n            Element={SingleUserReview}\n            defaultSort={{ column: \"date\", order: \"des\" }}\n            id=\"answeredQuestion\"\n            api=\"api/admin/userReview/filter?\"\n            columns={[\n              { column: \"name\", sort: false, colCode: \"name\" },\n              { column: \"date\", sort: true, colCode: \"date\" },\n              { column: \"message\", sort: false, colCode: \"message\" },\n            ]}\n          />\n        </Route>\n        <Route path=\"/admin/user/review\">\n          <View\n            Element={SingleUserReview}\n            defaultSort={{ column: \"date\", order: \"des\" }}\n            id=\"answeredQuestion\"\n            api=\"api/admin/userReview/filter?\"\n            columns={[\n              { column: \"name\", sort: false, colCode: \"name\" },\n              { column: \"date\", sort: true, colCode: \"date\" },\n              { column: \"message\", sort: false, colCode: \"message\" },\n            ]}\n          />\n        </Route>\n        <Route path=\"/admin/user/report\">\n          <View\n            Element={SingleUserReview}\n            defaultSort={{ column: \"date\", order: \"des\" }}\n            id=\"allReports\"\n            api=\"api/admin/userReview/filter?\"\n            columns={[\n              { column: \"name\", sort: false, colCode: \"name\" },\n              { column: \"date\", sort: true, colCode: \"date\" },\n              { column: \"message\", sort: false, colCode: \"message\" },\n            ]}\n          />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\nfunction SingleUserReview() {\n  return (\n    <tr>\n      <td>Make user review rows</td>\n    </tr>\n  );\n}\nfunction SingleUserQuestions({ data, setData }) {\n  const { locale } = useContext(SiteContext);\n  const [open, setOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const ques = data;\n  function remove() {\n    setLoading(true);\n    fetch(\"/api/admin/removeUserQuestion\", {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ _id: ques._id }),\n    })\n      .then((res) => {\n        setLoading(false);\n        if (res.status === 200) {\n          setData((prev) => prev.filter((item) => item._id !== ques._id));\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        alert(\"something went wrong!\");\n      });\n  }\n  return !open ? (\n    <tr onClick={() => setOpen(true)}>\n      <td>\n        <FormattedDate\n          value={ques.createdAt}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td>\n        {ques.user.name}\n        <span>{ques.user.add}</span>\n      </td>\n      <td>{ques.ques.body}</td>\n      <td>\n        <FormattedNumber value={ques.ansCount} />\n      </td>\n    </tr>\n  ) : (\n    <tr className=\"full\">\n      <td className=\"label\">Submitted</td>\n      <td className=\"data\">\n        <FormattedDate\n          value={ques.createdAt}\n          day=\"numeric\"\n          month=\"numeric\"\n          year=\"2-digit\"\n        />\n      </td>\n      <td className=\"label\">Name</td>\n      <td className=\"data\">{ques.user.name}</td>\n      <td className=\"label\">Address</td>\n      <td className=\"data\">{ques.user.add}</td>\n      <td className=\"label\">Mobile</td>\n      <td className=\"data\">\n        <a href={`tel:${ques.user.mob}`}>{ques.user.mob}</a>\n      </td>\n      <td className=\"label\">Topic</td>\n      <td className=\"data\">{ques.ques.topic[locale]}</td>\n      <td className=\"label\">Question</td>\n      <td className=\"data\">{ques.ques.body}</td>\n      <td className=\"data btns\">\n        <button className=\"hideDetail\" onClick={() => setOpen(false)}>\n          <ion-icon name=\"chevron-up-outline\"></ion-icon>Hide Detail\n        </button>\n        <button disabled={loading} className=\"remove\" onClick={remove}>\n          <ion-icon name=\"trash-outline\"></ion-icon>Remove\n        </button>\n      </td>\n    </tr>\n  );\n}\n\nfunction QuestionFeed() {\n  return (\n    <div className=\"view questionFeed\">\n      <h1 className=\"viewTitle\">\n        <FormattedMessage id=\"questionFeed\" defaultMessage=\"Question Feed\" />\n      </h1>\n      <Tabs\n        page=\"/admin/questionFeed/\"\n        tabs={[{ label: \"New Questions\", link: \"newQuestions\" }]}\n      />\n      <Switch>\n        <Route path=\"/admin/questionFeed\" exact>\n          <NewQuestions />\n        </Route>\n        <Route path=\"/admin/questionFeed/newQuestions\">\n          <NewQuestions />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\nconst NewQuestions = injectIntl(({ intl }) => {\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n  const { locale } = useContext(SiteContext);\n  const [loading, setLoading] = useState(true);\n  const [sort, setSort] = useState({ column: \"createdAt\", order: \"des\" });\n  const [data, setData] = useState([]);\n  function fetchData() {\n    setLoading(true);\n    const sortOrder = encodeURL(sort);\n    const options = { headers: { \"Accept-Language\": locale }, signal: signal };\n    const url = `/api/admin/questionFeed/filter?&${sortOrder}`;\n    fetch(url, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        setData(data);\n      })\n      .catch((err) => {\n        console.log(err);\n        console.log(\"handle error!!\");\n      });\n    return () => abortController.abort();\n  }\n  useEffect(fetchData, [sort]);\n  return (\n    <>\n      <div className=\"filters\">\n        <Combobox\n          disabled={loading}\n          defaultValue={1}\n          onChange={(option) => setSort(option.value)}\n          maxHeight={200}\n          id=\"questionFeedSort\"\n          icon=\"layers\"\n          options={[\n            {\n              label: intl.formatMessage({ id: \"newFirts\" }),\n              value: { column: \"createdAt\", order: \"des\" },\n            },\n            {\n              label: intl.formatMessage({ id: \"oldFirst\" }),\n              value: { column: \"createdAt\", order: \"asc\" },\n            },\n          ]}\n        />\n      </div>\n      <ul className=\"feed\">\n        {!loading ? (\n          data.map((item) => (\n            <SingleQuestion key={item._id} ques={item} setQues={setData} />\n          ))\n        ) : (\n          <LoadingPost />\n        )}\n      </ul>\n    </>\n  );\n});\nfunction SingleQuestion({ ques, setQues }) {\n  const { locale } = useContext(SiteContext);\n  const [loading, setLoading] = useState(false);\n  const history = useHistory();\n  const container = useRef(null);\n  function remove() {\n    setLoading(true);\n    fetch(\"/api/admin/userQues\", {\n      method: \"DELETE\",\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify({ _id: ques._id }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setQues((prev) => prev.filter((item) => item._id !== ques._id));\n        } else {\n          alert(\"something went wrong\");\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.log(err);\n        alert(\"something went wrong\");\n      });\n  }\n  return (\n    <li\n      ref={container}\n      className={`question mini`}\n      onClick={(e) => {\n        if (e.target === container.current) {\n          history.push(\"/admin/userQuestion/\" + ques._id);\n        }\n      }}\n    >\n      <div className=\"user\">\n        <p className=\"name\">{ques.user.name}</p>\n        <p className=\"date\">\n          {new Date(ques.submitted).getFullYear() !==\n          new Date().getFullYear() ? (\n            <FormattedDate\n              value={ques.createdAt}\n              day=\"numeric\"\n              month=\"long\"\n              year=\"numeric\"\n            />\n          ) : (\n            <FormattedDate value={ques.submitted} day=\"numeric\" month=\"long\" />\n          )}\n          <span className=\"separator\" />\n          <FormattedTimeParts value={ques.submitted}>\n            {(parts) => (\n              <>\n                {parts[0].value}\n                {parts[1].value}\n                {parts[2].value}\n                <small>{parts[4].value.toLowerCase()}</small>\n              </>\n            )}\n          </FormattedTimeParts>\n        </p>\n      </div>\n      <Actions\n        icon=\"reorder-two-outline\"\n        actions={[\n          {\n            label: \"Answer now\",\n            action: () => {\n              SS.set(\"userAns-ques\", ques.ques.body);\n              SS.set(\"userAns-topic\", JSON.stringify(ques.ques.topic));\n              history.push(`/admin/userQuestion/${ques._id}/add`);\n            },\n          },\n          {\n            label: \"Remove\",\n            action: () => {\n              remove();\n            },\n          },\n        ]}\n      />\n      <p className=\"ques\">{ques.ques.body}</p>\n      <ul className=\"tags\">\n        <li className=\"tag\">{ques.ques.topic[locale]}</li>\n        <li className=\"tag\">\n          <FormattedMessage\n            values={{ number: <FormattedNumber value={ques.ans.length} /> }}\n            id=\"ans.tag.ansCount\"\n            defaultMessage={`${ques.ans.length} Answer(s)`}\n          />\n        </li>\n        <li className=\"tag\">\n          <FormattedMessage\n            values={{ number: <FormattedNumber value={ques.reports.length} /> }}\n            id=\"ans.tag.reportCount\"\n            defaultMessage={`${ques.reports.length} Reports(s)`}\n          />\n        </li>\n      </ul>\n    </li>\n  );\n}\n\nfunction UserQuestion({ history, match }) {\n  const [loading, setLoading] = useState(true);\n  const [userQues, setUserQues] = useState({});\n  useEffect(getData, []);\n  function getData() {\n    fetch(\"/api/admin/userQues/\" + match.params._id)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setUserQues(data.content);\n        } else {\n          throw data;\n        }\n      })\n      .catch((err) => {\n        alert(\"something went wrong\");\n        console.log(err);\n      });\n  }\n  if (userQues.ques) {\n    return (\n      <div className=\"view userQues\">\n        <div className=\"container\">\n          <div className=\"ques\">\n            <div className=\"user\">\n              <p className=\"name\">\n                <b>{userQues.user.name}</b>\n                <span className=\"separator\" />\n                <i>\n                  <span className=\"add\">{userQues.user.add}</span>\n                </i>\n              </p>\n              <p className=\"date\">\n                <FormattedDate\n                  value={userQues.createdAt}\n                  day=\"numeric\"\n                  month=\"long\"\n                  year=\"numeric\"\n                />\n                <span className=\"separator\" />\n                <FormattedTimeParts value={userQues.createdAt}>\n                  {(parts) => (\n                    <>\n                      {parts[0].value}\n                      {parts[1].value}\n                      {parts[2].value}\n                      <small>{parts[4].value.toLowerCase()}</small>\n                    </>\n                  )}\n                </FormattedTimeParts>\n              </p>\n            </div>\n            <p className=\"body\">{userQues.ques.body}</p>\n          </div>\n          <Tabs\n            page={`/admin/userQuestion/${userQues._id}/`}\n            tabs={[\n              { label: \"Answers\", link: \"answers\" },\n              { label: \"Reports\", link: \"reports\" },\n              { label: \"Add answer\", link: \"addAnswer\" },\n            ]}\n          />\n          <Switch>\n            <Route path={`/admin/userQuestion/${userQues._id}`} exact>\n              {userQues.ans.map((item) => (\n                <Answer\n                  key={item._id}\n                  ques={userQues}\n                  ans={item}\n                  setQues={setUserQues}\n                />\n              ))}\n            </Route>\n            <Route path={`/admin/userQuestion/${userQues._id}/answers`}>\n              {userQues.ans.map((item) => (\n                <Answer\n                  key={item._id}\n                  ques={userQues}\n                  ans={item}\n                  setQues={setUserQues}\n                />\n              ))}\n            </Route>\n            <Route path={`/admin/UserQuestion/${userQues._id}/reports`}>\n              {userQues.reports.map((report) => (\n                <Report key={report._id} report={report} />\n              ))}\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"view\">\n      {loading ? <h1>loading</h1> : <p>Question did not found!</p>}\n    </div>\n  );\n}\nfunction Answer({ ques, ans, setQues }) {\n  const { locale, user } = useContext(SiteContext);\n  const [loading, setLoading] = useState(false);\n  const [open, setOpen] = useState(false);\n  const history = useHistory();\n  function approve() {\n    setLoading(true);\n    const options = {\n      method: \"POST\",\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify({ ans_id: ans._id }),\n    };\n    fetch(`/api/admin/userQues/approveAns/${ques._id}`, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          history.push(\"/admin/questionFeed\");\n        } else {\n          throw data.code;\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        alert(\"something went wrong\");\n      });\n  }\n  function edit() {\n    SS.set(\"ansFatwa-ans\", ans.body);\n    SS.set(\"ansFatwa-title\", ans.title);\n    SS.set(\"ansFatwa-ref\", JSON.stringify(ans.ref));\n    history.push(history.location.pathname + \"/add\");\n  }\n  function remove() {\n    const options = {\n      method: \"DELETE\",\n      headers: { \"Content-type\": \"application/json\" },\n      body: JSON.stringify({ source: ans.source._id, _id: ans._id }),\n    };\n    setLoading(true);\n    fetch(`/api/admin/userQues/answer/${ques._id}`, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setQues(data.content);\n        } else {\n          throw data.code;\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        alert(\"something went wrong\");\n      });\n  }\n  return (\n    <div\n      className={`ans ${ans.source._id === user._id ? \"mine\" : \"\"} ${\n        !open ? \"mini\" : \"\"\n      } ${loading ? \"loading\" : \"\"}`}\n    >\n      <div className=\"vote\">\n        <div className={`content`}>\n          <ion-icon name=\"chevron-up-outline\"></ion-icon>\n          <p className=\"voteCount\">\n            <FormattedNumber value={ans.vote.count} />\n          </p>\n          <ion-icon name=\"chevron-down-outline\"></ion-icon>\n        </div>\n      </div>\n      <div className=\"content\">\n        <div className=\"source\">\n          <p className=\"name\">\n            <b>{ans.source.name[locale]}</b>\n          </p>\n          <p className=\"date\">\n            <FormattedDate\n              value={ans.createdAt}\n              day=\"numeric\"\n              month=\"long\"\n              year=\"numeric\"\n            />\n            <span className=\"separator\" />\n            <FormattedTimeParts value={ans.createdAt}>\n              {(parts) => (\n                <>\n                  {parts[0].value}\n                  {parts[1].value}\n                  {parts[2].value}\n                  <small>{parts[4].value.toLowerCase()}</small>\n                </>\n              )}\n            </FormattedTimeParts>\n          </p>\n        </div>\n        <div className=\"body\">\n          <p className=\"title\">\n            {ans.topic[locale]}: {ans.title}\n          </p>\n          <p className=\"answer\">{ans.body}</p>\n        </div>\n        {open && ans.ref.length > 0 && (\n          <div className=\"ref\">\n            <p>\n              <FormattedMessage id=\"ref\" value=\"Ref.\" />\n            </p>\n            <ul className=\"ref\">\n              {ans.ref.map((ref, i) =>\n                ref.book ? (\n                  <li key={i}>\n                    <span>{ref.book}</span>,{\" \"}\n                    <FormattedMessage id=\"page\" defaultMessage=\"Page\" />{\" \"}\n                    <span>\n                      <FormattedNumber value={ref.part} />\n                    </span>\n                    , <FormattedMessage id=\"part\" defaultMessage=\"Part\" />{\" \"}\n                    <span>\n                      <FormattedNumber value={ref.page} />\n                    </span>\n                  </li>\n                ) : (\n                  <li key={i}>\n                    <span>{ref.sura}</span>,{\" \"}\n                    <FormattedMessage id=\"aayat\" defaultMessage=\"Aayat\" />{\" \"}\n                    <span>\n                      <FormattedNumber value={ref.aayat} />\n                    </span>\n                  </li>\n                )\n              )}\n            </ul>\n          </div>\n        )}\n        {!open && (\n          <div className=\"tags\">\n            <p className=\"tag\">\n              <FormattedMessage\n                values={{ number: <FormattedNumber value={ans.ref.length} /> }}\n                id=\"ans.tag.refCount\"\n                defaultMessage={`${ans.ref.length} Reference(s)`}\n              />\n            </p>\n            <p className=\"tag\">\n              <FormattedMessage\n                values={{\n                  number: <FormattedNumber value={ans.vote.voters.length} />,\n                }}\n                id=\"ans.tag.voteCount\"\n                defaultMessage={`${ans.vote.voters.length} Vote(s)`}\n              />\n            </p>\n          </div>\n        )}\n        <span onClick={() => setOpen(!open)} className=\"showFull\">\n          {open ? \"পুরো উত্তর গোপন করুন\" : \"পুরো উত্তর দেখুন\"}\n        </span>\n      </div>\n      <Actions\n        icon=\"reorder-two-outline\"\n        actions={[\n          { label: \"Edit\", action: edit },\n          { label: \"Approve\", action: approve },\n          { label: \"Remove\", action: remove },\n        ]}\n      />\n    </div>\n  );\n}\nfunction Report({ report }) {\n  const { locale } = useContext(SiteContext);\n  return (\n    <div className=\"quesReports\">\n      <div className=\"user\">\n        <p className=\"name\">\n          <b>{report.source.name[locale]}</b>\n        </p>\n        <p className=\"date\">\n          <FormattedDate\n            value={report.createdAt}\n            day=\"numeric\"\n            month=\"long\"\n            year=\"numeric\"\n          />\n          <span className=\"separator\" />\n          <FormattedTimeParts value={report.createdAt}>\n            {(parts) => (\n              <>\n                {parts[0].value}\n                {parts[1].value}\n                {parts[2].value}\n                <small>{parts[4].value.toLowerCase()}</small>\n              </>\n            )}\n          </FormattedTimeParts>\n        </p>\n      </div>\n      <div className=\"contect\">\n        <p className=\"subject\">{report.message.subject}</p>\n        <p className=\"body\">{report.message.body}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction AdminPanel() {\n  return (\n    <div className=\"main adminPanel\">\n      <Sidebar\n        views={[\n          {\n            label: <FormattedMessage id=\"source\" defaultMessage=\"Source\" />,\n            path: \"/admin/sources\",\n            icon: \"book\",\n          },\n          {\n            label: <FormattedMessage id=\"fatwa\" defaultMessage=\"Fatwa\" />,\n            path: \"/admin/fatwa\",\n            icon: \"reader\",\n          },\n          {\n            label: (\n              <FormattedMessage id=\"userArea\" defaultMessage=\"User Area\" />\n            ),\n            path: \"/admin/user\",\n            icon: \"people\",\n          },\n          {\n            label: <FormattedMessage id=\"patreons\" defaultMessage=\"Patreons\" />,\n            path: \"/admin/patreons\",\n            icon: \"umbrella\",\n          },\n          {\n            label: (\n              <FormattedMessage\n                id=\"questionFeed\"\n                defaultMessage=\"Question Feed\"\n              />\n            ),\n            path: \"/admin/questionFeed\",\n            icon: \"mail\",\n          },\n        ]}\n      >\n        <div className=\"profile\">\n          <h2>A</h2>\n        </div>\n      </Sidebar>\n      <Switch>\n        <Route path=\"/admin\" exact component={AllSources} />\n        <Route path=\"/admin/sources\" component={AllSources} />\n        <Route path=\"/admin/fatwa/:filter?\" component={AllFatwa} />\n        <Route path=\"/admin/patreons\" component={Patreons} />\n        <Route path=\"/admin/user\" component={UserReview} />\n        <Route path=\"/admin/userQuestion/:_id\" component={UserQuestion} />\n        <Route path=\"/admin/questionFeed\" component={QuestionFeed} />\n        <Route path=\"/\" component={FourOFour} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default AdminPanel;\n","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Searchbar.js",["114","115","116","117","118","119","120"],"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\Modals.js",[],"C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\FormElements.js",["121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166"],"import React, { useState, useContext, useEffect, useRef } from \"react\";\nimport { SiteContext } from \"../Context\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport { FormattedMessage, FormattedNumber } from \"react-intl\";\nimport { OutsideClick } from \"./TableElements\";\n\nexport const topics = [\n  { \"bn-BD\": \"আকীদা\", \"en-US\": \"belief\" },\n  { \"bn-BD\": \"খুলা-তালাক\", \"en-US\": \"divorce\" },\n  { \"bn-BD\": \"জায়েয-নাজায়েয\", \"en-US\": \"permissible\" },\n  { \"bn-BD\": \"নামায\", \"en-US\": \"salat\" },\n  { \"bn-BD\": \"রোজা\", \"en-US\": \"fest\" },\n  { \"bn-BD\": \"হজ্জ\", \"en-US\": \"hajj\" },\n  { \"bn-BD\": \"যাকাত\", \"en-US\": \"zakat\" },\n  { \"bn-BD\": \"হেবা-ফারায়েজ\", \"en-US\": \"distribution of property\" },\n  { \"bn-BD\": \"কুরবানী\", \"en-US\": \"kurbani\" },\n  { \"bn-BD\": \"দান-সাদাকাহ\", \"en-US\": \"charity\" },\n  { \"bn-BD\": \"কসম-মান্নত\", \"en-US\": \"swear\" },\n  { \"bn-BD\": \"ক্রয়-বিক্রয়\", \"en-US\": \"buying and selling\" },\n  { \"bn-BD\": \"পবিত্রতা\", \"en-US\": \"holiness\" },\n  { \"bn-BD\": \"বিবাহ-রাজয়াত\", \"en-US\": \"wedding\" },\n  { \"bn-BD\": \"ব্যাংক-বিমা\", \"en-US\": \"bank insurance\" },\n  { \"bn-BD\": \"ভাড়া-লিজ\", \"en-US\": \"rent-lease\" },\n  { \"bn-BD\": \"ইতিহাস\", \"en-US\": \"history\" },\n];\n\nexport const GetGroupData = (multipleInput) => {\n  const allData = [];\n  for (var i = 0; i < multipleInput.children.length; i++) {\n    const group = multipleInput.children[i];\n    const data = {};\n    for (var j = 0; j < group.children.length; j++) {\n      const section = group.children[j];\n      const input = section.querySelector(\"input\");\n      if (input.value === \"\" || section.classList.contains(\"disabled\")) {\n        continue;\n      } else {\n        const num = +input.value\n          .replaceAll(\"০\", \"0\")\n          .replaceAll(\"১\", \"1\")\n          .replaceAll(\"২\", \"2\")\n          .replaceAll(\"৩\", \"3\")\n          .replaceAll(\"৪\", \"4\")\n          .replaceAll(\"৫\", \"5\")\n          .replaceAll(\"৬\", \"6\")\n          .replaceAll(\"৭\", \"7\")\n          .replaceAll(\"৮\", \"8\")\n          .replaceAll(\"৯\", \"9\");\n        data[section.id] = isNaN(num) ? input.value : num;\n      }\n    }\n    Object.keys(data).length > 0 && allData.push(data);\n  }\n  return allData;\n};\n// const defaultValidation = /^[ঀ-৾؀-ۿa-zA-Z0-9\\s():;\"',.।!?/\\\\-]+$/;\nconst defaultValidation = /./;\nexport const SS = {\n  set: (key, value) => sessionStorage.setItem(key, value),\n  get: (key) => sessionStorage.getItem(key) || \"\",\n  remove: (key) => sessionStorage.removeItem(key),\n};\nString.prototype.strReverse = function () {\n  var newstring = \"\";\n  for (var s = 0; s < this.length; s++) {\n    newstring = this.charAt(s) + newstring;\n  }\n  return newstring;\n  //strOrig = ' texttotrim ';\n  //strReversed = strOrig.revstring();\n};\nfunction chkPass(pwd) {\n  // Simultaneous variable declaration and value assignment aren't supported in IE apparently\n  // so I'm forced to assign the same value individually per var to support a crappy browser *sigh*\n  var nScore = 0,\n    nLength = 0,\n    nAlphaUC = 0,\n    nAlphaLC = 0,\n    nNumber = 0,\n    nSymbol = 0,\n    nMidChar = 0,\n    nRequirements = 0,\n    nAlphasOnly = 0,\n    nNumbersOnly = 0,\n    nUnqChar = 0,\n    nRepChar = 0,\n    nRepInc = 0,\n    nConsecAlphaUC = 0,\n    nConsecAlphaLC = 0,\n    nConsecNumber = 0,\n    nSeqAlpha = 0,\n    nSeqNumber = 0,\n    nSeqSymbol = 0,\n    nReqChar = 0,\n    nMultConsecCharType = 0;\n  var nMultRepChar = 1,\n    nMultConsecSymbol = 1;\n  var nMultMidChar = 2,\n    nMultRequirements = 2,\n    nMultConsecAlphaUC = 2,\n    nMultConsecAlphaLC = 2,\n    nMultConsecNumber = 2;\n  var nReqCharType = 3,\n    nMultAlphaUC = 3,\n    nMultAlphaLC = 3,\n    nMultSeqAlpha = 3,\n    nMultSeqNumber = 3,\n    nMultSeqSymbol = 3;\n  var nMultLength = 4,\n    nMultNumber = 4;\n  var nMultSymbol = 6;\n  var nTmpAlphaUC = \"\",\n    nTmpAlphaLC = \"\",\n    nTmpNumber = \"\",\n    nTmpSymbol = \"\";\n  var sAlphaUC = \"0\",\n    sAlphaLC = \"0\",\n    sNumber = \"0\",\n    sSymbol = \"0\",\n    sMidChar = \"0\",\n    sRequirements = \"0\",\n    sAlphasOnly = \"0\",\n    sNumbersOnly = \"0\",\n    sRepChar = \"0\",\n    sConsecAlphaUC = \"0\",\n    sConsecAlphaLC = \"0\",\n    sConsecNumber = \"0\",\n    sSeqAlpha = \"0\",\n    sSeqNumber = \"0\",\n    sSeqSymbol = \"0\";\n  var sAlphas = \"abcdefghijklmnopqrstuvwxyz\";\n  var sNumerics = \"01234567890\";\n  var sSymbols = \")!@#$%^&*()\";\n  var sComplexity = \"Too Short\";\n  var sStandards = \"Below\";\n  var nMinPwdLen = 8;\n  if (pwd) {\n    nScore = parseInt(pwd.length * nMultLength);\n    nLength = pwd.length;\n    var arrPwd = pwd.replace(/\\s+/g, \"\").split(/\\s*/);\n    var arrPwdLen = arrPwd.length;\n\n    /* Loop through password to check for Symbol, Numeric, Lowercase and Uppercase pattern matches */\n    for (var a = 0; a < arrPwdLen; a++) {\n      if (arrPwd[a].match(/[A-Z]/g)) {\n        if (nTmpAlphaUC !== \"\") {\n          if (nTmpAlphaUC + 1 === a) {\n            nConsecAlphaUC++;\n          }\n        }\n        nTmpAlphaUC = a;\n        nAlphaUC++;\n      } else if (arrPwd[a].match(/[a-z]/g)) {\n        if (nTmpAlphaLC !== \"\") {\n          if (nTmpAlphaLC + 1 === a) {\n            nConsecAlphaLC++;\n          }\n        }\n        nTmpAlphaLC = a;\n        nAlphaLC++;\n      } else if (arrPwd[a].match(/[0-9]/g)) {\n        if (a > 0 && a < arrPwdLen - 1) {\n          nMidChar++;\n        }\n        if (nTmpNumber !== \"\") {\n          if (nTmpNumber + 1 === a) {\n            nConsecNumber++;\n          }\n        }\n        nTmpNumber = a;\n        nNumber++;\n      } else if (arrPwd[a].match(/[^a-zA-Z0-9_]/g)) {\n        if (a > 0 && a < arrPwdLen - 1) {\n          nMidChar++;\n        }\n        if (nTmpSymbol !== \"\") {\n          if (nTmpSymbol + 1 === a) {\n          }\n        }\n        nTmpSymbol = a;\n        nSymbol++;\n      }\n      /* Internal loop through password to check for repeat characters */\n      var bCharExists = false;\n      for (var b = 0; b < arrPwdLen; b++) {\n        if (arrPwd[a] === arrPwd[b] && a !== b) {\n          /* repeat character exists */\n          bCharExists = true;\n          /*\n\t\t\t\t\tCalculate icrement deduction based on proximity to identical characters\n\t\t\t\t\tDeduction is incremented each time a new match is discovered\n\t\t\t\t\tDeduction amount is based on total password length divided by the\n\t\t\t\t\tdifference of distance between currently selected match\n\t\t\t\t\t*/\n          nRepInc += Math.abs(arrPwdLen / (b - a));\n        }\n      }\n      if (bCharExists) {\n        nRepChar++;\n        nUnqChar = arrPwdLen - nRepChar;\n        nRepInc = nUnqChar ? Math.ceil(nRepInc / nUnqChar) : Math.ceil(nRepInc);\n      }\n    }\n\n    /* Check for sequential alpha string patterns (forward and reverse) */\n    for (var s = 0; s < 23; s++) {\n      var sFwd = sAlphas.substring(s, parseInt(s + 3));\n      var sRev = sFwd.strReverse();\n      if (\n        pwd.toLowerCase().indexOf(sFwd) !== -1 ||\n        pwd.toLowerCase().indexOf(sRev) !== -1\n      ) {\n        nSeqAlpha++;\n      }\n    }\n\n    /* Check for sequential numeric string patterns (forward and reverse) */\n    for (var s = 0; s < 8; s++) {\n      var sFwd = sNumerics.substring(s, parseInt(s + 3));\n      var sRev = sFwd.strReverse();\n      if (\n        pwd.toLowerCase().indexOf(sFwd) !== -1 ||\n        pwd.toLowerCase().indexOf(sRev) !== -1\n      ) {\n        nSeqNumber++;\n      }\n    }\n\n    /* Check for sequential symbol string patterns (forward and reverse) */\n    for (var s = 0; s < 8; s++) {\n      var sFwd = sSymbols.substring(s, parseInt(s + 3));\n      var sRev = sFwd.strReverse();\n      if (\n        pwd.toLowerCase().indexOf(sFwd) !== -1 ||\n        pwd.toLowerCase().indexOf(sRev) !== -1\n      ) {\n        nSeqSymbol++;\n      }\n    }\n\n    /* Modify overall score value based on usage vs requirements */\n\n    /* General point assignment */\n    if (nAlphaUC > 0 && nAlphaUC < nLength) {\n      nScore = parseInt(nScore + (nLength - nAlphaUC) * 2);\n      sAlphaUC = \"+ \" + parseInt((nLength - nAlphaUC) * 2);\n    }\n    if (nAlphaLC > 0 && nAlphaLC < nLength) {\n      nScore = parseInt(nScore + (nLength - nAlphaLC) * 2);\n      sAlphaLC = \"+ \" + parseInt((nLength - nAlphaLC) * 2);\n    }\n    if (nNumber > 0 && nNumber < nLength) {\n      nScore = parseInt(nScore + nNumber * nMultNumber);\n      sNumber = \"+ \" + parseInt(nNumber * nMultNumber);\n    }\n    if (nSymbol > 0) {\n      nScore = parseInt(nScore + nSymbol * nMultSymbol);\n      sSymbol = \"+ \" + parseInt(nSymbol * nMultSymbol);\n    }\n    if (nMidChar > 0) {\n      nScore = parseInt(nScore + nMidChar * nMultMidChar);\n      sMidChar = \"+ \" + parseInt(nMidChar * nMultMidChar);\n    }\n\n    /* Point deductions for poor practices */\n    if ((nAlphaLC > 0 || nAlphaUC > 0) && nSymbol === 0 && nNumber === 0) {\n      // Only Letters\n      nScore = parseInt(nScore - nLength);\n      nAlphasOnly = nLength;\n      sAlphasOnly = \"- \" + nLength;\n    }\n    if (nAlphaLC === 0 && nAlphaUC === 0 && nSymbol === 0 && nNumber > 0) {\n      // Only Numbers\n      nScore = parseInt(nScore - nLength);\n      nNumbersOnly = nLength;\n      sNumbersOnly = \"- \" + nLength;\n    }\n    if (nRepChar > 0) {\n      // Same character exists more than once\n      nScore = parseInt(nScore - nRepInc);\n      sRepChar = \"- \" + nRepInc;\n    }\n    if (nConsecAlphaUC > 0) {\n      // Consecutive Uppercase Letters exist\n      nScore = parseInt(nScore - nConsecAlphaUC * nMultConsecAlphaUC);\n      sConsecAlphaUC = \"- \" + parseInt(nConsecAlphaUC * nMultConsecAlphaUC);\n    }\n    if (nConsecAlphaLC > 0) {\n      // Consecutive Lowercase Letters exist\n      nScore = parseInt(nScore - nConsecAlphaLC * nMultConsecAlphaLC);\n      sConsecAlphaLC = \"- \" + parseInt(nConsecAlphaLC * nMultConsecAlphaLC);\n    }\n    if (nConsecNumber > 0) {\n      // Consecutive Numbers exist\n      nScore = parseInt(nScore - nConsecNumber * nMultConsecNumber);\n      sConsecNumber = \"- \" + parseInt(nConsecNumber * nMultConsecNumber);\n    }\n    if (nSeqAlpha > 0) {\n      // Sequential alpha strings exist (3 characters or more)\n      nScore = parseInt(nScore - nSeqAlpha * nMultSeqAlpha);\n      sSeqAlpha = \"- \" + parseInt(nSeqAlpha * nMultSeqAlpha);\n    }\n    if (nSeqNumber > 0) {\n      // Sequential numeric strings exist (3 characters or more)\n      nScore = parseInt(nScore - nSeqNumber * nMultSeqNumber);\n      sSeqNumber = \"- \" + parseInt(nSeqNumber * nMultSeqNumber);\n    }\n    if (nSeqSymbol > 0) {\n      // Sequential symbol strings exist (3 characters or more)\n      nScore = parseInt(nScore - nSeqSymbol * nMultSeqSymbol);\n      sSeqSymbol = \"- \" + parseInt(nSeqSymbol * nMultSeqSymbol);\n    }\n\n    /* Determine if mandatory requirements have been met and set image indicators accordingly */\n    var arrChars = [nLength, nAlphaUC, nAlphaLC, nNumber, nSymbol];\n    var arrCharsIds = [\"nLength\", \"nAlphaUC\", \"nAlphaLC\", \"nNumber\", \"nSymbol\"];\n    var arrCharsLen = arrChars.length;\n    for (var c = 0; c < arrCharsLen; c++) {\n      if (arrCharsIds[c] === \"nLength\") {\n        var minVal = parseInt(nMinPwdLen - 1);\n      } else {\n        var minVal = 0;\n      }\n      if (arrChars[c] === parseInt(minVal + 1)) {\n        nReqChar++;\n      } else if (arrChars[c] > parseInt(minVal + 1)) {\n        nReqChar++;\n      }\n    }\n    nRequirements = nReqChar;\n    if (pwd.length >= nMinPwdLen) {\n      var nMinReqChars = 3;\n    } else {\n      var nMinReqChars = 4;\n    }\n    if (nRequirements > nMinReqChars) {\n      // One or more required characters exist\n      nScore = parseInt(nScore + nRequirements * 2);\n      sRequirements = \"+ \" + parseInt(nRequirements * 2);\n    }\n\n    /* Determine if additional bonuses need to be applied and set image indicators accordingly */\n    var arrChars = [nMidChar, nRequirements];\n    var arrCharsIds = [\"nMidChar\", \"nRequirements\"];\n    var arrCharsLen = arrChars.length;\n    for (var c = 0; c < arrCharsLen; c++) {\n      if (arrCharsIds[c] === \"nRequirements\") {\n        var minVal = nMinReqChars;\n      } else {\n        var minVal = 0;\n      }\n    }\n\n    /* Determine if suggested requirements have been met and set image indicators accordingly */\n    var arrChars = [\n      nAlphasOnly,\n      nNumbersOnly,\n      nRepChar,\n      nConsecAlphaUC,\n      nConsecAlphaLC,\n      nConsecNumber,\n      nSeqAlpha,\n      nSeqNumber,\n      nSeqSymbol,\n    ];\n\n    /* Determine complexity based on overall score */\n    if (nScore > 100) {\n      nScore = 100;\n    } else if (nScore < 0) {\n      nScore = 0;\n    }\n    if (nScore >= 0 && nScore < 20) {\n      sComplexity = \"Very Weak\";\n    } else if (nScore >= 20 && nScore < 40) {\n      sComplexity = \"Weak\";\n    } else if (nScore >= 40 && nScore < 60) {\n      sComplexity = \"Good\";\n    } else if (nScore >= 60 && nScore < 80) {\n      sComplexity = \"Strong\";\n    } else if (nScore >= 80 && nScore <= 100) {\n      sComplexity = \"Very Strong\";\n    }\n\n    return nScore;\n  } else {\n    return 0;\n  }\n}\nfunction formatDate(input) {\n  let date = new Date(input);\n  return `${date.getFullYear()}-${\n    date.getMonth() + 1 < 10 ? \"0\" + (date.getMonth() + 1) : date.getMonth() + 1\n  }-${date.getDate() < 10 ? \"0\" + date.getDate() : date.getDate()}`;\n}\n\nexport const ID = (length) => {\n  var result = \"\";\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n  var charactersLength = characters.length;\n  result += characters.charAt(\n    Math.floor(Math.random() * charactersLength - 10)\n  );\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n};\nexport const $ = (selector) => document.querySelector(selector);\nexport const $$ = (selector) => document.querySelectorAll(selector);\nexport const emptyFieldWarning = (selector, inputType, warning) => {\n  const emptyFieldWarning = document.createElement(\"p\");\n  emptyFieldWarning.classList.add(\"emptyFieldWarning\");\n  emptyFieldWarning.textContent = warning;\n  if ($(`${selector} .emptyFieldWarning`) === null) {\n    $(`${selector}`).appendChild(emptyFieldWarning);\n  }\n  $(`${selector} ${inputType}`).focus();\n};\nexport const camelize = (str) => {\n  return str\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function (word, index) {\n      return index === 0 ? word.toLowerCase() : word.toUpperCase();\n    })\n    .replace(/\\s+/g, \"\");\n};\nexport const Input = ({\n  id,\n  dataId,\n  label,\n  type,\n  defaultValue,\n  pattern,\n  strict,\n  warning,\n  required,\n  onChange,\n  disabled,\n  max,\n  min,\n  children,\n  placeholder,\n  className,\n  validationMessage,\n  autoFocus,\n}) => {\n  const [value, setValue] = useState(defaultValue);\n  const [showLabel, setShowLabel] = useState(!defaultValue);\n  const [invalidChar, setInvalidChar] = useState(false);\n  const [invalidInput, setInvalidInput] = useState(false);\n  const changeHandler = (e) => {\n    e.target.setCustomValidity(\"\");\n    setInvalidInput(false);\n    const regex = strict || defaultValidation;\n    if (e.target.value === \"\" || regex.exec(e.target.value) !== null) {\n      setValue(e.target.value);\n      onChange && onChange(e.target);\n    } else {\n      if (!invalidChar) {\n        setInvalidChar(true);\n        setTimeout(() => setInvalidChar(false), 2000);\n      }\n    }\n  };\n  const focus = () => setShowLabel(false);\n  const blur = () => !value && setShowLabel(true);\n  return (\n    <section\n      id={dataId}\n      className={`input ${className || \"\"} ${invalidChar ? \"invalid\" : \"\"} ${\n        disabled ? \"disabled\" : \"\"\n      }`}\n    >\n      <label className={`label ${showLabel ? \"active\" : \"\"}`}>\n        {invalidChar ? (warning ? warning : \"অকার্যকর অক্ষর!\") : label}\n      </label>\n      <input\n        autoFocus={autoFocus}\n        onInvalid={(e) => {\n          e.target.setCustomValidity(\" \");\n          setInvalidInput(true);\n        }}\n        minLength={min}\n        value={value || \"\"}\n        required={required}\n        type={type || \"text\"}\n        onChange={changeHandler}\n        onFocus={focus}\n        onBlur={blur}\n        maxLength={max || 100}\n        id={id ? id : ID(8)}\n        disabled={disabled}\n        placeholder={placeholder}\n        pattern={pattern}\n      />\n      {children}\n      {invalidInput && <p className=\"emptyFieldWarning\">{validationMessage}</p>}\n    </section>\n  );\n};\nexport const DateInput = ({\n  dataId,\n  label,\n  defaultValue,\n  warning,\n  required,\n  onChange,\n  disabled,\n  children,\n  placeholder,\n  validationMessage,\n  min,\n  max,\n}) => {\n  const [value, setValue] = useState(\n    defaultValue ? formatDate(defaultValue) : \"\"\n  );\n  const [showLabel, setShowLabel] = useState(!defaultValue);\n  const [invalidChar, setInvalidChar] = useState(false);\n  const [invalidInput, setInvalidInput] = useState(false);\n  const changeHandler = (e) => {\n    e.target.setCustomValidity(\"\");\n    setInvalidInput(false);\n    setValue(e.target.value);\n    onChange && onChange(e.target);\n  };\n  const focus = () => setShowLabel(false);\n  const blur = () => !value && setShowLabel(true);\n  return (\n    <section\n      id={dataId}\n      className={`input date ${invalidChar ? \"invalid\" : \"\"} ${\n        disabled ? \"disabled\" : \"\"\n      }`}\n    >\n      <label className={`label ${showLabel ? \"active\" : \"\"}`}>\n        {invalidChar ? (warning ? warning : \"অকার্যকর অক্ষর!\") : label}\n      </label>\n      <input\n        onInvalid={(e) => {\n          e.target.setCustomValidity(\" \");\n          setInvalidInput(true);\n        }}\n        min={formatDate(min)}\n        max={formatDate(max)}\n        value={value}\n        required={required}\n        type={\"date\"}\n        onChange={changeHandler}\n        onFocus={focus}\n        onBlur={blur}\n        disabled={disabled}\n        placeholder={placeholder}\n      />\n      {children}\n      {invalidInput && <p className=\"emptyFieldWarning\">{validationMessage}</p>}\n    </section>\n  );\n};\nexport const PasswordInput = ({\n  label,\n  dataId,\n  passwordStrength,\n  placeholder,\n  onChange,\n  defaultValue,\n  validationMessage,\n  id,\n  pattern,\n  children,\n}) => {\n  const [showPass, setShowPass] = useState(false);\n  const [style, setStyle] = useState({ width: 0 });\n  const [passValidation, setPassValidation] = useState(\n    <FormattedMessage id=\"passValidation\" defaultMessage=\"Enter password\" />\n  );\n  function change(target) {\n    const strength = chkPass(target.value);\n    setStyle({\n      width: `${strength}%`,\n      background: `hsl(${strength}, 69%, 48%)`,\n    });\n    onChange && onChange(target);\n  }\n  function handleIconClick(e) {\n    setShowPass(!showPass);\n    e.target.parentElement.querySelector(\"input\").focus();\n  }\n  return (\n    <Input\n      id={id}\n      defaultValue={defaultValue}\n      strict={/./}\n      pattern={pattern}\n      min={8}\n      dataId={dataId}\n      type={showPass ? \"text\" : \"password\"}\n      required={true}\n      label={label}\n      max={32}\n      onChange={change}\n      placeholder={placeholder}\n      validationMessage={validationMessage}\n    >\n      {passwordStrength && (\n        <span style={style} className=\"passwordStrength\"></span>\n      )}\n      {showPass ? (\n        <ion-icon onClick={handleIconClick} name=\"eye-outline\"></ion-icon>\n      ) : (\n        <ion-icon onClick={handleIconClick} name=\"eye-off-outline\"></ion-icon>\n      )}\n      {children}\n    </Input>\n  );\n};\nexport const Mobile = ({\n  required,\n  label,\n  dataId,\n  defaultValue,\n  onChange,\n  validationMessage,\n}) => {\n  const [strict, setStrict] = useState(() =>\n    defaultValue[0] === \"0\" ? /^\\+?\\d{0,11}$/ : /^\\+?\\d{0,14}$/\n  );\n  const [pattern, setPattern] = useState(() =>\n    defaultValue[0] === \"0\" ? \"^01\\\\d{9}$\" : \"^\\\\+8801\\\\d{9}$\"\n  );\n  const [warning, setWarning] = useState(() =>\n    defaultValue[0] === \"0\" ? \"01***\" : \"+8801***\"\n  );\n  return (\n    <Input\n      required={required}\n      label={label}\n      dataId={dataId}\n      defaultValue={defaultValue || \"01\"}\n      onChange={(target) => {\n        if (target.value[0] === \"0\") {\n          setStrict(/^\\+?\\d{0,11}$/);\n          setPattern(\"^01\\\\d{9}$\");\n          setWarning(\"01***\");\n          target.value = \"+88\" + target.value;\n        } else if (target.value[0] === \"+\") {\n          setStrict(/^\\+?\\d{0,14}$/);\n          setPattern(\"^\\\\+8801\\\\d{9}$\");\n          setWarning(\"+8801***\");\n        }\n        onChange(target);\n      }}\n      warning={warning}\n      strict={strict}\n      pattern={pattern}\n      validationMessage={validationMessage}\n    />\n  );\n};\nexport const Textarea = ({\n  type,\n  label,\n  required,\n  id,\n  min,\n  max,\n  dataId,\n  defaultValue,\n  pattern,\n  warning,\n  onChange,\n  className,\n  children,\n  disabled,\n  validationMessage,\n  strict,\n  autoFocus,\n}) => {\n  const [value, setValue] = useState(defaultValue);\n  const [showLabel, setShowLabel] = useState(true);\n  const [invalidChar, setInvalidChar] = useState(false);\n  const [invalidInput, setInvalidInput] = useState(false);\n  useEffect(() => {\n    defaultValue && setValue(defaultValue);\n    defaultValue && setShowLabel(false);\n  }, [defaultValue]);\n  const [showLimit, setShowLimit] = useState(false);\n  const focus = () => {\n    setShowLabel(false);\n    setShowLimit(true);\n  };\n  const blur = () => {\n    value === \"\" && setShowLabel(true);\n    setShowLimit(false);\n  };\n  function change(e) {\n    setInvalidInput(false);\n    e.target.setCustomValidity(\"\");\n    const regex = strict || defaultValidation;\n    if (e.target.value === \"\" || regex.exec(e.target.value) !== null) {\n      setValue(e.target.value);\n      onChange && onChange(e.target);\n    } else {\n      if (!invalidChar) {\n        setInvalidChar(true);\n        setTimeout(() => setInvalidChar(false), 2000);\n      }\n    }\n  }\n  return (\n    <section\n      id={dataId}\n      className={`input textarea ${className ? className : \"\"} ${\n        invalidChar ? \"invalid\" : \"\"\n      }`}\n    >\n      <label className={`label ${showLabel ? \"active\" : \"\"}`}>\n        {invalidChar ? (warning ? warning : \"অকার্যকর অক্ষর!\") : label}\n      </label>\n      <TextareaAutosize\n        autoFocus={autoFocus}\n        onInvalid={(e) => {\n          e.target.setCustomValidity(\" \");\n          setInvalidInput(true);\n        }}\n        disabled={disabled}\n        required={required}\n        value={value}\n        onFocus={focus}\n        onBlur={blur}\n        onChange={change}\n        aria-label=\"minimum height\"\n        minLength={min}\n        maxLength={max}\n        pattern={pattern}\n      />\n      {max && showLimit && (\n        <p className=\"charLimit\">\n          <FormattedMessage\n            id=\"charLimit\"\n            values={{ number: <FormattedNumber value={max - value.length} /> }}\n            defaultValue={`${max - value.length} characters left!`}\n          />\n        </p>\n      )}\n      {children}\n      {invalidInput && <p className=\"emptyFieldWarning\">{validationMessage}</p>}\n    </section>\n  );\n};\nconst Group = ({ id, inputs, clone, setGroupCount }) => {\n  const { lan } = useContext(SiteContext);\n  const [value, setValue] = useState(\"\");\n  function handleMount() {\n    setGroupCount((prev) => {\n      const newGroup = [...prev];\n      newGroup.push(`${id}:${inputs[0].value || \"\"}`);\n      return newGroup;\n    });\n    return () => {\n      setGroupCount((prev) => {\n        return prev.filter((item) => item.split(\":\")[0] !== id);\n      });\n    };\n  }\n  useEffect(handleMount, []);\n  return (\n    <div className=\"group\">\n      {inputs.map((input) => {\n        return (\n          <Input\n            dataId={input.id}\n            key={input.id}\n            warning={input.type === \"number\" && \"0-9, ০-৯\"}\n            defaultValue={input.value}\n            required={input.clone ? false : true}\n            strict={input.type === \"number\" && /^[০-৯0-9]+$/g}\n            label={input.label}\n            id={input.clone ? id : \"\"}\n            onChange={(e) => {\n              clone(e);\n              setValue(e.value);\n            }}\n            disabled={input.clone ? false : input.value ? false : value === \"\"}\n          />\n        );\n      })}\n    </div>\n  );\n};\nexport const MultipleInput = ({ inputs, refInput, id }) => {\n  const [groupCount, setGroupCount] = useState([]);\n  useEffect(() => {\n    if (inputs[0].value) {\n      setGroupCount([]);\n    }\n  }, [inputs]);\n  useEffect(() => {}, [groupCount]);\n  function clone(e) {\n    setGroupCount((prev) => {\n      const newGroup = [...prev];\n      let current = 0;\n      for (var i = 0; i < newGroup.length; i++) {\n        if (newGroup[i].split(\":\")[0] === e.id) {\n          newGroup.splice(i, 1);\n          current = i;\n          break;\n        }\n      }\n      newGroup.splice(current, 0, `${e.id}:${e.value}`);\n      const currentValue = newGroup[current].split(\":\")[1];\n      const nextGroup = newGroup[current + 1];\n      if (currentValue.length >= 1 && nextGroup === undefined) {\n        setFinal((prev) => {\n          const newFinal = [...prev];\n          newFinal.push(\n            <Group\n              id={ID(8)}\n              key={ID(8)}\n              inputs={refInput[0]}\n              clone={clone}\n              groupCount={groupCount}\n              setGroupCount={setGroupCount}\n            />\n          );\n          return newFinal;\n        });\n      } else if (currentValue.length === 0) {\n        setFinal((prev) => {\n          const newFinal = [...prev];\n          for (var i = 0; i < newGroup.length; i++) {\n            const value = newGroup[i].split(\":\")[1];\n            if (value === \"\" && i < current) {\n              newFinal.splice(i, 1);\n            } else if (value === \"\" && i > current) {\n              newFinal.splice(i, 1);\n            }\n          }\n          return newFinal;\n        });\n      }\n      return newGroup;\n    });\n  }\n  const [final, setFinal] = useState([]);\n  function handleInputChange() {\n    setFinal(\n      inputs.map((input) => {\n        return (\n          <Group\n            id={ID(8)}\n            key={ID(8)}\n            inputs={input}\n            clone={clone}\n            groupCount={groupCount}\n            setGroupCount={setGroupCount}\n          />\n        );\n      })\n    );\n  }\n  useEffect(handleInputChange, [inputs]);\n  return (\n    <div id={id} className={`multipleInput`}>\n      {final}\n    </div>\n  );\n};\nexport const Combobox = ({\n  label,\n  icon,\n  options,\n  defaultValue,\n  onChange,\n  maxHeight,\n  required,\n  disabled,\n  dataId,\n  validationMessage,\n}) => {\n  const { locale } = useContext(SiteContext);\n  const [value, setValue] = useState(() => {\n    if (defaultValue > -1 && options[defaultValue]) {\n      return options[defaultValue].label;\n    } else if (typeof defaultValue === \"object\") {\n      return defaultValue[locale];\n    } else {\n      return \"\";\n    }\n  });\n  const [invalidInput, setInvalidInput] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [data, setData] = useState(\"\");\n  const input = useRef();\n  return (\n    <OutsideClick\n      className={`combobox ${disabled ? \"disabled\" : \"\"}`}\n      setOpen={setOpen}\n      open={open}\n      style={{ position: \"relative\" }}\n      id={dataId ? dataId : \"\"}\n    >\n      <label className={`${value === \"\" ? \"active\" : \"\"}`}>{label}</label>\n      <input\n        ref={input}\n        required={required}\n        data={JSON.stringify(data)}\n        value={value}\n        onFocus={(e) => e.target.blur()}\n        onInvalid={(e) => {\n          setInvalidInput(true);\n          e.target.setCustomValidity(\" \");\n        }}\n        onChange={() => {}}\n      />\n      {invalidInput && <p className=\"emptyFieldWarning\">{validationMessage}</p>}\n      <ion-icon\n        onClick={() => setOpen(!open)}\n        name={`${icon ? icon : \"chevron-down\"}-outline`}\n      ></ion-icon>\n      <ul\n        style={{\n          width: \"100%\",\n          position: \"absolute\",\n          maxHeight: open ? maxHeight : 0,\n          zIndex: 100,\n          overflow: \"auto\",\n        }}\n        className=\"options\"\n      >\n        {options.map((option) => (\n          <li\n            key={option.label}\n            onClick={(e) => {\n              setData(option.value);\n              setValue(option.label);\n              onChange && onChange(option);\n              setOpen(false);\n              setInvalidInput(false);\n              input.current.setCustomValidity(\"\");\n            }}\n            className={`option ${value === option.label ? \"selected\" : \"\"}`}\n          >\n            {option.label}\n          </li>\n        ))}\n      </ul>\n    </OutsideClick>\n  );\n};\nexport const Checkbox = ({\n  label,\n  onChange,\n  checked,\n  required,\n  validationMessage,\n  children,\n}) => {\n  const [value, setValue] = useState(checked);\n  function handleChange(e) {\n    e.target.setCustomValidity(\"\");\n    setValue(!checked);\n    onChange && onChange(e.target);\n  }\n  return (\n    <section className={`checkbox ${checked ? \"checked\" : \"\"}`}>\n      <input\n        onChange={handleChange}\n        type=\"Checkbox\"\n        required={required}\n        defaultChecked={value}\n        onInvalid={(e) => e.target.setCustomValidity(validationMessage || \"\")}\n      />\n      <label>\n        {label}\n        {children}\n      </label>\n    </section>\n  );\n};\n\nexport const Submit = ({ disabled, className, label, loading, onClick }) => {\n  return (\n    <button\n      className={`${className} ${loading ? \"loading\" : \"\"}`}\n      type=\"submit\"\n      disabled={loading || disabled}\n      onClick={onClick}\n    >\n      {loading && (\n        <div className=\"spinner\">\n          <div></div>\n          <div></div>\n          <div></div>\n          <div></div>\n        </div>\n      )}\n      {label}\n    </button>\n  );\n};\n","C:\\Users\\naeem\\OneDrive\\Documents\\Atom\\FatwaArchive\\client\\src\\components\\TableElements.js",["167","168"],"import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport { SiteContext } from \"../Context\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { FormattedMessage } from \"react-intl\";\nimport Footer from \"./Footer\";\n\nexport const Sidebar = ({ views, children }) => {\n  const { sidebarSize, setSidebarSize } = useContext(SiteContext);\n  const history = useHistory();\n  const onResize = () =>\n    window.innerWidth <= 1080 ? setSidebarSize(\"mini\") : setSidebarSize(\"full\");\n  function initResize() {\n    onResize();\n    window.addEventListener(\"resize\", onResize);\n    return () => window.addEventListener(\"resize\", onResize);\n  }\n  useEffect(initResize, []);\n  function switchView(e) {\n    Array.from(e.target.parentElement.children).forEach((element) => {\n      element.classList.contains(\"active\") &&\n        element.classList.remove(\"active\");\n    });\n    e.target.classList.add(\"active\");\n  }\n  return (\n    <div className={`sidebar ${sidebarSize}`}>\n      {children}\n      <ul className=\"viewList\">\n        {views.map((view) => {\n          return (\n            <li\n              key={Math.random()}\n              onClick={() =>\n                window.innerWidth <= 1080 && setSidebarSize(\"mini\")\n              }\n              className={\n                history.location.pathname.startsWith(view.path) ? \"active\" : \"\"\n              }\n            >\n              <Link to={view.path} onClick={switchView}>\n                <ion-icon name={`${view.icon}${\"-outline\"}`}></ion-icon>\n                <span>{view.label}</span>\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n      <Footer />\n      <div className=\"backdrop\" onClick={() => setSidebarSize(\"mini\")}></div>\n    </div>\n  );\n};\n\nexport const Filter = ({ categories, filters, setFilters }) => {\n  const [showCategories, setShowCategories] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const [showMiniForm, setShowMiniForm] = useState(false);\n  const [miniForm, setMiniForm] = useState({ name: \"\", input: \"\" });\n  const [defaultFilter, setDefaultFilter] = useState({});\n  const filterInput = useRef();\n  const input = useRef();\n  function change(e) {\n    setValue(e.target.value);\n    e.target.value !== \"\" && !showCategories && setShowCategories(true);\n  }\n  function submit(e) {\n    e.preventDefault();\n    if (filters.some((item) => item.field === defaultFilter.fieldName)) {\n      return;\n    }\n    addFilter(defaultFilter.fieldName, value, defaultFilter.chip);\n    setValue(\"\");\n    filterInput.current.focus();\n    setShowCategories(false);\n  }\n  function miniFormSubmit(e) {\n    e.preventDefault();\n    addFilter(\n      miniForm.fieldName,\n      e.target.querySelector(\"input\").value,\n      miniForm.chip\n    );\n    setValue(\"\");\n    setShowCategories(false);\n  }\n  function suggestionClick(e, item) {\n    setMiniForm(item);\n    setShowMiniForm(true);\n  }\n  function addFilter(field, value, chip) {\n    setFilters((prev) => {\n      const newFilters = [...prev];\n      newFilters.push({\n        field: field,\n        value: value,\n        chip: chip,\n      });\n      return newFilters;\n    });\n    setShowCategories(false);\n  }\n  useEffect(() => {\n    !showCategories && setShowMiniForm(false);\n  }, [showCategories]);\n  useEffect(() => {\n    categories.forEach((item) => {\n      item.default && setDefaultFilter(item);\n    });\n  }, [categories]);\n  return (\n    <div className=\"tableFilter\">\n      <form onSubmit={submit}>\n        <ion-icon\n          onClick={() => filterInput.current.focus()}\n          name=\"filter-outline\"\n        ></ion-icon>\n        <div className=\"chips\">\n          {filters.map((item, i) => {\n            return (\n              <div key={item.field} className=\"chip\">\n                <p>\n                  {item.chip} '<b>{item.value}</b>'\n                </p>\n                <ion-icon\n                  onClick={() =>\n                    setFilters((prev) => {\n                      return prev.filter((i) => i.field !== item.field);\n                    })\n                  }\n                  name=\"close-outline\"\n                ></ion-icon>\n              </div>\n            );\n          })}\n          <FormattedMessage id=\"filter\">\n            {(msg) => (\n              <input\n                ref={filterInput}\n                value={value}\n                onChange={change}\n                onFocus={() => setShowCategories(true)}\n                placeholder={msg}\n              />\n            )}\n          </FormattedMessage>\n        </div>\n        {Object.values(filters).length > 0 && (\n          <ion-icon\n            onClick={() => setFilters([])}\n            name=\"close-outline\"\n          ></ion-icon>\n        )}\n      </form>\n      {showCategories && (\n        <OutsideClick open={showCategories} setOpen={setShowCategories}>\n          <ul\n            className=\"filterSuggestions\"\n            style={{\n              left: filterInput.current.offsetLeft + 8,\n              top: filterInput.current.offsetTop + 40,\n            }}\n          >\n            {!showMiniForm ? (\n              <>\n                {value === \"\" &&\n                  categories\n                    .filter(\n                      (item) =>\n                        !filters.some(\n                          (filter) => filter.field === item.fieldName\n                        )\n                    )\n                    .map((item) => (\n                      <li\n                        key={item.name}\n                        onClick={(e) => suggestionClick(e, item)}\n                      >\n                        {item.name}\n                      </li>\n                    ))}\n                {value !== \"\" &&\n                  !filters.some(\n                    (item) => item.field === defaultFilter.fieldName\n                  ) && (\n                    <li onClick={submit}>\n                      {defaultFilter.chip} '<b>{value}</b>'\n                    </li>\n                  )}\n                {value !== \"\" &&\n                  categories\n                    .filter(\n                      (item) =>\n                        !filters.some(\n                          (filter) => filter.field === item.fieldName\n                        )\n                    )\n                    .filter((item) => item.name.includes(value.toLowerCase()))\n                    .map((item, i) => (\n                      <React.Fragment key={item.name}>\n                        {i === 0 && <hr />}\n                        <li onClick={(e) => suggestionClick(e, item)}>\n                          {item.name}\n                        </li>\n                      </React.Fragment>\n                    ))}\n                {value !== \"\" &&\n                  categories\n                    .filter(\n                      (item) =>\n                        !filters.some(\n                          (filter) => filter.field === item.fieldName\n                        )\n                    )\n                    .filter((item) => item.name.includes(value.toLowerCase()))\n                    .length === 0 &&\n                  filters.some(\n                    (item) => item.field === defaultFilter.fieldName\n                  ) && <li className=\"noFilter\">No matching filter</li>}\n              </>\n            ) : (\n              <div className=\"miniForm\">\n                <header>\n                  <p>{miniForm.name}</p>\n                  <ion-icon\n                    onClick={() => {\n                      setShowCategories(false);\n                    }}\n                    name=\"close-outline\"\n                  ></ion-icon>\n                </header>\n                <form onSubmit={miniFormSubmit}>\n                  {miniForm.input}\n                  <button type=\"submit\">APPLY</button>\n                </form>\n              </div>\n            )}\n          </ul>\n        </OutsideClick>\n      )}\n    </div>\n  );\n};\n\nexport const Tabs = ({ tabs, defaultTab, page }) => {\n  const history = useHistory();\n  const currentPath = history.location.pathname.replace(page, \"\").split(\"/\")[0];\n  const [index, setIndex] = useState(() => {\n    let index = 0;\n    tabs.forEach((item, i) => item.link === currentPath && (index = i));\n    return index;\n  });\n  function switchTab(e) {\n    Array.from(e.target.parentElement.children).forEach((element) => {\n      element.classList.contains(\"active\") &&\n        element.classList.remove(\"active\");\n    });\n    e.target.classList.add(\"active\");\n    Array.from(e.target.parentElement.children).forEach((element, i) => {\n      element.classList.contains(\"active\") && setIndex(i);\n    });\n  }\n  return (\n    <ul className=\"tabs\">\n      {tabs.map((tab, i) => (\n        <Link\n          key={tab.link}\n          className={i === index ? \"active\" : \"\"}\n          onClick={switchTab}\n          to={`${page}${tab.link}`}\n        >\n          {tab.label}\n        </Link>\n      ))}\n      <span\n        style={{\n          left: `${(100 / tabs.length) * index}%`,\n          width: `${100 / tabs.length}%`,\n        }}\n      ></span>\n    </ul>\n  );\n};\n\nexport const Table = ({ id, children, columns, setSort, sort, className }) => {\n  return (\n    <table id={id} className={className}>\n      {columns && (\n        <thead>\n          <tr>\n            {columns.map((col) =>\n              !col.sort ? (\n                <th key={Math.random()}>{col.column}</th>\n              ) : (\n                <th key={Math.random()}>\n                  <button\n                    className={sort.column === col.colCode ? \"active\" : \"\"}\n                    onClick={() =>\n                      setSort((prev) => {\n                        const newSort = { ...prev };\n                        if (newSort.column === col.colCode) {\n                          newSort.order = prev.order === \"asc\" ? \"des\" : \"asc\";\n                          return newSort;\n                        } else {\n                          newSort.column = col.colCode;\n                          newSort.order = \"des\";\n                          return newSort;\n                        }\n                      })\n                    }\n                  >\n                    {col.column}\n                    {sort.column === col.colCode &&\n                      (sort.order === \"des\" ? (\n                        <ion-icon name=\"arrow-down-outline\"></ion-icon>\n                      ) : (\n                        <ion-icon name=\"arrow-up-outline\"></ion-icon>\n                      ))}\n                  </button>\n                </th>\n              )\n            )}\n          </tr>\n        </thead>\n      )}\n      {children && <tbody>{children}</tbody>}\n    </table>\n  );\n};\n\nexport const OutsideClick = ({\n  id,\n  className,\n  style,\n  children,\n  setOpen,\n  open,\n}) => {\n  return (\n    <section className={className} style={style} id={id}>\n      {open && (\n        <div\n          className=\"backdrop\"\n          onClick={(e) => {\n            e.stopPropagation();\n            setOpen(false);\n          }}\n        />\n      )}\n      {children}\n    </section>\n  );\n};\n\nexport const Actions = ({ actions, icon }) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <div className=\"actions\" onClick={() => setOpen(true)}>\n      <ion-icon name={icon || `chevron-down-outline`}></ion-icon>\n      {open && (\n        <OutsideClick open={open} setOpen={setOpen}>\n          <ul>\n            {actions.map((item) => (\n              <li\n                onClick={(e) => {\n                  e.stopPropagation();\n                  item.action();\n                  setOpen(false);\n                }}\n                key={item.label}\n              >\n                {item.label}\n              </li>\n            ))}\n          </ul>\n        </OutsideClick>\n      )}\n    </div>\n  );\n};\n\nconst encodeURI = (arr) =>\n  arr.map((item) => `${item.field}=${item.value}`).join(\"&\");\n\nexport const LoadingColumn = () => {\n  return (\n    <tr className=\"loadingColumn\">\n      <td></td>\n      <td></td>\n      <td></td>\n      <td></td>\n    </tr>\n  );\n};\n\nexport const ErrorColumn = () => {\n  return (\n    <tr>\n      <td>Some thing went wrong!</td>\n    </tr>\n  );\n};\n\nexport const View = ({\n  id,\n  api,\n  categories,\n  columns,\n  defaultSort,\n  Element,\n}) => {\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n  const { locale } = useContext(SiteContext);\n  const [filters, setFilters] = useState([]);\n  const [sort, setSort] = useState(defaultSort);\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  function fetchData() {\n    !loading && setLoading(true);\n    const query = encodeURI(filters);\n    const options = { headers: { \"Accept-Language\": locale }, signal: signal };\n    const url = `/${api}${query}&column=${sort.column}&order=${sort.order}`;\n    fetch(url, options)\n      .then((res) => res.json())\n      .then((data) => {\n        setLoading(false);\n        if (data.code === \"ok\") {\n          setData(data.data);\n        } else {\n          alert(\"something went wrong\");\n        }\n      })\n      .catch((err) => {\n        setLoading(false);\n        if (err.name === \"AbortError\") {\n          return;\n        }\n        console.log(err);\n        alert(\"something went wrong\");\n      });\n    return () => abortController.abort();\n  }\n  useEffect(fetchData, [filters, sort, api]);\n  return (\n    <>\n      {categories && (\n        <Filter\n          filters={filters}\n          setFilters={setFilters}\n          categories={categories}\n        />\n      )}\n      <Table\n        id={id}\n        className=\"thead\"\n        sort={sort}\n        setSort={setSort}\n        columns={columns}\n      />\n      <Table id={id} sort={sort} setSort={setSort}>\n        {loading && <LoadingColumn />}\n        {!loading &&\n          data.map((item) => (\n            <Element setData={setData} key={item._id} data={item} />\n          ))}\n        {!loading && data.length === 0 && <NothingHere />}\n      </Table>\n    </>\n  );\n};\n\nexport const LoadingPost = () => {\n  return (\n    <div className=\"question loading\">\n      <div className=\"user\"></div>\n      <div className=\"ques\"></div>\n      <div className=\"tags\"></div>\n    </div>\n  );\n};\nexport const NothingHere = ({ icon }) => {\n  return (\n    <tr className=\"noData\">\n      <td>\n        <ion-icon name=\"trail-sign-outline\"></ion-icon> -{\" \"}\n        <FormattedMessage id=\"nothingHere\" defaultMessage=\"Nothing here\" /> -\n      </td>\n    </tr>\n  );\n};\n",{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":41,"column":40,"nodeType":"175","messageId":"176","endLine":41,"endColumn":50},{"ruleId":"177","severity":1,"message":"178","line":80,"column":21,"nodeType":"179","endLine":80,"endColumn":23,"suggestions":"180"},{"ruleId":"177","severity":1,"message":"181","line":81,"column":28,"nodeType":"179","endLine":81,"endColumn":30,"suggestions":"182"},{"ruleId":"177","severity":1,"message":"183","line":27,"column":35,"nodeType":"179","endLine":27,"endColumn":43,"suggestions":"184"},{"ruleId":"177","severity":1,"message":"185","line":47,"column":24,"nodeType":"179","endLine":47,"endColumn":31,"suggestions":"186"},{"ruleId":"187","severity":1,"message":"188","line":42,"column":15,"nodeType":"189","endLine":42,"endColumn":18},{"ruleId":"187","severity":1,"message":"188","line":34,"column":33,"nodeType":"189","endLine":34,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":34,"column":46,"nodeType":"189","endLine":34,"endColumn":49},{"ruleId":"173","severity":1,"message":"190","line":4,"column":28,"nodeType":"175","messageId":"176","endLine":4,"endColumn":36},{"ruleId":"173","severity":1,"message":"191","line":30,"column":19,"nodeType":"175","messageId":"176","endLine":30,"endColumn":26},{"ruleId":"173","severity":1,"message":"192","line":30,"column":28,"nodeType":"175","messageId":"176","endLine":30,"endColumn":39},{"ruleId":"177","severity":1,"message":"193","line":69,"column":24,"nodeType":"179","endLine":69,"endColumn":56,"suggestions":"194"},{"ruleId":"177","severity":1,"message":"195","line":168,"column":6,"nodeType":"179","endLine":168,"endColumn":13,"suggestions":"196"},{"ruleId":"173","severity":1,"message":"190","line":2,"column":31,"nodeType":"175","messageId":"176","endLine":2,"endColumn":39},{"ruleId":"177","severity":1,"message":"197","line":966,"column":24,"nodeType":"179","endLine":966,"endColumn":30,"suggestions":"198"},{"ruleId":"177","severity":1,"message":"199","line":1087,"column":22,"nodeType":"179","endLine":1087,"endColumn":24,"suggestions":"200"},{"ruleId":"173","severity":1,"message":"201","line":19,"column":3,"nodeType":"175","messageId":"176","endLine":19,"endColumn":20},{"ruleId":"177","severity":1,"message":"202","line":155,"column":22,"nodeType":"179","endLine":155,"endColumn":24,"suggestions":"203"},{"ruleId":"177","severity":1,"message":"204","line":401,"column":23,"nodeType":"179","endLine":401,"endColumn":35,"suggestions":"205"},{"ruleId":"177","severity":1,"message":"206","line":635,"column":25,"nodeType":"179","endLine":635,"endColumn":32,"suggestions":"207"},{"ruleId":"173","severity":1,"message":"208","line":1053,"column":9,"nodeType":"175","messageId":"176","endLine":1053,"endColumn":16},{"ruleId":"177","severity":1,"message":"209","line":1153,"column":25,"nodeType":"179","endLine":1153,"endColumn":27,"suggestions":"210"},{"ruleId":"211","severity":1,"message":"212","line":1496,"column":11,"nodeType":"213","endLine":1499,"endColumn":13},{"ruleId":"211","severity":1,"message":"212","line":1714,"column":11,"nodeType":"213","endLine":1717,"endColumn":13},{"ruleId":"177","severity":1,"message":"214","line":1762,"column":23,"nodeType":"179","endLine":1762,"endColumn":32,"suggestions":"215"},{"ruleId":"177","severity":1,"message":"197","line":1685,"column":24,"nodeType":"179","endLine":1685,"endColumn":30,"suggestions":"216"},{"ruleId":"173","severity":1,"message":"217","line":1722,"column":10,"nodeType":"175","messageId":"176","endLine":1722,"endColumn":17},{"ruleId":"177","severity":1,"message":"218","line":1828,"column":22,"nodeType":"179","endLine":1828,"endColumn":24,"suggestions":"219"},{"ruleId":"173","severity":1,"message":"220","line":6,"column":10,"nodeType":"175","messageId":"176","endLine":6,"endColumn":22},{"ruleId":"173","severity":1,"message":"221","line":9,"column":7,"nodeType":"175","messageId":"176","endLine":9,"endColumn":24},{"ruleId":"222","severity":1,"message":"223","line":11,"column":38,"nodeType":"224","messageId":"225","endLine":11,"endColumn":39,"suggestions":"226"},{"ruleId":"177","severity":1,"message":"227","line":47,"column":6,"nodeType":"179","endLine":47,"endColumn":13,"suggestions":"228"},{"ruleId":"177","severity":1,"message":"229","line":78,"column":30,"nodeType":"179","endLine":78,"endColumn":32,"suggestions":"230"},{"ruleId":"177","severity":1,"message":"231","line":105,"column":24,"nodeType":"179","endLine":105,"endColumn":31,"suggestions":"232"},{"ruleId":"187","severity":1,"message":"188","line":205,"column":17,"nodeType":"189","endLine":224,"endColumn":18},{"ruleId":"233","severity":1,"message":"234","line":63,"column":1,"nodeType":"235","messageId":"236","endLine":71,"endColumn":2},{"ruleId":"173","severity":1,"message":"237","line":95,"column":5,"nodeType":"175","messageId":"176","endLine":95,"endColumn":24},{"ruleId":"173","severity":1,"message":"238","line":96,"column":7,"nodeType":"175","messageId":"176","endLine":96,"endColumn":19},{"ruleId":"173","severity":1,"message":"239","line":97,"column":5,"nodeType":"175","messageId":"176","endLine":97,"endColumn":22},{"ruleId":"173","severity":1,"message":"240","line":99,"column":5,"nodeType":"175","messageId":"176","endLine":99,"endColumn":22},{"ruleId":"173","severity":1,"message":"241","line":103,"column":7,"nodeType":"175","messageId":"176","endLine":103,"endColumn":19},{"ruleId":"173","severity":1,"message":"242","line":104,"column":5,"nodeType":"175","messageId":"176","endLine":104,"endColumn":17},{"ruleId":"173","severity":1,"message":"243","line":105,"column":5,"nodeType":"175","messageId":"176","endLine":105,"endColumn":17},{"ruleId":"173","severity":1,"message":"244","line":135,"column":7,"nodeType":"175","messageId":"176","endLine":135,"endColumn":17},{"ruleId":"245","severity":1,"message":"246","line":218,"column":14,"nodeType":"175","messageId":"247","endLine":218,"endColumn":15},{"ruleId":"245","severity":1,"message":"248","line":219,"column":11,"nodeType":"175","messageId":"247","endLine":219,"endColumn":15},{"ruleId":"245","severity":1,"message":"249","line":220,"column":11,"nodeType":"175","messageId":"247","endLine":220,"endColumn":15},{"ruleId":"245","severity":1,"message":"246","line":230,"column":14,"nodeType":"175","messageId":"247","endLine":230,"endColumn":15},{"ruleId":"245","severity":1,"message":"248","line":231,"column":11,"nodeType":"175","messageId":"247","endLine":231,"endColumn":15},{"ruleId":"245","severity":1,"message":"249","line":232,"column":11,"nodeType":"175","messageId":"247","endLine":232,"endColumn":15},{"ruleId":"173","severity":1,"message":"250","line":246,"column":7,"nodeType":"175","messageId":"176","endLine":246,"endColumn":15},{"ruleId":"173","severity":1,"message":"251","line":250,"column":7,"nodeType":"175","messageId":"176","endLine":250,"endColumn":15},{"ruleId":"173","severity":1,"message":"252","line":254,"column":7,"nodeType":"175","messageId":"176","endLine":254,"endColumn":14},{"ruleId":"173","severity":1,"message":"253","line":258,"column":7,"nodeType":"175","messageId":"176","endLine":258,"endColumn":14},{"ruleId":"173","severity":1,"message":"254","line":262,"column":7,"nodeType":"175","messageId":"176","endLine":262,"endColumn":15},{"ruleId":"173","severity":1,"message":"255","line":270,"column":7,"nodeType":"175","messageId":"176","endLine":270,"endColumn":18},{"ruleId":"173","severity":1,"message":"256","line":276,"column":7,"nodeType":"175","messageId":"176","endLine":276,"endColumn":19},{"ruleId":"173","severity":1,"message":"257","line":281,"column":7,"nodeType":"175","messageId":"176","endLine":281,"endColumn":15},{"ruleId":"173","severity":1,"message":"258","line":286,"column":7,"nodeType":"175","messageId":"176","endLine":286,"endColumn":21},{"ruleId":"173","severity":1,"message":"259","line":291,"column":7,"nodeType":"175","messageId":"176","endLine":291,"endColumn":21},{"ruleId":"173","severity":1,"message":"260","line":296,"column":7,"nodeType":"175","messageId":"176","endLine":296,"endColumn":20},{"ruleId":"173","severity":1,"message":"261","line":301,"column":7,"nodeType":"175","messageId":"176","endLine":301,"endColumn":16},{"ruleId":"173","severity":1,"message":"262","line":306,"column":7,"nodeType":"175","messageId":"176","endLine":306,"endColumn":17},{"ruleId":"173","severity":1,"message":"263","line":311,"column":7,"nodeType":"175","messageId":"176","endLine":311,"endColumn":17},{"ruleId":"245","severity":1,"message":"264","line":322,"column":13,"nodeType":"175","messageId":"247","endLine":322,"endColumn":19},{"ruleId":"245","severity":1,"message":"265","line":334,"column":11,"nodeType":"175","messageId":"247","endLine":334,"endColumn":23},{"ruleId":"173","severity":1,"message":"266","line":339,"column":7,"nodeType":"175","messageId":"176","endLine":339,"endColumn":20},{"ruleId":"245","severity":1,"message":"267","line":343,"column":9,"nodeType":"175","messageId":"247","endLine":343,"endColumn":17},{"ruleId":"245","severity":1,"message":"268","line":344,"column":9,"nodeType":"175","messageId":"247","endLine":344,"endColumn":20},{"ruleId":"245","severity":1,"message":"269","line":345,"column":9,"nodeType":"175","messageId":"247","endLine":345,"endColumn":20},{"ruleId":"245","severity":1,"message":"270","line":346,"column":14,"nodeType":"175","messageId":"247","endLine":346,"endColumn":15},{"ruleId":"245","severity":1,"message":"264","line":348,"column":13,"nodeType":"175","messageId":"247","endLine":348,"endColumn":19},{"ruleId":"245","severity":1,"message":"264","line":350,"column":13,"nodeType":"175","messageId":"247","endLine":350,"endColumn":19},{"ruleId":"245","severity":1,"message":"267","line":355,"column":9,"nodeType":"175","messageId":"247","endLine":355,"endColumn":17},{"ruleId":"173","severity":1,"message":"271","line":382,"column":7,"nodeType":"175","messageId":"176","endLine":382,"endColumn":18},{"ruleId":"173","severity":1,"message":"272","line":519,"column":23,"nodeType":"175","messageId":"176","endLine":519,"endColumn":37},{"ruleId":"173","severity":1,"message":"273","line":574,"column":10,"nodeType":"175","messageId":"176","endLine":574,"endColumn":24},{"ruleId":"173","severity":1,"message":"274","line":574,"column":26,"nodeType":"175","messageId":"176","endLine":574,"endColumn":43},{"ruleId":"173","severity":1,"message":"275","line":752,"column":11,"nodeType":"175","messageId":"176","endLine":752,"endColumn":14},{"ruleId":"177","severity":1,"message":"276","line":766,"column":26,"nodeType":"179","endLine":766,"endColumn":28,"suggestions":"277"},{"ruleId":"177","severity":1,"message":"278","line":862,"column":32,"nodeType":"179","endLine":862,"endColumn":40,"suggestions":"279"},{"ruleId":"177","severity":1,"message":"280","line":17,"column":25,"nodeType":"179","endLine":17,"endColumn":27,"suggestions":"281"},{"ruleId":"177","severity":1,"message":"282","line":443,"column":24,"nodeType":"179","endLine":443,"endColumn":44,"suggestions":"283"},"no-native-reassign",["284"],"no-negated-in-lhs",["285"],"no-unused-vars","'setSources' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history.location.pathname' and 'setLocale'. Either include them or remove the dependency array.","ArrayExpression",["286"],"React Hook useEffect has missing dependencies: 'history', 'setIsAuthenticated', and 'setUser'. Either include them or remove the dependency array.",["287"],"React Hook useEffect has missing dependencies: 'fatwa.link' and 'history'. Either include them or remove the dependency array.",["288"],"React Hook useEffect has missing dependencies: 'abortController' and 'options'. Either include them or remove the dependency array.",["289"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Redirect' is defined but never used.","'sources' is assigned a value but never used.","'searchInput' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history', 'url.page', and 'url.q'. Either include them or remove the dependency array.",["290"],"React Hook useEffect has missing dependencies: 'btns' and 'perPage'. Either include them or remove the dependency array. If 'setPages' needs the current value of 'perPage', you can also switch to useReducer instead of useState and read 'perPage' in the reducer.",["291"],"React Hook useEffect has missing dependencies: 'abortController', 'locale', and 'signal'. Either include them or remove the dependency array.",["292"],"React Hook useEffect has missing dependencies: 'match.params._id' and 'user._id'. Either include them or remove the dependency array.",["293"],"'emptyFieldWarning' is defined but never used.","React Hook useEffect has missing dependencies: 'setIdIsValid' and 'validateId'. Either include them or remove the dependency array. If 'setIdIsValid' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["294"],"React Hook useEffect has missing dependencies: 'history' and 'user'. Either include them or remove the dependency array.",["295"],"React Hook useEffect has missing dependencies: 'resend' and 'step'. Either include them or remove the dependency array.",["296"],"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fatwaToEdit' and 'setFatwaToEdit'. Either include them or remove the dependency array.",["297"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["298"],["299"],"'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'match.params._id'. Either include it or remove the dependency array.",["300"],"'OutsideClick' is defined but never used.","'defaultValidation' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["301","302"],"React Hook useEffect has a missing dependency: 'locale'. Either include it or remove the dependency array.",["303"],"React Hook useEffect has missing dependencies: 'history.location.pathname' and 'history.location.search'. Either include them or remove the dependency array.",["304"],"React Hook useEffect has missing dependencies: 'abortController', 'locale', 'signal', and 'wrongLan'. Either include them or remove the dependency array.",["305"],"no-extend-native","String prototype is read only, properties should not be added.","AssignmentExpression","unexpected","'nMultConsecCharType' is assigned a value but never used.","'nMultRepChar' is assigned a value but never used.","'nMultConsecSymbol' is assigned a value but never used.","'nMultRequirements' is assigned a value but never used.","'nReqCharType' is assigned a value but never used.","'nMultAlphaUC' is assigned a value but never used.","'nMultAlphaLC' is assigned a value but never used.","'sStandards' is assigned a value but never used.","no-redeclare","'s' is already defined.","redeclared","'sFwd' is already defined.","'sRev' is already defined.","'sAlphaUC' is assigned a value but never used.","'sAlphaLC' is assigned a value but never used.","'sNumber' is assigned a value but never used.","'sSymbol' is assigned a value but never used.","'sMidChar' is assigned a value but never used.","'sAlphasOnly' is assigned a value but never used.","'sNumbersOnly' is assigned a value but never used.","'sRepChar' is assigned a value but never used.","'sConsecAlphaUC' is assigned a value but never used.","'sConsecAlphaLC' is assigned a value but never used.","'sConsecNumber' is assigned a value but never used.","'sSeqAlpha' is assigned a value but never used.","'sSeqNumber' is assigned a value but never used.","'sSeqSymbol' is assigned a value but never used.","'minVal' is already defined.","'nMinReqChars' is already defined.","'sRequirements' is assigned a value but never used.","'arrChars' is already defined.","'arrCharsIds' is already defined.","'arrCharsLen' is already defined.","'c' is already defined.","'sComplexity' is assigned a value but never used.","'setInvalidChar' is assigned a value but never used.","'passValidation' is assigned a value but never used.","'setPassValidation' is assigned a value but never used.","'lan' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'id', 'inputs', and 'setGroupCount'. Either include them or remove the dependency array. If 'setGroupCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["306"],"React Hook useEffect has missing dependencies: 'clone' and 'groupCount'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setFinal' needs the current value of 'groupCount'.",["307"],"React Hook useEffect has a missing dependency: 'onResize'. Either include it or remove the dependency array.",["308"],"React Hook useEffect has missing dependencies: 'abortController', 'loading', 'locale', and 'signal'. Either include them or remove the dependency array.",["309"],"no-global-assign","no-unsafe-negation",{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},{"desc":"334","fix":"335"},{"desc":"322","fix":"336"},{"desc":"337","fix":"338"},{"messageId":"339","fix":"340","desc":"341"},{"messageId":"342","fix":"343","desc":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},"Update the dependencies array to be: [history.location.pathname, setLocale]",{"range":"359","text":"360"},"Update the dependencies array to be: [history, setIsAuthenticated, setUser]",{"range":"361","text":"362"},"Update the dependencies array to be: [fatwa.link, history, locale]",{"range":"363","text":"364"},"Update the dependencies array to be: [abortController, match, options]",{"range":"365","text":"366"},"Update the dependencies array to be: [history, history.location, locale, page, url.page, url.q]",{"range":"367","text":"368"},"Update the dependencies array to be: [btns, perPage, total]",{"range":"369","text":"370"},"Update the dependencies array to be: [abortController, locale, signal, sort]",{"range":"371","text":"372"},"Update the dependencies array to be: [match.params._id, user._id]",{"range":"373","text":"374"},"Update the dependencies array to be: [setIdIsValid, validateId]",{"range":"375","text":"376"},"Update the dependencies array to be: [history, setSuccess, user]",{"range":"377","text":"378"},"Update the dependencies array to be: [resend, step, timer]",{"range":"379","text":"380"},"Update the dependencies array to be: [fatwaToEdit, setFatwaToEdit]",{"range":"381","text":"382"},"Update the dependencies array to be: [history, success]",{"range":"383","text":"384"},{"range":"385","text":"372"},"Update the dependencies array to be: [match.params._id]",{"range":"386","text":"387"},"removeEscape",{"range":"388","text":"389"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"390","text":"391"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [locale, value]",{"range":"392","text":"393"},"Update the dependencies array to be: [history.location.pathname, history.location.search]",{"range":"394","text":"395"},"Update the dependencies array to be: [abortController, locale, signal, value, wrongLan]",{"range":"396","text":"397"},"Update the dependencies array to be: [id, inputs, setGroupCount]",{"range":"398","text":"399"},"Update the dependencies array to be: [clone, groupCount, inputs]",{"range":"400","text":"401"},"Update the dependencies array to be: [onResize]",{"range":"402","text":"403"},"Update the dependencies array to be: [filters, sort, api, loading, locale, signal, abortController]",{"range":"404","text":"405"},[2528,2530],"[history.location.pathname, setLocale]",[2560,2562],"[history, setIsAuthenticated, setUser]",[869,877],"[fatwa.link, history, locale]",[1493,1500],"[abortController, match, options]",[2091,2123],"[history, history.location, locale, page, url.page, url.q]",[4779,4786],"[btns, perPage, total]",[29594,29600],"[abortController, locale, signal, sort]",[33155,33157],"[match.params._id, user._id]",[4288,4290],"[setIdIsValid, validateId]",[11261,11273],"[history, setSuccess, user]",[18212,18219],"[resend, step, timer]",[34232,34234],"[fatwaToEdit, setFatwaToEdit]",[53710,53719],"[history, success]",[51978,51984],[56116,56118],"[match.params._id]",[466,467],"",[466,466],"\\",[1515,1522],"[locale, value]",[2338,2340],"[history.location.pathname, history.location.search]",[3095,3102],"[abortController, locale, signal, value, wrongLan]",[22908,22910],"[id, inputs, setGroupCount]",[25649,25657],"[clone, groupCount, inputs]",[682,684],"[onResize]",[13229,13249],"[filters, sort, api, loading, locale, signal, abortController]"]